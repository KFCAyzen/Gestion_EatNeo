"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@grpc";
exports.ids = ["vendor-chunks/@grpc"];
exports.modules = {

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/admin.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.addAdminServicesToServer = exports.registerAdminService = void 0;\r\nconst registeredAdminServices = [];\r\nfunction registerAdminService(getServiceDefinition, getHandlers) {\r\n    registeredAdminServices.push({ getServiceDefinition, getHandlers });\r\n}\r\nexports.registerAdminService = registerAdminService;\r\nfunction addAdminServicesToServer(server) {\r\n    for (const { getServiceDefinition, getHandlers } of registeredAdminServices) {\r\n        server.addService(getServiceDefinition(), getHandlers());\r\n    }\r\n}\r\nexports.addAdminServicesToServer = addAdminServicesToServer;\r\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyw0QkFBNEI7QUFDL0Q7QUFDQTtBQUNBLG1DQUFtQyxtQ0FBbUM7QUFDdEU7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2FkbWluLmpzP2EzYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIxIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyID0gZXhwb3J0cy5yZWdpc3RlckFkbWluU2VydmljZSA9IHZvaWQgMDtcclxuY29uc3QgcmVnaXN0ZXJlZEFkbWluU2VydmljZXMgPSBbXTtcclxuZnVuY3Rpb24gcmVnaXN0ZXJBZG1pblNlcnZpY2UoZ2V0U2VydmljZURlZmluaXRpb24sIGdldEhhbmRsZXJzKSB7XHJcbiAgICByZWdpc3RlcmVkQWRtaW5TZXJ2aWNlcy5wdXNoKHsgZ2V0U2VydmljZURlZmluaXRpb24sIGdldEhhbmRsZXJzIH0pO1xyXG59XHJcbmV4cG9ydHMucmVnaXN0ZXJBZG1pblNlcnZpY2UgPSByZWdpc3RlckFkbWluU2VydmljZTtcclxuZnVuY3Rpb24gYWRkQWRtaW5TZXJ2aWNlc1RvU2VydmVyKHNlcnZlcikge1xyXG4gICAgZm9yIChjb25zdCB7IGdldFNlcnZpY2VEZWZpbml0aW9uLCBnZXRIYW5kbGVycyB9IG9mIHJlZ2lzdGVyZWRBZG1pblNlcnZpY2VzKSB7XHJcbiAgICAgICAgc2VydmVyLmFkZFNlcnZpY2UoZ2V0U2VydmljZURlZmluaXRpb24oKSwgZ2V0SGFuZGxlcnMoKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5hZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXIgPSBhZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkbWluLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BackoffTimeout = void 0;\r\nconst INITIAL_BACKOFF_MS = 1000;\r\nconst BACKOFF_MULTIPLIER = 1.6;\r\nconst MAX_BACKOFF_MS = 120000;\r\nconst BACKOFF_JITTER = 0.2;\r\n/**\r\n * Get a number uniformly at random in the range [min, max)\r\n * @param min\r\n * @param max\r\n */\r\nfunction uniformRandom(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\nclass BackoffTimeout {\r\n    constructor(callback, options) {\r\n        this.callback = callback;\r\n        /**\r\n         * The delay time at the start, and after each reset.\r\n         */\r\n        this.initialDelay = INITIAL_BACKOFF_MS;\r\n        /**\r\n         * The exponential backoff multiplier.\r\n         */\r\n        this.multiplier = BACKOFF_MULTIPLIER;\r\n        /**\r\n         * The maximum delay time\r\n         */\r\n        this.maxDelay = MAX_BACKOFF_MS;\r\n        /**\r\n         * The maximum fraction by which the delay time can randomly vary after\r\n         * applying the multiplier.\r\n         */\r\n        this.jitter = BACKOFF_JITTER;\r\n        /**\r\n         * Indicates whether the timer is currently running.\r\n         */\r\n        this.running = false;\r\n        /**\r\n         * Indicates whether the timer should keep the Node process running if no\r\n         * other async operation is doing so.\r\n         */\r\n        this.hasRef = true;\r\n        /**\r\n         * The time that the currently running timer was started. Only valid if\r\n         * running is true.\r\n         */\r\n        this.startTime = new Date();\r\n        /**\r\n         * The approximate time that the currently running timer will end. Only valid\r\n         * if running is true.\r\n         */\r\n        this.endTime = new Date();\r\n        if (options) {\r\n            if (options.initialDelay) {\r\n                this.initialDelay = options.initialDelay;\r\n            }\r\n            if (options.multiplier) {\r\n                this.multiplier = options.multiplier;\r\n            }\r\n            if (options.jitter) {\r\n                this.jitter = options.jitter;\r\n            }\r\n            if (options.maxDelay) {\r\n                this.maxDelay = options.maxDelay;\r\n            }\r\n        }\r\n        this.nextDelay = this.initialDelay;\r\n        this.timerId = setTimeout(() => { }, 0);\r\n        clearTimeout(this.timerId);\r\n    }\r\n    runTimer(delay) {\r\n        var _a, _b;\r\n        this.endTime = this.startTime;\r\n        this.endTime.setMilliseconds(this.endTime.getMilliseconds() + this.nextDelay);\r\n        clearTimeout(this.timerId);\r\n        this.timerId = setTimeout(() => {\r\n            this.callback();\r\n            this.running = false;\r\n        }, delay);\r\n        if (!this.hasRef) {\r\n            (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    }\r\n    /**\r\n     * Call the callback after the current amount of delay time\r\n     */\r\n    runOnce() {\r\n        this.running = true;\r\n        this.startTime = new Date();\r\n        this.runTimer(this.nextDelay);\r\n        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);\r\n        const jitterMagnitude = nextBackoff * this.jitter;\r\n        this.nextDelay =\r\n            nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);\r\n    }\r\n    /**\r\n     * Stop the timer. The callback will not be called until `runOnce` is called\r\n     * again.\r\n     */\r\n    stop() {\r\n        clearTimeout(this.timerId);\r\n        this.running = false;\r\n    }\r\n    /**\r\n     * Reset the delay time to its initial value. If the timer is still running,\r\n     * retroactively apply that reset to the current timer.\r\n     */\r\n    reset() {\r\n        this.nextDelay = this.initialDelay;\r\n        if (this.running) {\r\n            const now = new Date();\r\n            const newEndTime = this.startTime;\r\n            newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);\r\n            clearTimeout(this.timerId);\r\n            if (now < newEndTime) {\r\n                this.runTimer(newEndTime.getTime() - now.getTime());\r\n            }\r\n            else {\r\n                this.running = false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Check whether the timer is currently running.\r\n     */\r\n    isRunning() {\r\n        return this.running;\r\n    }\r\n    /**\r\n     * Set that while the timer is running, it should keep the Node process\r\n     * running.\r\n     */\r\n    ref() {\r\n        var _a, _b;\r\n        this.hasRef = true;\r\n        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    /**\r\n     * Set that while the timer is running, it should not keep the Node process\r\n     * running.\r\n     */\r\n    unref() {\r\n        var _a, _b;\r\n        this.hasRef = false;\r\n        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    /**\r\n     * Get the approximate timestamp of when the timer will fire. Only valid if\r\n     * this.isRunning() is true.\r\n     */\r\n    getEndTime() {\r\n        return this.endTime;\r\n    }\r\n}\r\nexports.BackoffTimeout = BackoffTimeout;\r\n//# sourceMappingURL=backoff-timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js":
/*!******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-credentials.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CallCredentials = void 0;\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nfunction isCurrentOauth2Client(client) {\r\n    return ('getRequestHeaders' in client &&\r\n        typeof client.getRequestHeaders === 'function');\r\n}\r\n/**\r\n * A class that represents a generic method of adding authentication-related\r\n * metadata on a per-request basis.\r\n */\r\nclass CallCredentials {\r\n    /**\r\n     * Creates a new CallCredentials object from a given function that generates\r\n     * Metadata objects.\r\n     * @param metadataGenerator A function that accepts a set of options, and\r\n     * generates a Metadata object based on these options, which is passed back\r\n     * to the caller via a supplied (err, metadata) callback.\r\n     */\r\n    static createFromMetadataGenerator(metadataGenerator) {\r\n        return new SingleCallCredentials(metadataGenerator);\r\n    }\r\n    /**\r\n     * Create a gRPC credential from a Google credential object.\r\n     * @param googleCredentials The authentication client to use.\r\n     * @return The resulting CallCredentials object.\r\n     */\r\n    static createFromGoogleCredential(googleCredentials) {\r\n        return CallCredentials.createFromMetadataGenerator((options, callback) => {\r\n            let getHeaders;\r\n            if (isCurrentOauth2Client(googleCredentials)) {\r\n                getHeaders = googleCredentials.getRequestHeaders(options.service_url);\r\n            }\r\n            else {\r\n                getHeaders = new Promise((resolve, reject) => {\r\n                    googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        if (!headers) {\r\n                            reject(new Error('Headers not set by metadata plugin'));\r\n                            return;\r\n                        }\r\n                        resolve(headers);\r\n                    });\r\n                });\r\n            }\r\n            getHeaders.then(headers => {\r\n                const metadata = new metadata_1.Metadata();\r\n                for (const key of Object.keys(headers)) {\r\n                    metadata.add(key, headers[key]);\r\n                }\r\n                callback(null, metadata);\r\n            }, err => {\r\n                callback(err);\r\n            });\r\n        });\r\n    }\r\n    static createEmpty() {\r\n        return new EmptyCallCredentials();\r\n    }\r\n}\r\nexports.CallCredentials = CallCredentials;\r\nclass ComposedCallCredentials extends CallCredentials {\r\n    constructor(creds) {\r\n        super();\r\n        this.creds = creds;\r\n    }\r\n    async generateMetadata(options) {\r\n        const base = new metadata_1.Metadata();\r\n        const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));\r\n        for (const gen of generated) {\r\n            base.merge(gen);\r\n        }\r\n        return base;\r\n    }\r\n    compose(other) {\r\n        return new ComposedCallCredentials(this.creds.concat([other]));\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof ComposedCallCredentials) {\r\n            return this.creds.every((value, index) => value._equals(other.creds[index]));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass SingleCallCredentials extends CallCredentials {\r\n    constructor(metadataGenerator) {\r\n        super();\r\n        this.metadataGenerator = metadataGenerator;\r\n    }\r\n    generateMetadata(options) {\r\n        return new Promise((resolve, reject) => {\r\n            this.metadataGenerator(options, (err, metadata) => {\r\n                if (metadata !== undefined) {\r\n                    resolve(metadata);\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    compose(other) {\r\n        return new ComposedCallCredentials([this, other]);\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof SingleCallCredentials) {\r\n            return this.metadataGenerator === other.metadataGenerator;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass EmptyCallCredentials extends CallCredentials {\r\n    generateMetadata(options) {\r\n        return Promise.resolve(new metadata_1.Metadata());\r\n    }\r\n    compose(other) {\r\n        return other;\r\n    }\r\n    _equals(other) {\r\n        return other instanceof EmptyCallCredentials;\r\n    }\r\n}\r\n//# sourceMappingURL=call-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call-interface.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-interface.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InterceptingListenerImpl = exports.isInterceptingListener = void 0;\r\nfunction isInterceptingListener(listener) {\r\n    return (listener.onReceiveMetadata !== undefined &&\r\n        listener.onReceiveMetadata.length === 1);\r\n}\r\nexports.isInterceptingListener = isInterceptingListener;\r\nclass InterceptingListenerImpl {\r\n    constructor(listener, nextListener) {\r\n        this.listener = listener;\r\n        this.nextListener = nextListener;\r\n        this.processingMetadata = false;\r\n        this.hasPendingMessage = false;\r\n        this.processingMessage = false;\r\n        this.pendingStatus = null;\r\n    }\r\n    processPendingMessage() {\r\n        if (this.hasPendingMessage) {\r\n            this.nextListener.onReceiveMessage(this.pendingMessage);\r\n            this.pendingMessage = null;\r\n            this.hasPendingMessage = false;\r\n        }\r\n    }\r\n    processPendingStatus() {\r\n        if (this.pendingStatus) {\r\n            this.nextListener.onReceiveStatus(this.pendingStatus);\r\n        }\r\n    }\r\n    onReceiveMetadata(metadata) {\r\n        this.processingMetadata = true;\r\n        this.listener.onReceiveMetadata(metadata, metadata => {\r\n            this.processingMetadata = false;\r\n            this.nextListener.onReceiveMetadata(metadata);\r\n            this.processPendingMessage();\r\n            this.processPendingStatus();\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    onReceiveMessage(message) {\r\n        /* If this listener processes messages asynchronously, the last message may\r\n         * be reordered with respect to the status */\r\n        this.processingMessage = true;\r\n        this.listener.onReceiveMessage(message, msg => {\r\n            this.processingMessage = false;\r\n            if (this.processingMetadata) {\r\n                this.pendingMessage = msg;\r\n                this.hasPendingMessage = true;\r\n            }\r\n            else {\r\n                this.nextListener.onReceiveMessage(msg);\r\n                this.processPendingStatus();\r\n            }\r\n        });\r\n    }\r\n    onReceiveStatus(status) {\r\n        this.listener.onReceiveStatus(status, processedStatus => {\r\n            if (this.processingMetadata || this.processingMessage) {\r\n                this.pendingStatus = processedStatus;\r\n            }\r\n            else {\r\n                this.nextListener.onReceiveStatus(processedStatus);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\r\n//# sourceMappingURL=call-interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyw4QkFBOEI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jYWxsLWludGVyZmFjZS5qcz81YjFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkludGVyY2VwdGluZ0xpc3RlbmVySW1wbCA9IGV4cG9ydHMuaXNJbnRlcmNlcHRpbmdMaXN0ZW5lciA9IHZvaWQgMDtcclxuZnVuY3Rpb24gaXNJbnRlcmNlcHRpbmdMaXN0ZW5lcihsaXN0ZW5lcikge1xyXG4gICAgcmV0dXJuIChsaXN0ZW5lci5vblJlY2VpdmVNZXRhZGF0YSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgbGlzdGVuZXIub25SZWNlaXZlTWV0YWRhdGEubGVuZ3RoID09PSAxKTtcclxufVxyXG5leHBvcnRzLmlzSW50ZXJjZXB0aW5nTGlzdGVuZXIgPSBpc0ludGVyY2VwdGluZ0xpc3RlbmVyO1xyXG5jbGFzcyBJbnRlcmNlcHRpbmdMaXN0ZW5lckltcGwge1xyXG4gICAgY29uc3RydWN0b3IobGlzdGVuZXIsIG5leHRMaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcclxuICAgICAgICB0aGlzLm5leHRMaXN0ZW5lciA9IG5leHRMaXN0ZW5lcjtcclxuICAgICAgICB0aGlzLnByb2Nlc3NpbmdNZXRhZGF0YSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ01lc3NhZ2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnByb2Nlc3NpbmdNZXNzYWdlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nU3RhdHVzID0gbnVsbDtcclxuICAgIH1cclxuICAgIHByb2Nlc3NQZW5kaW5nTWVzc2FnZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5oYXNQZW5kaW5nTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVNZXNzYWdlKHRoaXMucGVuZGluZ01lc3NhZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdNZXNzYWdlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5oYXNQZW5kaW5nTWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByb2Nlc3NQZW5kaW5nU3RhdHVzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdTdGF0dXMpIHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0TGlzdGVuZXIub25SZWNlaXZlU3RhdHVzKHRoaXMucGVuZGluZ1N0YXR1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25SZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NpbmdNZXRhZGF0YSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lci5vblJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSwgbWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NpbmdNZXRhZGF0YSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1BlbmRpbmdNZXNzYWdlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1BlbmRpbmdTdGF0dXMoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBvblJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICAvKiBJZiB0aGlzIGxpc3RlbmVyIHByb2Nlc3NlcyBtZXNzYWdlcyBhc3luY2hyb25vdXNseSwgdGhlIGxhc3QgbWVzc2FnZSBtYXlcclxuICAgICAgICAgKiBiZSByZW9yZGVyZWQgd2l0aCByZXNwZWN0IHRvIHRoZSBzdGF0dXMgKi9cclxuICAgICAgICB0aGlzLnByb2Nlc3NpbmdNZXNzYWdlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyLm9uUmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSwgbXNnID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ01lc3NhZ2UgPSBtc2c7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1BlbmRpbmdNZXNzYWdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZU1lc3NhZ2UobXNnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1BlbmRpbmdTdGF0dXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgb25SZWNlaXZlU3RhdHVzKHN0YXR1cykge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXIub25SZWNlaXZlU3RhdHVzKHN0YXR1cywgcHJvY2Vzc2VkU3RhdHVzID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvY2Vzc2luZ01ldGFkYXRhIHx8IHRoaXMucHJvY2Vzc2luZ01lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1N0YXR1cyA9IHByb2Nlc3NlZFN0YXR1cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyhwcm9jZXNzZWRTdGF0dXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5JbnRlcmNlcHRpbmdMaXN0ZW5lckltcGwgPSBJbnRlcmNlcHRpbmdMaXN0ZW5lckltcGw7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGwtaW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call-interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call-number.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-number.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getNextCallNumber = void 0;\r\nlet nextCallNumber = 0;\r\nfunction getNextCallNumber() {\r\n    return nextCallNumber++;\r\n}\r\nexports.getNextCallNumber = getNextCallNumber;\r\n//# sourceMappingURL=call-number.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1udW1iZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jYWxsLW51bWJlci5qcz83NzRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldE5leHRDYWxsTnVtYmVyID0gdm9pZCAwO1xyXG5sZXQgbmV4dENhbGxOdW1iZXIgPSAwO1xyXG5mdW5jdGlvbiBnZXROZXh0Q2FsbE51bWJlcigpIHtcclxuICAgIHJldHVybiBuZXh0Q2FsbE51bWJlcisrO1xyXG59XHJcbmV4cG9ydHMuZ2V0TmV4dENhbGxOdW1iZXIgPSBnZXROZXh0Q2FsbE51bWJlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FsbC1udW1iZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call-number.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/call.js":
/*!******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = exports.callErrorFromStatus = void 0;\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\n/**\r\n * Construct a ServiceError from a StatusObject. This function exists primarily\r\n * as an attempt to make the error stack trace clearly communicate that the\r\n * error is not necessarily a problem in gRPC itself.\r\n * @param status\r\n */\r\nfunction callErrorFromStatus(status, callerStack) {\r\n    const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\r\n    const error = new Error(message);\r\n    const stack = `${error.stack}\\nfor call at\\n${callerStack}`;\r\n    return Object.assign(new Error(message), status, { stack });\r\n}\r\nexports.callErrorFromStatus = callErrorFromStatus;\r\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n}\r\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\r\nclass ClientReadableStreamImpl extends stream_1.Readable {\r\n    constructor(deserialize) {\r\n        super({ objectMode: true });\r\n        this.deserialize = deserialize;\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n    _read(_size) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\r\n    }\r\n}\r\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\r\nclass ClientWritableStreamImpl extends stream_1.Writable {\r\n    constructor(serialize) {\r\n        super({ objectMode: true });\r\n        this.serialize = serialize;\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n    _write(chunk, encoding, cb) {\r\n        var _a;\r\n        const context = {\r\n            callback: cb,\r\n        };\r\n        const flags = Number(encoding);\r\n        if (!Number.isNaN(flags)) {\r\n            context.flags = flags;\r\n        }\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\r\n    }\r\n    _final(cb) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\r\n        cb();\r\n    }\r\n}\r\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\r\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\r\n    constructor(serialize, deserialize) {\r\n        super({ objectMode: true });\r\n        this.serialize = serialize;\r\n        this.deserialize = deserialize;\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n    _read(_size) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\r\n    }\r\n    _write(chunk, encoding, cb) {\r\n        var _a;\r\n        const context = {\r\n            callback: cb,\r\n        };\r\n        const flags = Number(encoding);\r\n        if (!Number.isNaN(flags)) {\r\n            context.flags = flags;\r\n        }\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\r\n    }\r\n    _final(cb) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\r\n        cb();\r\n    }\r\n}\r\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl;\r\n//# sourceMappingURL=call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-credentials.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChannelCredentials = void 0;\r\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\r\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\r\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction verifyIsBufferOrNull(obj, friendlyName) {\r\n    if (obj && !(obj instanceof Buffer)) {\r\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\r\n    }\r\n}\r\n/**\r\n * A class that contains credentials for communicating over a channel, as well\r\n * as a set of per-call credentials, which are applied to every method call made\r\n * over a channel initialized with an instance of this class.\r\n */\r\nclass ChannelCredentials {\r\n    constructor(callCredentials) {\r\n        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\r\n    }\r\n    /**\r\n     * Gets the set of per-call credentials associated with this instance.\r\n     */\r\n    _getCallCredentials() {\r\n        return this.callCredentials;\r\n    }\r\n    /**\r\n     * Return a new ChannelCredentials instance with a given set of credentials.\r\n     * The resulting instance can be used to construct a Channel that communicates\r\n     * over TLS.\r\n     * @param rootCerts The root certificate data.\r\n     * @param privateKey The client certificate private key, if available.\r\n     * @param certChain The client certificate key chain, if available.\r\n     * @param verifyOptions Additional options to modify certificate verification\r\n     */\r\n    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\r\n        var _a;\r\n        verifyIsBufferOrNull(rootCerts, 'Root certificate');\r\n        verifyIsBufferOrNull(privateKey, 'Private key');\r\n        verifyIsBufferOrNull(certChain, 'Certificate chain');\r\n        if (privateKey && !certChain) {\r\n            throw new Error('Private key must be given with accompanying certificate chain');\r\n        }\r\n        if (!privateKey && certChain) {\r\n            throw new Error('Certificate chain must be given with accompanying private key');\r\n        }\r\n        const secureContext = (0, tls_1.createSecureContext)({\r\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\r\n            key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\r\n            cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\r\n            ciphers: tls_helpers_1.CIPHER_SUITES,\r\n        });\r\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\r\n    }\r\n    /**\r\n     * Return a new ChannelCredentials instance with credentials created using\r\n     * the provided secureContext. The resulting instances can be used to\r\n     * construct a Channel that communicates over TLS. gRPC will not override\r\n     * anything in the provided secureContext, so the environment variables\r\n     * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\r\n     * not be applied.\r\n     * @param secureContext The return value of tls.createSecureContext()\r\n     * @param verifyOptions Additional options to modify certificate verification\r\n     */\r\n    static createFromSecureContext(secureContext, verifyOptions) {\r\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\r\n    }\r\n    /**\r\n     * Return a new ChannelCredentials instance with no credentials.\r\n     */\r\n    static createInsecure() {\r\n        return new InsecureChannelCredentialsImpl();\r\n    }\r\n}\r\nexports.ChannelCredentials = ChannelCredentials;\r\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\r\n    constructor(callCredentials) {\r\n        super(callCredentials);\r\n    }\r\n    compose(callCredentials) {\r\n        throw new Error('Cannot compose insecure credentials');\r\n    }\r\n    _getConnectionOptions() {\r\n        return null;\r\n    }\r\n    _isSecure() {\r\n        return false;\r\n    }\r\n    _equals(other) {\r\n        return other instanceof InsecureChannelCredentialsImpl;\r\n    }\r\n}\r\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\r\n    constructor(secureContext, verifyOptions) {\r\n        super();\r\n        this.secureContext = secureContext;\r\n        this.verifyOptions = verifyOptions;\r\n        this.connectionOptions = {\r\n            secureContext,\r\n        };\r\n        // Node asserts that this option is a function, so we cannot pass undefined\r\n        if (verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.checkServerIdentity) {\r\n            this.connectionOptions.checkServerIdentity =\r\n                verifyOptions.checkServerIdentity;\r\n        }\r\n    }\r\n    compose(callCredentials) {\r\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\r\n        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\r\n    }\r\n    _getConnectionOptions() {\r\n        // Copy to prevent callers from mutating this.connectionOptions\r\n        return Object.assign({}, this.connectionOptions);\r\n    }\r\n    _isSecure() {\r\n        return true;\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof SecureChannelCredentialsImpl) {\r\n            return (this.secureContext === other.secureContext &&\r\n                this.verifyOptions.checkServerIdentity ===\r\n                    other.verifyOptions.checkServerIdentity);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\r\n    constructor(channelCredentials, callCreds) {\r\n        super(callCreds);\r\n        this.channelCredentials = channelCredentials;\r\n    }\r\n    compose(callCredentials) {\r\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\r\n        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\r\n    }\r\n    _getConnectionOptions() {\r\n        return this.channelCredentials._getConnectionOptions();\r\n    }\r\n    _isSecure() {\r\n        return true;\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof ComposedChannelCredentialsImpl) {\r\n            return (this.channelCredentials._equals(other.channelCredentials) &&\r\n                this.callCredentials._equals(other.callCredentials));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=channel-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.channelOptionsEqual = exports.recognizedOptions = void 0;\r\n/**\r\n * This is for checking provided options at runtime. This is an object for\r\n * easier membership checking.\r\n */\r\nexports.recognizedOptions = {\r\n    'grpc.ssl_target_name_override': true,\r\n    'grpc.primary_user_agent': true,\r\n    'grpc.secondary_user_agent': true,\r\n    'grpc.default_authority': true,\r\n    'grpc.keepalive_time_ms': true,\r\n    'grpc.keepalive_timeout_ms': true,\r\n    'grpc.keepalive_permit_without_calls': true,\r\n    'grpc.service_config': true,\r\n    'grpc.max_concurrent_streams': true,\r\n    'grpc.initial_reconnect_backoff_ms': true,\r\n    'grpc.max_reconnect_backoff_ms': true,\r\n    'grpc.use_local_subchannel_pool': true,\r\n    'grpc.max_send_message_length': true,\r\n    'grpc.max_receive_message_length': true,\r\n    'grpc.enable_http_proxy': true,\r\n    'grpc.enable_channelz': true,\r\n    'grpc.dns_min_time_between_resolutions_ms': true,\r\n    'grpc.enable_retries': true,\r\n    'grpc.per_rpc_retry_buffer_size': true,\r\n    'grpc.retry_buffer_size': true,\r\n    'grpc.max_connection_age_ms': true,\r\n    'grpc.max_connection_age_grace_ms': true,\r\n    'grpc-node.max_session_memory': true,\r\n    'grpc.service_config_disable_resolution': true,\r\n    'grpc.client_idle_timeout_ms': true,\r\n    'grpc-node.tls_enable_trace': true,\r\n};\r\nfunction channelOptionsEqual(options1, options2) {\r\n    const keys1 = Object.keys(options1).sort();\r\n    const keys2 = Object.keys(options2).sort();\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < keys1.length; i += 1) {\r\n        if (keys1[i] !== keys2[i]) {\r\n            return false;\r\n        }\r\n        if (options1[keys1[i]] !== options2[keys2[i]]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.channelOptionsEqual = channelOptionsEqual;\r\n//# sourceMappingURL=channel-options.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcseUJBQXlCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdG9fcGgvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzPzE0ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY2hhbm5lbE9wdGlvbnNFcXVhbCA9IGV4cG9ydHMucmVjb2duaXplZE9wdGlvbnMgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBUaGlzIGlzIGZvciBjaGVja2luZyBwcm92aWRlZCBvcHRpb25zIGF0IHJ1bnRpbWUuIFRoaXMgaXMgYW4gb2JqZWN0IGZvclxyXG4gKiBlYXNpZXIgbWVtYmVyc2hpcCBjaGVja2luZy5cclxuICovXHJcbmV4cG9ydHMucmVjb2duaXplZE9wdGlvbnMgPSB7XHJcbiAgICAnZ3JwYy5zc2xfdGFyZ2V0X25hbWVfb3ZlcnJpZGUnOiB0cnVlLFxyXG4gICAgJ2dycGMucHJpbWFyeV91c2VyX2FnZW50JzogdHJ1ZSxcclxuICAgICdncnBjLnNlY29uZGFyeV91c2VyX2FnZW50JzogdHJ1ZSxcclxuICAgICdncnBjLmRlZmF1bHRfYXV0aG9yaXR5JzogdHJ1ZSxcclxuICAgICdncnBjLmtlZXBhbGl2ZV90aW1lX21zJzogdHJ1ZSxcclxuICAgICdncnBjLmtlZXBhbGl2ZV90aW1lb3V0X21zJzogdHJ1ZSxcclxuICAgICdncnBjLmtlZXBhbGl2ZV9wZXJtaXRfd2l0aG91dF9jYWxscyc6IHRydWUsXHJcbiAgICAnZ3JwYy5zZXJ2aWNlX2NvbmZpZyc6IHRydWUsXHJcbiAgICAnZ3JwYy5tYXhfY29uY3VycmVudF9zdHJlYW1zJzogdHJ1ZSxcclxuICAgICdncnBjLmluaXRpYWxfcmVjb25uZWN0X2JhY2tvZmZfbXMnOiB0cnVlLFxyXG4gICAgJ2dycGMubWF4X3JlY29ubmVjdF9iYWNrb2ZmX21zJzogdHJ1ZSxcclxuICAgICdncnBjLnVzZV9sb2NhbF9zdWJjaGFubmVsX3Bvb2wnOiB0cnVlLFxyXG4gICAgJ2dycGMubWF4X3NlbmRfbWVzc2FnZV9sZW5ndGgnOiB0cnVlLFxyXG4gICAgJ2dycGMubWF4X3JlY2VpdmVfbWVzc2FnZV9sZW5ndGgnOiB0cnVlLFxyXG4gICAgJ2dycGMuZW5hYmxlX2h0dHBfcHJveHknOiB0cnVlLFxyXG4gICAgJ2dycGMuZW5hYmxlX2NoYW5uZWx6JzogdHJ1ZSxcclxuICAgICdncnBjLmRuc19taW5fdGltZV9iZXR3ZWVuX3Jlc29sdXRpb25zX21zJzogdHJ1ZSxcclxuICAgICdncnBjLmVuYWJsZV9yZXRyaWVzJzogdHJ1ZSxcclxuICAgICdncnBjLnBlcl9ycGNfcmV0cnlfYnVmZmVyX3NpemUnOiB0cnVlLFxyXG4gICAgJ2dycGMucmV0cnlfYnVmZmVyX3NpemUnOiB0cnVlLFxyXG4gICAgJ2dycGMubWF4X2Nvbm5lY3Rpb25fYWdlX21zJzogdHJ1ZSxcclxuICAgICdncnBjLm1heF9jb25uZWN0aW9uX2FnZV9ncmFjZV9tcyc6IHRydWUsXHJcbiAgICAnZ3JwYy1ub2RlLm1heF9zZXNzaW9uX21lbW9yeSc6IHRydWUsXHJcbiAgICAnZ3JwYy5zZXJ2aWNlX2NvbmZpZ19kaXNhYmxlX3Jlc29sdXRpb24nOiB0cnVlLFxyXG4gICAgJ2dycGMuY2xpZW50X2lkbGVfdGltZW91dF9tcyc6IHRydWUsXHJcbiAgICAnZ3JwYy1ub2RlLnRsc19lbmFibGVfdHJhY2UnOiB0cnVlLFxyXG59O1xyXG5mdW5jdGlvbiBjaGFubmVsT3B0aW9uc0VxdWFsKG9wdGlvbnMxLCBvcHRpb25zMikge1xyXG4gICAgY29uc3Qga2V5czEgPSBPYmplY3Qua2V5cyhvcHRpb25zMSkuc29ydCgpO1xyXG4gICAgY29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyhvcHRpb25zMikuc29ydCgpO1xyXG4gICAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzMS5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgIGlmIChrZXlzMVtpXSAhPT0ga2V5czJbaV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9uczFba2V5czFbaV1dICE9PSBvcHRpb25zMltrZXlzMltpXV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmV4cG9ydHMuY2hhbm5lbE9wdGlvbnNFcXVhbCA9IGNoYW5uZWxPcHRpb25zRXF1YWw7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYW5uZWwtb3B0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChannelImplementation = void 0;\r\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\r\nconst internal_channel_1 = __webpack_require__(/*! ./internal-channel */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\");\r\nclass ChannelImplementation {\r\n    constructor(target, credentials, options) {\r\n        if (typeof target !== 'string') {\r\n            throw new TypeError('Channel target must be a string');\r\n        }\r\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\r\n            throw new TypeError('Channel credentials must be a ChannelCredentials object');\r\n        }\r\n        if (options) {\r\n            if (typeof options !== 'object') {\r\n                throw new TypeError('Channel options must be an object');\r\n            }\r\n        }\r\n        this.internalChannel = new internal_channel_1.InternalChannel(target, credentials, options);\r\n    }\r\n    close() {\r\n        this.internalChannel.close();\r\n    }\r\n    getTarget() {\r\n        return this.internalChannel.getTarget();\r\n    }\r\n    getConnectivityState(tryToConnect) {\r\n        return this.internalChannel.getConnectivityState(tryToConnect);\r\n    }\r\n    watchConnectivityState(currentState, deadline, callback) {\r\n        this.internalChannel.watchConnectivityState(currentState, deadline, callback);\r\n    }\r\n    /**\r\n     * Get the channelz reference object for this channel. The returned value is\r\n     * garbage if channelz is disabled for this channel.\r\n     * @returns\r\n     */\r\n    getChannelzRef() {\r\n        return this.internalChannel.getChannelzRef();\r\n    }\r\n    createCall(method, deadline, host, parentCall, propagateFlags) {\r\n        if (typeof method !== 'string') {\r\n            throw new TypeError('Channel#createCall: method must be a string');\r\n        }\r\n        if (!(typeof deadline === 'number' || deadline instanceof Date)) {\r\n            throw new TypeError('Channel#createCall: deadline must be a number or Date');\r\n        }\r\n        return this.internalChannel.createCall(method, deadline, host, parentCall, propagateFlags);\r\n    }\r\n}\r\nexports.ChannelImplementation = ChannelImplementation;\r\n//# sourceMappingURL=channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw4QkFBOEIsbUJBQU8sQ0FBQyxrR0FBdUI7QUFDN0QsMkJBQTJCLG1CQUFPLENBQUMsNEZBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NoYW5uZWwuanM/YTNiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5DaGFubmVsSW1wbGVtZW50YXRpb24gPSB2b2lkIDA7XHJcbmNvbnN0IGNoYW5uZWxfY3JlZGVudGlhbHNfMSA9IHJlcXVpcmUoXCIuL2NoYW5uZWwtY3JlZGVudGlhbHNcIik7XHJcbmNvbnN0IGludGVybmFsX2NoYW5uZWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsLWNoYW5uZWxcIik7XHJcbmNsYXNzIENoYW5uZWxJbXBsZW1lbnRhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIGNyZWRlbnRpYWxzLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NoYW5uZWwgdGFyZ2V0IG11c3QgYmUgYSBzdHJpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEoY3JlZGVudGlhbHMgaW5zdGFuY2VvZiBjaGFubmVsX2NyZWRlbnRpYWxzXzEuQ2hhbm5lbENyZWRlbnRpYWxzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsIGNyZWRlbnRpYWxzIG11c3QgYmUgYSBDaGFubmVsQ3JlZGVudGlhbHMgb2JqZWN0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NoYW5uZWwgb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxDaGFubmVsID0gbmV3IGludGVybmFsX2NoYW5uZWxfMS5JbnRlcm5hbENoYW5uZWwodGFyZ2V0LCBjcmVkZW50aWFscywgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmludGVybmFsQ2hhbm5lbC5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgZ2V0VGFyZ2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsQ2hhbm5lbC5nZXRUYXJnZXQoKTtcclxuICAgIH1cclxuICAgIGdldENvbm5lY3Rpdml0eVN0YXRlKHRyeVRvQ29ubmVjdCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsQ2hhbm5lbC5nZXRDb25uZWN0aXZpdHlTdGF0ZSh0cnlUb0Nvbm5lY3QpO1xyXG4gICAgfVxyXG4gICAgd2F0Y2hDb25uZWN0aXZpdHlTdGF0ZShjdXJyZW50U3RhdGUsIGRlYWRsaW5lLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxDaGFubmVsLndhdGNoQ29ubmVjdGl2aXR5U3RhdGUoY3VycmVudFN0YXRlLCBkZWFkbGluZSwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGNoYW5uZWx6IHJlZmVyZW5jZSBvYmplY3QgZm9yIHRoaXMgY2hhbm5lbC4gVGhlIHJldHVybmVkIHZhbHVlIGlzXHJcbiAgICAgKiBnYXJiYWdlIGlmIGNoYW5uZWx6IGlzIGRpc2FibGVkIGZvciB0aGlzIGNoYW5uZWwuXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBnZXRDaGFubmVselJlZigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbENoYW5uZWwuZ2V0Q2hhbm5lbHpSZWYoKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUNhbGwobWV0aG9kLCBkZWFkbGluZSwgaG9zdCwgcGFyZW50Q2FsbCwgcHJvcGFnYXRlRmxhZ3MpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hhbm5lbCNjcmVhdGVDYWxsOiBtZXRob2QgbXVzdCBiZSBhIHN0cmluZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0eXBlb2YgZGVhZGxpbmUgPT09ICdudW1iZXInIHx8IGRlYWRsaW5lIGluc3RhbmNlb2YgRGF0ZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hhbm5lbCNjcmVhdGVDYWxsOiBkZWFkbGluZSBtdXN0IGJlIGEgbnVtYmVyIG9yIERhdGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmNyZWF0ZUNhbGwobWV0aG9kLCBkZWFkbGluZSwgaG9zdCwgcGFyZW50Q2FsbCwgcHJvcGFnYXRlRmxhZ3MpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQ2hhbm5lbEltcGxlbWVudGF0aW9uID0gQ2hhbm5lbEltcGxlbWVudGF0aW9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFubmVsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channelz.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = exports.getChannelzServiceDefinition = exports.getChannelzHandlers = exports.unregisterChannelzRef = exports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTracker = exports.ChannelzChildrenTracker = exports.ChannelzTrace = void 0;\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\r\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\r\nfunction channelRefToMessage(ref) {\r\n    return {\r\n        channel_id: ref.id,\r\n        name: ref.name,\r\n    };\r\n}\r\nfunction subchannelRefToMessage(ref) {\r\n    return {\r\n        subchannel_id: ref.id,\r\n        name: ref.name,\r\n    };\r\n}\r\nfunction serverRefToMessage(ref) {\r\n    return {\r\n        server_id: ref.id,\r\n    };\r\n}\r\nfunction socketRefToMessage(ref) {\r\n    return {\r\n        socket_id: ref.id,\r\n        name: ref.name,\r\n    };\r\n}\r\n/**\r\n * The loose upper bound on the number of events that should be retained in a\r\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\r\n * number that should be large enough to contain the recent relevant\r\n * information, but small enough to not use excessive memory.\r\n */\r\nconst TARGET_RETAINED_TRACES = 32;\r\nclass ChannelzTrace {\r\n    constructor() {\r\n        this.events = [];\r\n        this.eventsLogged = 0;\r\n        this.creationTimestamp = new Date();\r\n    }\r\n    addTrace(severity, description, child) {\r\n        const timestamp = new Date();\r\n        this.events.push({\r\n            description: description,\r\n            severity: severity,\r\n            timestamp: timestamp,\r\n            childChannel: (child === null || child === void 0 ? void 0 : child.kind) === 'channel' ? child : undefined,\r\n            childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === 'subchannel' ? child : undefined,\r\n        });\r\n        // Whenever the trace array gets too large, discard the first half\r\n        if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\r\n            this.events = this.events.slice(TARGET_RETAINED_TRACES);\r\n        }\r\n        this.eventsLogged += 1;\r\n    }\r\n    getTraceMessage() {\r\n        return {\r\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\r\n            num_events_logged: this.eventsLogged,\r\n            events: this.events.map(event => {\r\n                return {\r\n                    description: event.description,\r\n                    severity: event.severity,\r\n                    timestamp: dateToProtoTimestamp(event.timestamp),\r\n                    channel_ref: event.childChannel\r\n                        ? channelRefToMessage(event.childChannel)\r\n                        : null,\r\n                    subchannel_ref: event.childSubchannel\r\n                        ? subchannelRefToMessage(event.childSubchannel)\r\n                        : null,\r\n                };\r\n            }),\r\n        };\r\n    }\r\n}\r\nexports.ChannelzTrace = ChannelzTrace;\r\nclass ChannelzChildrenTracker {\r\n    constructor() {\r\n        this.channelChildren = new Map();\r\n        this.subchannelChildren = new Map();\r\n        this.socketChildren = new Map();\r\n    }\r\n    refChild(child) {\r\n        var _a, _b, _c;\r\n        switch (child.kind) {\r\n            case 'channel': {\r\n                const trackedChild = (_a = this.channelChildren.get(child.id)) !== null && _a !== void 0 ? _a : {\r\n                    ref: child,\r\n                    count: 0,\r\n                };\r\n                trackedChild.count += 1;\r\n                this.channelChildren.set(child.id, trackedChild);\r\n                break;\r\n            }\r\n            case 'subchannel': {\r\n                const trackedChild = (_b = this.subchannelChildren.get(child.id)) !== null && _b !== void 0 ? _b : {\r\n                    ref: child,\r\n                    count: 0,\r\n                };\r\n                trackedChild.count += 1;\r\n                this.subchannelChildren.set(child.id, trackedChild);\r\n                break;\r\n            }\r\n            case 'socket': {\r\n                const trackedChild = (_c = this.socketChildren.get(child.id)) !== null && _c !== void 0 ? _c : {\r\n                    ref: child,\r\n                    count: 0,\r\n                };\r\n                trackedChild.count += 1;\r\n                this.socketChildren.set(child.id, trackedChild);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    unrefChild(child) {\r\n        switch (child.kind) {\r\n            case 'channel': {\r\n                const trackedChild = this.channelChildren.get(child.id);\r\n                if (trackedChild !== undefined) {\r\n                    trackedChild.count -= 1;\r\n                    if (trackedChild.count === 0) {\r\n                        this.channelChildren.delete(child.id);\r\n                    }\r\n                    else {\r\n                        this.channelChildren.set(child.id, trackedChild);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'subchannel': {\r\n                const trackedChild = this.subchannelChildren.get(child.id);\r\n                if (trackedChild !== undefined) {\r\n                    trackedChild.count -= 1;\r\n                    if (trackedChild.count === 0) {\r\n                        this.subchannelChildren.delete(child.id);\r\n                    }\r\n                    else {\r\n                        this.subchannelChildren.set(child.id, trackedChild);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'socket': {\r\n                const trackedChild = this.socketChildren.get(child.id);\r\n                if (trackedChild !== undefined) {\r\n                    trackedChild.count -= 1;\r\n                    if (trackedChild.count === 0) {\r\n                        this.socketChildren.delete(child.id);\r\n                    }\r\n                    else {\r\n                        this.socketChildren.set(child.id, trackedChild);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    getChildLists() {\r\n        const channels = [];\r\n        for (const { ref } of this.channelChildren.values()) {\r\n            channels.push(ref);\r\n        }\r\n        const subchannels = [];\r\n        for (const { ref } of this.subchannelChildren.values()) {\r\n            subchannels.push(ref);\r\n        }\r\n        const sockets = [];\r\n        for (const { ref } of this.socketChildren.values()) {\r\n            sockets.push(ref);\r\n        }\r\n        return { channels, subchannels, sockets };\r\n    }\r\n}\r\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\r\nclass ChannelzCallTracker {\r\n    constructor() {\r\n        this.callsStarted = 0;\r\n        this.callsSucceeded = 0;\r\n        this.callsFailed = 0;\r\n        this.lastCallStartedTimestamp = null;\r\n    }\r\n    addCallStarted() {\r\n        this.callsStarted += 1;\r\n        this.lastCallStartedTimestamp = new Date();\r\n    }\r\n    addCallSucceeded() {\r\n        this.callsSucceeded += 1;\r\n    }\r\n    addCallFailed() {\r\n        this.callsFailed += 1;\r\n    }\r\n}\r\nexports.ChannelzCallTracker = ChannelzCallTracker;\r\nlet nextId = 1;\r\nfunction getNextId() {\r\n    return nextId++;\r\n}\r\nconst channels = [];\r\nconst subchannels = [];\r\nconst servers = [];\r\nconst sockets = [];\r\nfunction registerChannelzChannel(name, getInfo, channelzEnabled) {\r\n    const id = getNextId();\r\n    const ref = { id, name, kind: 'channel' };\r\n    if (channelzEnabled) {\r\n        channels[id] = { ref, getInfo };\r\n    }\r\n    return ref;\r\n}\r\nexports.registerChannelzChannel = registerChannelzChannel;\r\nfunction registerChannelzSubchannel(name, getInfo, channelzEnabled) {\r\n    const id = getNextId();\r\n    const ref = { id, name, kind: 'subchannel' };\r\n    if (channelzEnabled) {\r\n        subchannels[id] = { ref, getInfo };\r\n    }\r\n    return ref;\r\n}\r\nexports.registerChannelzSubchannel = registerChannelzSubchannel;\r\nfunction registerChannelzServer(getInfo, channelzEnabled) {\r\n    const id = getNextId();\r\n    const ref = { id, kind: 'server' };\r\n    if (channelzEnabled) {\r\n        servers[id] = { ref, getInfo };\r\n    }\r\n    return ref;\r\n}\r\nexports.registerChannelzServer = registerChannelzServer;\r\nfunction registerChannelzSocket(name, getInfo, channelzEnabled) {\r\n    const id = getNextId();\r\n    const ref = { id, name, kind: 'socket' };\r\n    if (channelzEnabled) {\r\n        sockets[id] = { ref, getInfo };\r\n    }\r\n    return ref;\r\n}\r\nexports.registerChannelzSocket = registerChannelzSocket;\r\nfunction unregisterChannelzRef(ref) {\r\n    switch (ref.kind) {\r\n        case 'channel':\r\n            delete channels[ref.id];\r\n            return;\r\n        case 'subchannel':\r\n            delete subchannels[ref.id];\r\n            return;\r\n        case 'server':\r\n            delete servers[ref.id];\r\n            return;\r\n        case 'socket':\r\n            delete sockets[ref.id];\r\n            return;\r\n    }\r\n}\r\nexports.unregisterChannelzRef = unregisterChannelzRef;\r\n/**\r\n * Parse a single section of an IPv6 address as two bytes\r\n * @param addressSection A hexadecimal string of length up to 4\r\n * @returns The pair of bytes representing this address section\r\n */\r\nfunction parseIPv6Section(addressSection) {\r\n    const numberValue = Number.parseInt(addressSection, 16);\r\n    return [(numberValue / 256) | 0, numberValue % 256];\r\n}\r\n/**\r\n * Parse a chunk of an IPv6 address string to some number of bytes\r\n * @param addressChunk Some number of segments of up to 4 hexadecimal\r\n *   characters each, joined by colons.\r\n * @returns The list of bytes representing this address chunk\r\n */\r\nfunction parseIPv6Chunk(addressChunk) {\r\n    if (addressChunk === '') {\r\n        return [];\r\n    }\r\n    const bytePairs = addressChunk\r\n        .split(':')\r\n        .map(section => parseIPv6Section(section));\r\n    const result = [];\r\n    return result.concat(...bytePairs);\r\n}\r\n/**\r\n * Converts an IPv4 or IPv6 address from string representation to binary\r\n * representation\r\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\r\n * @returns\r\n */\r\nfunction ipAddressStringToBuffer(ipAddress) {\r\n    if ((0, net_1.isIPv4)(ipAddress)) {\r\n        return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\r\n    }\r\n    else if ((0, net_1.isIPv6)(ipAddress)) {\r\n        let leftSection;\r\n        let rightSection;\r\n        const doubleColonIndex = ipAddress.indexOf('::');\r\n        if (doubleColonIndex === -1) {\r\n            leftSection = ipAddress;\r\n            rightSection = '';\r\n        }\r\n        else {\r\n            leftSection = ipAddress.substring(0, doubleColonIndex);\r\n            rightSection = ipAddress.substring(doubleColonIndex + 2);\r\n        }\r\n        const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\r\n        const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\r\n        const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\r\n        return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nfunction connectivityStateToMessage(state) {\r\n    switch (state) {\r\n        case connectivity_state_1.ConnectivityState.CONNECTING:\r\n            return {\r\n                state: 'CONNECTING',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.IDLE:\r\n            return {\r\n                state: 'IDLE',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.READY:\r\n            return {\r\n                state: 'READY',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.SHUTDOWN:\r\n            return {\r\n                state: 'SHUTDOWN',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\r\n            return {\r\n                state: 'TRANSIENT_FAILURE',\r\n            };\r\n        default:\r\n            return {\r\n                state: 'UNKNOWN',\r\n            };\r\n    }\r\n}\r\nfunction dateToProtoTimestamp(date) {\r\n    if (!date) {\r\n        return null;\r\n    }\r\n    const millisSinceEpoch = date.getTime();\r\n    return {\r\n        seconds: (millisSinceEpoch / 1000) | 0,\r\n        nanos: (millisSinceEpoch % 1000) * 1000000,\r\n    };\r\n}\r\nfunction getChannelMessage(channelEntry) {\r\n    const resolvedInfo = channelEntry.getInfo();\r\n    return {\r\n        ref: channelRefToMessage(channelEntry.ref),\r\n        data: {\r\n            target: resolvedInfo.target,\r\n            state: connectivityStateToMessage(resolvedInfo.state),\r\n            calls_started: resolvedInfo.callTracker.callsStarted,\r\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\r\n            calls_failed: resolvedInfo.callTracker.callsFailed,\r\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\r\n            trace: resolvedInfo.trace.getTraceMessage(),\r\n        },\r\n        channel_ref: resolvedInfo.children.channels.map(ref => channelRefToMessage(ref)),\r\n        subchannel_ref: resolvedInfo.children.subchannels.map(ref => subchannelRefToMessage(ref)),\r\n    };\r\n}\r\nfunction GetChannel(call, callback) {\r\n    const channelId = Number.parseInt(call.request.channel_id);\r\n    const channelEntry = channels[channelId];\r\n    if (channelEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No channel data found for id ' + channelId,\r\n        });\r\n        return;\r\n    }\r\n    callback(null, { channel: getChannelMessage(channelEntry) });\r\n}\r\nfunction GetTopChannels(call, callback) {\r\n    const maxResults = Number.parseInt(call.request.max_results);\r\n    const resultList = [];\r\n    let i = Number.parseInt(call.request.start_channel_id);\r\n    for (; i < channels.length; i++) {\r\n        const channelEntry = channels[i];\r\n        if (channelEntry === undefined) {\r\n            continue;\r\n        }\r\n        resultList.push(getChannelMessage(channelEntry));\r\n        if (resultList.length >= maxResults) {\r\n            break;\r\n        }\r\n    }\r\n    callback(null, {\r\n        channel: resultList,\r\n        end: i >= servers.length,\r\n    });\r\n}\r\nfunction getServerMessage(serverEntry) {\r\n    const resolvedInfo = serverEntry.getInfo();\r\n    return {\r\n        ref: serverRefToMessage(serverEntry.ref),\r\n        data: {\r\n            calls_started: resolvedInfo.callTracker.callsStarted,\r\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\r\n            calls_failed: resolvedInfo.callTracker.callsFailed,\r\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\r\n            trace: resolvedInfo.trace.getTraceMessage(),\r\n        },\r\n        listen_socket: resolvedInfo.listenerChildren.sockets.map(ref => socketRefToMessage(ref)),\r\n    };\r\n}\r\nfunction GetServer(call, callback) {\r\n    const serverId = Number.parseInt(call.request.server_id);\r\n    const serverEntry = servers[serverId];\r\n    if (serverEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No server data found for id ' + serverId,\r\n        });\r\n        return;\r\n    }\r\n    callback(null, { server: getServerMessage(serverEntry) });\r\n}\r\nfunction GetServers(call, callback) {\r\n    const maxResults = Number.parseInt(call.request.max_results);\r\n    const resultList = [];\r\n    let i = Number.parseInt(call.request.start_server_id);\r\n    for (; i < servers.length; i++) {\r\n        const serverEntry = servers[i];\r\n        if (serverEntry === undefined) {\r\n            continue;\r\n        }\r\n        resultList.push(getServerMessage(serverEntry));\r\n        if (resultList.length >= maxResults) {\r\n            break;\r\n        }\r\n    }\r\n    callback(null, {\r\n        server: resultList,\r\n        end: i >= servers.length,\r\n    });\r\n}\r\nfunction GetSubchannel(call, callback) {\r\n    const subchannelId = Number.parseInt(call.request.subchannel_id);\r\n    const subchannelEntry = subchannels[subchannelId];\r\n    if (subchannelEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No subchannel data found for id ' + subchannelId,\r\n        });\r\n        return;\r\n    }\r\n    const resolvedInfo = subchannelEntry.getInfo();\r\n    const subchannelMessage = {\r\n        ref: subchannelRefToMessage(subchannelEntry.ref),\r\n        data: {\r\n            target: resolvedInfo.target,\r\n            state: connectivityStateToMessage(resolvedInfo.state),\r\n            calls_started: resolvedInfo.callTracker.callsStarted,\r\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\r\n            calls_failed: resolvedInfo.callTracker.callsFailed,\r\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\r\n            trace: resolvedInfo.trace.getTraceMessage(),\r\n        },\r\n        socket_ref: resolvedInfo.children.sockets.map(ref => socketRefToMessage(ref)),\r\n    };\r\n    callback(null, { subchannel: subchannelMessage });\r\n}\r\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\r\n    var _a;\r\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {\r\n        return {\r\n            address: 'tcpip_address',\r\n            tcpip_address: {\r\n                ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\r\n                port: subchannelAddress.port,\r\n            },\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            address: 'uds_address',\r\n            uds_address: {\r\n                filename: subchannelAddress.path,\r\n            },\r\n        };\r\n    }\r\n}\r\nfunction GetSocket(call, callback) {\r\n    var _a, _b, _c, _d, _e;\r\n    const socketId = Number.parseInt(call.request.socket_id);\r\n    const socketEntry = sockets[socketId];\r\n    if (socketEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No socket data found for id ' + socketId,\r\n        });\r\n        return;\r\n    }\r\n    const resolvedInfo = socketEntry.getInfo();\r\n    const securityMessage = resolvedInfo.security\r\n        ? {\r\n            model: 'tls',\r\n            tls: {\r\n                cipher_suite: resolvedInfo.security.cipherSuiteStandardName\r\n                    ? 'standard_name'\r\n                    : 'other_name',\r\n                standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\r\n                other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\r\n                local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\r\n                remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined,\r\n            },\r\n        }\r\n        : null;\r\n    const socketMessage = {\r\n        ref: socketRefToMessage(socketEntry.ref),\r\n        local: resolvedInfo.localAddress\r\n            ? subchannelAddressToAddressMessage(resolvedInfo.localAddress)\r\n            : null,\r\n        remote: resolvedInfo.remoteAddress\r\n            ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress)\r\n            : null,\r\n        remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\r\n        security: securityMessage,\r\n        data: {\r\n            keep_alives_sent: resolvedInfo.keepAlivesSent,\r\n            streams_started: resolvedInfo.streamsStarted,\r\n            streams_succeeded: resolvedInfo.streamsSucceeded,\r\n            streams_failed: resolvedInfo.streamsFailed,\r\n            last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\r\n            last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\r\n            messages_received: resolvedInfo.messagesReceived,\r\n            messages_sent: resolvedInfo.messagesSent,\r\n            last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\r\n            last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\r\n            local_flow_control_window: resolvedInfo.localFlowControlWindow\r\n                ? { value: resolvedInfo.localFlowControlWindow }\r\n                : null,\r\n            remote_flow_control_window: resolvedInfo.remoteFlowControlWindow\r\n                ? { value: resolvedInfo.remoteFlowControlWindow }\r\n                : null,\r\n        },\r\n    };\r\n    callback(null, { socket: socketMessage });\r\n}\r\nfunction GetServerSockets(call, callback) {\r\n    const serverId = Number.parseInt(call.request.server_id);\r\n    const serverEntry = servers[serverId];\r\n    if (serverEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No server data found for id ' + serverId,\r\n        });\r\n        return;\r\n    }\r\n    const startId = Number.parseInt(call.request.start_socket_id);\r\n    const maxResults = Number.parseInt(call.request.max_results);\r\n    const resolvedInfo = serverEntry.getInfo();\r\n    // If we wanted to include listener sockets in the result, this line would\r\n    // instead say\r\n    // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\r\n    const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2) => ref1.id - ref2.id);\r\n    const resultList = [];\r\n    let i = 0;\r\n    for (; i < allSockets.length; i++) {\r\n        if (allSockets[i].id >= startId) {\r\n            resultList.push(socketRefToMessage(allSockets[i]));\r\n            if (resultList.length >= maxResults) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    callback(null, {\r\n        socket_ref: resultList,\r\n        end: i >= allSockets.length,\r\n    });\r\n}\r\nfunction getChannelzHandlers() {\r\n    return {\r\n        GetChannel,\r\n        GetTopChannels,\r\n        GetServer,\r\n        GetServers,\r\n        GetSubchannel,\r\n        GetSocket,\r\n        GetServerSockets,\r\n    };\r\n}\r\nexports.getChannelzHandlers = getChannelzHandlers;\r\nlet loadedChannelzDefinition = null;\r\nfunction getChannelzServiceDefinition() {\r\n    if (loadedChannelzDefinition) {\r\n        return loadedChannelzDefinition;\r\n    }\r\n    /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\r\n     * runtime for users who will not use/enable channelz. */\r\n    const loaderLoadSync = (__webpack_require__(/*! @grpc/proto-loader */ \"(ssr)/./node_modules/@grpc/proto-loader/build/src/index.js\").loadSync);\r\n    const loadedProto = loaderLoadSync('channelz.proto', {\r\n        keepCase: true,\r\n        longs: String,\r\n        enums: String,\r\n        defaults: true,\r\n        oneofs: true,\r\n        includeDirs: [`${__dirname}/../../proto`],\r\n    });\r\n    const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);\r\n    loadedChannelzDefinition =\r\n        channelzGrpcObject.grpc.channelz.v1.Channelz.service;\r\n    return loadedChannelzDefinition;\r\n}\r\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\r\nfunction setup() {\r\n    (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);\r\n}\r\nexports.setup = setup;\r\n//# sourceMappingURL=channelz.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client-interceptors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getInterceptingCall = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.InterceptorConfigurationError = void 0;\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst call_interface_1 = __webpack_require__(/*! ./call-interface */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-interface.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/error.js\");\r\n/**\r\n * Error class associated with passing both interceptors and interceptor\r\n * providers to a client constructor or as call options.\r\n */\r\nclass InterceptorConfigurationError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = 'InterceptorConfigurationError';\r\n        Error.captureStackTrace(this, InterceptorConfigurationError);\r\n    }\r\n}\r\nexports.InterceptorConfigurationError = InterceptorConfigurationError;\r\nclass ListenerBuilder {\r\n    constructor() {\r\n        this.metadata = undefined;\r\n        this.message = undefined;\r\n        this.status = undefined;\r\n    }\r\n    withOnReceiveMetadata(onReceiveMetadata) {\r\n        this.metadata = onReceiveMetadata;\r\n        return this;\r\n    }\r\n    withOnReceiveMessage(onReceiveMessage) {\r\n        this.message = onReceiveMessage;\r\n        return this;\r\n    }\r\n    withOnReceiveStatus(onReceiveStatus) {\r\n        this.status = onReceiveStatus;\r\n        return this;\r\n    }\r\n    build() {\r\n        return {\r\n            onReceiveMetadata: this.metadata,\r\n            onReceiveMessage: this.message,\r\n            onReceiveStatus: this.status,\r\n        };\r\n    }\r\n}\r\nexports.ListenerBuilder = ListenerBuilder;\r\nclass RequesterBuilder {\r\n    constructor() {\r\n        this.start = undefined;\r\n        this.message = undefined;\r\n        this.halfClose = undefined;\r\n        this.cancel = undefined;\r\n    }\r\n    withStart(start) {\r\n        this.start = start;\r\n        return this;\r\n    }\r\n    withSendMessage(sendMessage) {\r\n        this.message = sendMessage;\r\n        return this;\r\n    }\r\n    withHalfClose(halfClose) {\r\n        this.halfClose = halfClose;\r\n        return this;\r\n    }\r\n    withCancel(cancel) {\r\n        this.cancel = cancel;\r\n        return this;\r\n    }\r\n    build() {\r\n        return {\r\n            start: this.start,\r\n            sendMessage: this.message,\r\n            halfClose: this.halfClose,\r\n            cancel: this.cancel,\r\n        };\r\n    }\r\n}\r\nexports.RequesterBuilder = RequesterBuilder;\r\n/**\r\n * A Listener with a default pass-through implementation of each method. Used\r\n * for filling out Listeners with some methods omitted.\r\n */\r\nconst defaultListener = {\r\n    onReceiveMetadata: (metadata, next) => {\r\n        next(metadata);\r\n    },\r\n    onReceiveMessage: (message, next) => {\r\n        next(message);\r\n    },\r\n    onReceiveStatus: (status, next) => {\r\n        next(status);\r\n    },\r\n};\r\n/**\r\n * A Requester with a default pass-through implementation of each method. Used\r\n * for filling out Requesters with some methods omitted.\r\n */\r\nconst defaultRequester = {\r\n    start: (metadata, listener, next) => {\r\n        next(metadata, listener);\r\n    },\r\n    sendMessage: (message, next) => {\r\n        next(message);\r\n    },\r\n    halfClose: next => {\r\n        next();\r\n    },\r\n    cancel: next => {\r\n        next();\r\n    },\r\n};\r\nclass InterceptingCall {\r\n    constructor(nextCall, requester) {\r\n        var _a, _b, _c, _d;\r\n        this.nextCall = nextCall;\r\n        /**\r\n         * Indicates that metadata has been passed to the requester's start\r\n         * method but it has not been passed to the corresponding next callback\r\n         */\r\n        this.processingMetadata = false;\r\n        /**\r\n         * Message context for a pending message that is waiting for\r\n         */\r\n        this.pendingMessageContext = null;\r\n        /**\r\n         * Indicates that a message has been passed to the requester's sendMessage\r\n         * method but it has not been passed to the corresponding next callback\r\n         */\r\n        this.processingMessage = false;\r\n        /**\r\n         * Indicates that a status was received but could not be propagated because\r\n         * a message was still being processed.\r\n         */\r\n        this.pendingHalfClose = false;\r\n        if (requester) {\r\n            this.requester = {\r\n                start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,\r\n                sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,\r\n                halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,\r\n                cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel,\r\n            };\r\n        }\r\n        else {\r\n            this.requester = defaultRequester;\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.requester.cancel(() => {\r\n            this.nextCall.cancelWithStatus(status, details);\r\n        });\r\n    }\r\n    getPeer() {\r\n        return this.nextCall.getPeer();\r\n    }\r\n    processPendingMessage() {\r\n        if (this.pendingMessageContext) {\r\n            this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);\r\n            this.pendingMessageContext = null;\r\n            this.pendingMessage = null;\r\n        }\r\n    }\r\n    processPendingHalfClose() {\r\n        if (this.pendingHalfClose) {\r\n            this.nextCall.halfClose();\r\n        }\r\n    }\r\n    start(metadata, interceptingListener) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const fullInterceptingListener = {\r\n            onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata => { }),\r\n            onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message => { }),\r\n            onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status => { }),\r\n        };\r\n        this.processingMetadata = true;\r\n        this.requester.start(metadata, fullInterceptingListener, (md, listener) => {\r\n            var _a, _b, _c;\r\n            this.processingMetadata = false;\r\n            let finalInterceptingListener;\r\n            if ((0, call_interface_1.isInterceptingListener)(listener)) {\r\n                finalInterceptingListener = listener;\r\n            }\r\n            else {\r\n                const fullListener = {\r\n                    onReceiveMetadata: (_a = listener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultListener.onReceiveMetadata,\r\n                    onReceiveMessage: (_b = listener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultListener.onReceiveMessage,\r\n                    onReceiveStatus: (_c = listener.onReceiveStatus) !== null && _c !== void 0 ? _c : defaultListener.onReceiveStatus,\r\n                };\r\n                finalInterceptingListener = new call_interface_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);\r\n            }\r\n            this.nextCall.start(md, finalInterceptingListener);\r\n            this.processPendingMessage();\r\n            this.processPendingHalfClose();\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessageWithContext(context, message) {\r\n        this.processingMessage = true;\r\n        this.requester.sendMessage(message, finalMessage => {\r\n            this.processingMessage = false;\r\n            if (this.processingMetadata) {\r\n                this.pendingMessageContext = context;\r\n                this.pendingMessage = message;\r\n            }\r\n            else {\r\n                this.nextCall.sendMessageWithContext(context, finalMessage);\r\n                this.processPendingHalfClose();\r\n            }\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessage(message) {\r\n        this.sendMessageWithContext({}, message);\r\n    }\r\n    startRead() {\r\n        this.nextCall.startRead();\r\n    }\r\n    halfClose() {\r\n        this.requester.halfClose(() => {\r\n            if (this.processingMetadata || this.processingMessage) {\r\n                this.pendingHalfClose = true;\r\n            }\r\n            else {\r\n                this.nextCall.halfClose();\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.InterceptingCall = InterceptingCall;\r\nfunction getCall(channel, path, options) {\r\n    var _a, _b;\r\n    const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;\r\n    const host = options.host;\r\n    const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;\r\n    const propagateFlags = options.propagate_flags;\r\n    const credentials = options.credentials;\r\n    const call = channel.createCall(path, deadline, host, parent, propagateFlags);\r\n    if (credentials) {\r\n        call.setCredentials(credentials);\r\n    }\r\n    return call;\r\n}\r\n/**\r\n * InterceptingCall implementation that directly owns the underlying Call\r\n * object and handles serialization and deseraizliation.\r\n */\r\nclass BaseInterceptingCall {\r\n    constructor(call, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    methodDefinition) {\r\n        this.call = call;\r\n        this.methodDefinition = methodDefinition;\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.call.cancelWithStatus(status, details);\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessageWithContext(context, message) {\r\n        let serialized;\r\n        try {\r\n            serialized = this.methodDefinition.requestSerialize(message);\r\n        }\r\n        catch (e) {\r\n            this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${(0, error_1.getErrorMessage)(e)}`);\r\n            return;\r\n        }\r\n        this.call.sendMessageWithContext(context, serialized);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessage(message) {\r\n        this.sendMessageWithContext({}, message);\r\n    }\r\n    start(metadata, interceptingListener) {\r\n        let readError = null;\r\n        this.call.start(metadata, {\r\n            onReceiveMetadata: metadata => {\r\n                var _a;\r\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata);\r\n            },\r\n            onReceiveMessage: message => {\r\n                var _a;\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                let deserialized;\r\n                try {\r\n                    deserialized = this.methodDefinition.responseDeserialize(message);\r\n                }\r\n                catch (e) {\r\n                    readError = {\r\n                        code: constants_1.Status.INTERNAL,\r\n                        details: `Response message parsing error: ${(0, error_1.getErrorMessage)(e)}`,\r\n                        metadata: new metadata_1.Metadata(),\r\n                    };\r\n                    this.call.cancelWithStatus(readError.code, readError.details);\r\n                    return;\r\n                }\r\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);\r\n            },\r\n            onReceiveStatus: status => {\r\n                var _a, _b;\r\n                if (readError) {\r\n                    (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);\r\n                }\r\n                else {\r\n                    (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    startRead() {\r\n        this.call.startRead();\r\n    }\r\n    halfClose() {\r\n        this.call.halfClose();\r\n    }\r\n}\r\n/**\r\n * BaseInterceptingCall with special-cased behavior for methods with unary\r\n * responses.\r\n */\r\nclass BaseUnaryInterceptingCall extends BaseInterceptingCall {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    constructor(call, methodDefinition) {\r\n        super(call, methodDefinition);\r\n    }\r\n    start(metadata, listener) {\r\n        var _a, _b;\r\n        let receivedMessage = false;\r\n        const wrapperListener = {\r\n            onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata => { }),\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage: (message) => {\r\n                var _a;\r\n                receivedMessage = true;\r\n                (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, message);\r\n            },\r\n            onReceiveStatus: (status) => {\r\n                var _a, _b;\r\n                if (!receivedMessage) {\r\n                    (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, null);\r\n                }\r\n                (_b = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(listener, status);\r\n            },\r\n        };\r\n        super.start(metadata, wrapperListener);\r\n        this.call.startRead();\r\n    }\r\n}\r\n/**\r\n * BaseInterceptingCall with special-cased behavior for methods with streaming\r\n * responses.\r\n */\r\nclass BaseStreamingInterceptingCall extends BaseInterceptingCall {\r\n}\r\nfunction getBottomInterceptingCall(channel, options, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nmethodDefinition) {\r\n    const call = getCall(channel, methodDefinition.path, options);\r\n    if (methodDefinition.responseStream) {\r\n        return new BaseStreamingInterceptingCall(call, methodDefinition);\r\n    }\r\n    else {\r\n        return new BaseUnaryInterceptingCall(call, methodDefinition);\r\n    }\r\n}\r\nfunction getInterceptingCall(interceptorArgs, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nmethodDefinition, options, channel) {\r\n    if (interceptorArgs.clientInterceptors.length > 0 &&\r\n        interceptorArgs.clientInterceptorProviders.length > 0) {\r\n        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as options ' +\r\n            'to the client constructor. Only one of these is allowed.');\r\n    }\r\n    if (interceptorArgs.callInterceptors.length > 0 &&\r\n        interceptorArgs.callInterceptorProviders.length > 0) {\r\n        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as call ' +\r\n            'options. Only one of these is allowed.');\r\n    }\r\n    let interceptors = [];\r\n    // Interceptors passed to the call override interceptors passed to the client constructor\r\n    if (interceptorArgs.callInterceptors.length > 0 ||\r\n        interceptorArgs.callInterceptorProviders.length > 0) {\r\n        interceptors = []\r\n            .concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map(provider => provider(methodDefinition)))\r\n            .filter(interceptor => interceptor);\r\n        // Filter out falsy values when providers return nothing\r\n    }\r\n    else {\r\n        interceptors = []\r\n            .concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map(provider => provider(methodDefinition)))\r\n            .filter(interceptor => interceptor);\r\n        // Filter out falsy values when providers return nothing\r\n    }\r\n    const interceptorOptions = Object.assign({}, options, {\r\n        method_definition: methodDefinition,\r\n    });\r\n    /* For each interceptor in the list, the nextCall function passed to it is\r\n     * based on the next interceptor in the list, using a nextCall function\r\n     * constructed with the following interceptor in the list, and so on. The\r\n     * initialValue, which is effectively at the end of the list, is a nextCall\r\n     * function that invokes getBottomInterceptingCall, the result of which\r\n     * handles (de)serialization and also gets the underlying call from the\r\n     * channel. */\r\n    const getCall = interceptors.reduceRight((nextCall, nextInterceptor) => {\r\n        return currentOptions => nextInterceptor(currentOptions, nextCall);\r\n    }, (finalOptions) => getBottomInterceptingCall(channel, finalOptions, methodDefinition));\r\n    return getCall(interceptorOptions);\r\n}\r\nexports.getInterceptingCall = getInterceptingCall;\r\n//# sourceMappingURL=client-interceptors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Client = void 0;\r\nconst call_1 = __webpack_require__(/*! ./call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call.js\");\r\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\r\nconst CHANNEL_SYMBOL = Symbol();\r\nconst INTERCEPTOR_SYMBOL = Symbol();\r\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\r\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\r\nfunction isFunction(arg) {\r\n    return typeof arg === 'function';\r\n}\r\nfunction getErrorStackString(error) {\r\n    return error.stack.split('\\n').slice(1).join('\\n');\r\n}\r\n/**\r\n * A generic gRPC client. Primarily useful as a base class for all generated\r\n * clients.\r\n */\r\nclass Client {\r\n    constructor(address, credentials, options = {}) {\r\n        var _a, _b;\r\n        options = Object.assign({}, options);\r\n        this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\r\n        delete options.interceptors;\r\n        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\r\n        delete options.interceptor_providers;\r\n        if (this[INTERCEPTOR_SYMBOL].length > 0 &&\r\n            this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\r\n            throw new Error('Both interceptors and interceptor_providers were passed as options ' +\r\n                'to the client constructor. Only one of these is allowed.');\r\n        }\r\n        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] =\r\n            options.callInvocationTransformer;\r\n        delete options.callInvocationTransformer;\r\n        if (options.channelOverride) {\r\n            this[CHANNEL_SYMBOL] = options.channelOverride;\r\n        }\r\n        else if (options.channelFactoryOverride) {\r\n            const channelFactoryOverride = options.channelFactoryOverride;\r\n            delete options.channelFactoryOverride;\r\n            this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\r\n        }\r\n        else {\r\n            this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\r\n        }\r\n    }\r\n    close() {\r\n        this[CHANNEL_SYMBOL].close();\r\n    }\r\n    getChannel() {\r\n        return this[CHANNEL_SYMBOL];\r\n    }\r\n    waitForReady(deadline, callback) {\r\n        const checkState = (err) => {\r\n            if (err) {\r\n                callback(new Error('Failed to connect before the deadline'));\r\n                return;\r\n            }\r\n            let newState;\r\n            try {\r\n                newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\r\n            }\r\n            catch (e) {\r\n                callback(new Error('The channel has been closed'));\r\n                return;\r\n            }\r\n            if (newState === connectivity_state_1.ConnectivityState.READY) {\r\n                callback();\r\n            }\r\n            else {\r\n                try {\r\n                    this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\r\n                }\r\n                catch (e) {\r\n                    callback(new Error('The channel has been closed'));\r\n                }\r\n            }\r\n        };\r\n        setImmediate(checkState);\r\n    }\r\n    checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\r\n        if (isFunction(arg1)) {\r\n            return { metadata: new metadata_1.Metadata(), options: {}, callback: arg1 };\r\n        }\r\n        else if (isFunction(arg2)) {\r\n            if (arg1 instanceof metadata_1.Metadata) {\r\n                return { metadata: arg1, options: {}, callback: arg2 };\r\n            }\r\n            else {\r\n                return { metadata: new metadata_1.Metadata(), options: arg1, callback: arg2 };\r\n            }\r\n        }\r\n        else {\r\n            if (!(arg1 instanceof metadata_1.Metadata &&\r\n                arg2 instanceof Object &&\r\n                isFunction(arg3))) {\r\n                throw new Error('Incorrect arguments passed');\r\n            }\r\n            return { metadata: arg1, options: arg2, callback: arg3 };\r\n        }\r\n    }\r\n    makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: false,\r\n            responseStream: false,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            argument: argument,\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientUnaryCallImpl(),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n            callback: checkedArguments.callback,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const emitter = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        emitter.call = call;\r\n        let responseMessage = null;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata: metadata => {\r\n                emitter.emit('metadata', metadata);\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage(message) {\r\n                if (responseMessage !== null) {\r\n                    call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\r\n                }\r\n                responseMessage = message;\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                if (status.code === constants_1.Status.OK) {\r\n                    if (responseMessage === null) {\r\n                        const callerStack = getErrorStackString(callerStackError);\r\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\r\n                            code: constants_1.Status.INTERNAL,\r\n                            details: 'No message received',\r\n                            metadata: status.metadata,\r\n                        }, callerStack));\r\n                    }\r\n                    else {\r\n                        callProperties.callback(null, responseMessage);\r\n                    }\r\n                }\r\n                else {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                emitter.emit('status', status);\r\n            },\r\n        });\r\n        call.sendMessage(argument);\r\n        call.halfClose();\r\n        return emitter;\r\n    }\r\n    makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: true,\r\n            responseStream: false,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientWritableStreamImpl(serialize),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n            callback: checkedArguments.callback,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const emitter = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        emitter.call = call;\r\n        let responseMessage = null;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata: metadata => {\r\n                emitter.emit('metadata', metadata);\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage(message) {\r\n                if (responseMessage !== null) {\r\n                    call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\r\n                }\r\n                responseMessage = message;\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                if (status.code === constants_1.Status.OK) {\r\n                    if (responseMessage === null) {\r\n                        const callerStack = getErrorStackString(callerStackError);\r\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\r\n                            code: constants_1.Status.INTERNAL,\r\n                            details: 'No message received',\r\n                            metadata: status.metadata,\r\n                        }, callerStack));\r\n                    }\r\n                    else {\r\n                        callProperties.callback(null, responseMessage);\r\n                    }\r\n                }\r\n                else {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                emitter.emit('status', status);\r\n            },\r\n        });\r\n        return emitter;\r\n    }\r\n    checkMetadataAndOptions(arg1, arg2) {\r\n        let metadata;\r\n        let options;\r\n        if (arg1 instanceof metadata_1.Metadata) {\r\n            metadata = arg1;\r\n            if (arg2) {\r\n                options = arg2;\r\n            }\r\n            else {\r\n                options = {};\r\n            }\r\n        }\r\n        else {\r\n            if (arg1) {\r\n                options = arg1;\r\n            }\r\n            else {\r\n                options = {};\r\n            }\r\n            metadata = new metadata_1.Metadata();\r\n        }\r\n        return { metadata, options };\r\n    }\r\n    makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: false,\r\n            responseStream: true,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            argument: argument,\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientReadableStreamImpl(deserialize),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const stream = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        stream.call = call;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata(metadata) {\r\n                stream.emit('metadata', metadata);\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage(message) {\r\n                stream.push(message);\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                stream.push(null);\r\n                if (status.code !== constants_1.Status.OK) {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                stream.emit('status', status);\r\n            },\r\n        });\r\n        call.sendMessage(argument);\r\n        call.halfClose();\r\n        return stream;\r\n    }\r\n    makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: true,\r\n            responseStream: true,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const stream = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        stream.call = call;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata(metadata) {\r\n                stream.emit('metadata', metadata);\r\n            },\r\n            onReceiveMessage(message) {\r\n                stream.push(message);\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                stream.push(null);\r\n                if (status.code !== constants_1.Status.OK) {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                stream.emit('status', status);\r\n            },\r\n        });\r\n        return stream;\r\n    }\r\n}\r\nexports.Client = Client;\r\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CompressionAlgorithms = void 0;\r\nvar CompressionAlgorithms;\r\n(function (CompressionAlgorithms) {\r\n    CompressionAlgorithms[CompressionAlgorithms[\"identity\"] = 0] = \"identity\";\r\n    CompressionAlgorithms[CompressionAlgorithms[\"deflate\"] = 1] = \"deflate\";\r\n    CompressionAlgorithms[CompressionAlgorithms[\"gzip\"] = 2] = \"gzip\";\r\n})(CompressionAlgorithms || (exports.CompressionAlgorithms = CompressionAlgorithms = {}));\r\n//# sourceMappingURL=compression-algorithms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29tcHJlc3Npb24tYWxnb3JpdGhtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEIsNkJBQTZCLDZCQUE2QjtBQUN2RiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbXByZXNzaW9uLWFsZ29yaXRobXMuanM/MDNjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Db21wcmVzc2lvbkFsZ29yaXRobXMgPSB2b2lkIDA7XHJcbnZhciBDb21wcmVzc2lvbkFsZ29yaXRobXM7XHJcbihmdW5jdGlvbiAoQ29tcHJlc3Npb25BbGdvcml0aG1zKSB7XHJcbiAgICBDb21wcmVzc2lvbkFsZ29yaXRobXNbQ29tcHJlc3Npb25BbGdvcml0aG1zW1wiaWRlbnRpdHlcIl0gPSAwXSA9IFwiaWRlbnRpdHlcIjtcclxuICAgIENvbXByZXNzaW9uQWxnb3JpdGhtc1tDb21wcmVzc2lvbkFsZ29yaXRobXNbXCJkZWZsYXRlXCJdID0gMV0gPSBcImRlZmxhdGVcIjtcclxuICAgIENvbXByZXNzaW9uQWxnb3JpdGhtc1tDb21wcmVzc2lvbkFsZ29yaXRobXNbXCJnemlwXCJdID0gMl0gPSBcImd6aXBcIjtcclxufSkoQ29tcHJlc3Npb25BbGdvcml0aG1zIHx8IChleHBvcnRzLkNvbXByZXNzaW9uQWxnb3JpdGhtcyA9IENvbXByZXNzaW9uQWxnb3JpdGhtcyA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXByZXNzaW9uLWFsZ29yaXRobXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-filter.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\r\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst isCompressionAlgorithmKey = (key) => {\r\n    return (typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string');\r\n};\r\nclass CompressionHandler {\r\n    /**\r\n     * @param message Raw uncompressed message bytes\r\n     * @param compress Indicates whether the message should be compressed\r\n     * @return Framed message, compressed if applicable\r\n     */\r\n    async writeMessage(message, compress) {\r\n        let messageBuffer = message;\r\n        if (compress) {\r\n            messageBuffer = await this.compressMessage(messageBuffer);\r\n        }\r\n        const output = Buffer.allocUnsafe(messageBuffer.length + 5);\r\n        output.writeUInt8(compress ? 1 : 0, 0);\r\n        output.writeUInt32BE(messageBuffer.length, 1);\r\n        messageBuffer.copy(output, 5);\r\n        return output;\r\n    }\r\n    /**\r\n     * @param data Framed message, possibly compressed\r\n     * @return Uncompressed message\r\n     */\r\n    async readMessage(data) {\r\n        const compressed = data.readUInt8(0) === 1;\r\n        let messageBuffer = data.slice(5);\r\n        if (compressed) {\r\n            messageBuffer = await this.decompressMessage(messageBuffer);\r\n        }\r\n        return messageBuffer;\r\n    }\r\n}\r\nclass IdentityHandler extends CompressionHandler {\r\n    async compressMessage(message) {\r\n        return message;\r\n    }\r\n    async writeMessage(message, compress) {\r\n        const output = Buffer.allocUnsafe(message.length + 5);\r\n        /* With \"identity\" compression, messages should always be marked as\r\n         * uncompressed */\r\n        output.writeUInt8(0, 0);\r\n        output.writeUInt32BE(message.length, 1);\r\n        message.copy(output, 5);\r\n        return output;\r\n    }\r\n    decompressMessage(message) {\r\n        return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\r\n    }\r\n}\r\nclass DeflateHandler extends CompressionHandler {\r\n    constructor(maxRecvMessageLength) {\r\n        super();\r\n        this.maxRecvMessageLength = maxRecvMessageLength;\r\n    }\r\n    compressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            zlib.deflate(message, (err, output) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(output);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    decompressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            let totalLength = 0;\r\n            const messageParts = [];\r\n            const decompresser = zlib.createInflate();\r\n            decompresser.on('data', (chunk) => {\r\n                messageParts.push(chunk);\r\n                totalLength += chunk.byteLength;\r\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\r\n                    decompresser.destroy();\r\n                    reject({\r\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\r\n                    });\r\n                }\r\n            });\r\n            decompresser.on('end', () => {\r\n                resolve(Buffer.concat(messageParts));\r\n            });\r\n            decompresser.write(message);\r\n            decompresser.end();\r\n        });\r\n    }\r\n}\r\nclass GzipHandler extends CompressionHandler {\r\n    constructor(maxRecvMessageLength) {\r\n        super();\r\n        this.maxRecvMessageLength = maxRecvMessageLength;\r\n    }\r\n    compressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            zlib.gzip(message, (err, output) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(output);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    decompressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            let totalLength = 0;\r\n            const messageParts = [];\r\n            const decompresser = zlib.createGunzip();\r\n            decompresser.on('data', (chunk) => {\r\n                messageParts.push(chunk);\r\n                totalLength += chunk.byteLength;\r\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\r\n                    decompresser.destroy();\r\n                    reject({\r\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\r\n                    });\r\n                }\r\n            });\r\n            decompresser.on('end', () => {\r\n                resolve(Buffer.concat(messageParts));\r\n            });\r\n            decompresser.write(message);\r\n            decompresser.end();\r\n        });\r\n    }\r\n}\r\nclass UnknownHandler extends CompressionHandler {\r\n    constructor(compressionName) {\r\n        super();\r\n        this.compressionName = compressionName;\r\n    }\r\n    compressMessage(message) {\r\n        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\r\n    }\r\n    decompressMessage(message) {\r\n        // This should be unreachable\r\n        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\r\n    }\r\n}\r\nfunction getCompressionHandler(compressionName, maxReceiveMessageSize) {\r\n    switch (compressionName) {\r\n        case 'identity':\r\n            return new IdentityHandler();\r\n        case 'deflate':\r\n            return new DeflateHandler(maxReceiveMessageSize);\r\n        case 'gzip':\r\n            return new GzipHandler(maxReceiveMessageSize);\r\n        default:\r\n            return new UnknownHandler(compressionName);\r\n    }\r\n}\r\nclass CompressionFilter extends filter_1.BaseFilter {\r\n    constructor(channelOptions, sharedFilterConfig) {\r\n        var _a, _b;\r\n        super();\r\n        this.sharedFilterConfig = sharedFilterConfig;\r\n        this.sendCompression = new IdentityHandler();\r\n        this.receiveCompression = new IdentityHandler();\r\n        this.currentCompressionAlgorithm = 'identity';\r\n        const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\r\n        this.maxReceiveMessageLength = (_a = channelOptions['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\r\n        if (compressionAlgorithmKey !== undefined) {\r\n            if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\r\n                const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\r\n                const serverSupportedEncodings = (_b = sharedFilterConfig.serverSupportedEncodingHeader) === null || _b === void 0 ? void 0 : _b.split(',');\r\n                /**\r\n                 * There are two possible situations here:\r\n                 * 1) We don't have any info yet from the server about what compression it supports\r\n                 *    In that case we should just use what the client tells us to use\r\n                 * 2) We've previously received a response from the server including a grpc-accept-encoding header\r\n                 *    In that case we only want to use the encoding chosen by the client if the server supports it\r\n                 */\r\n                if (!serverSupportedEncodings ||\r\n                    serverSupportedEncodings.includes(clientSelectedEncoding)) {\r\n                    this.currentCompressionAlgorithm = clientSelectedEncoding;\r\n                    this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm, -1);\r\n                }\r\n            }\r\n            else {\r\n                logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\r\n            }\r\n        }\r\n    }\r\n    async sendMetadata(metadata) {\r\n        const headers = await metadata;\r\n        headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\r\n        headers.set('accept-encoding', 'identity');\r\n        // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\r\n        if (this.currentCompressionAlgorithm === 'identity') {\r\n            headers.remove('grpc-encoding');\r\n        }\r\n        else {\r\n            headers.set('grpc-encoding', this.currentCompressionAlgorithm);\r\n        }\r\n        return headers;\r\n    }\r\n    receiveMetadata(metadata) {\r\n        const receiveEncoding = metadata.get('grpc-encoding');\r\n        if (receiveEncoding.length > 0) {\r\n            const encoding = receiveEncoding[0];\r\n            if (typeof encoding === 'string') {\r\n                this.receiveCompression = getCompressionHandler(encoding, this.maxReceiveMessageLength);\r\n            }\r\n        }\r\n        metadata.remove('grpc-encoding');\r\n        /* Check to see if the compression we're using to send messages is supported by the server\r\n         * If not, reset the sendCompression filter and have it use the default IdentityHandler */\r\n        const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];\r\n        if (serverSupportedEncodingsHeader) {\r\n            this.sharedFilterConfig.serverSupportedEncodingHeader =\r\n                serverSupportedEncodingsHeader;\r\n            const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\r\n            if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\r\n                this.sendCompression = new IdentityHandler();\r\n                this.currentCompressionAlgorithm = 'identity';\r\n            }\r\n        }\r\n        metadata.remove('grpc-accept-encoding');\r\n        return metadata;\r\n    }\r\n    async sendMessage(message) {\r\n        var _a;\r\n        /* This filter is special. The input message is the bare message bytes,\r\n         * and the output is a framed and possibly compressed message. For this\r\n         * reason, this filter should be at the bottom of the filter stack */\r\n        const resolvedMessage = await message;\r\n        let compress;\r\n        if (this.sendCompression instanceof IdentityHandler) {\r\n            compress = false;\r\n        }\r\n        else {\r\n            compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */) === 0;\r\n        }\r\n        return {\r\n            message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\r\n            flags: resolvedMessage.flags,\r\n        };\r\n    }\r\n    async receiveMessage(message) {\r\n        /* This filter is also special. The input message is framed and possibly\r\n         * compressed, and the output message is deframed and uncompressed. So\r\n         * this is another reason that this filter should be at the bottom of the\r\n         * filter stack. */\r\n        return this.receiveCompression.readMessage(await message);\r\n    }\r\n}\r\nexports.CompressionFilter = CompressionFilter;\r\nclass CompressionFilterFactory {\r\n    constructor(channel, options) {\r\n        this.options = options;\r\n        this.sharedFilterConfig = {};\r\n    }\r\n    createFilter() {\r\n        return new CompressionFilter(this.options, this.sharedFilterConfig);\r\n    }\r\n}\r\nexports.CompressionFilterFactory = CompressionFilterFactory;\r\n//# sourceMappingURL=compression-filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/connectivity-state.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ConnectivityState = void 0;\r\nvar ConnectivityState;\r\n(function (ConnectivityState) {\r\n    ConnectivityState[ConnectivityState[\"IDLE\"] = 0] = \"IDLE\";\r\n    ConnectivityState[ConnectivityState[\"CONNECTING\"] = 1] = \"CONNECTING\";\r\n    ConnectivityState[ConnectivityState[\"READY\"] = 2] = \"READY\";\r\n    ConnectivityState[ConnectivityState[\"TRANSIENT_FAILURE\"] = 3] = \"TRANSIENT_FAILURE\";\r\n    ConnectivityState[ConnectivityState[\"SHUTDOWN\"] = 4] = \"SHUTDOWN\";\r\n})(ConnectivityState || (exports.ConnectivityState = ConnectivityState = {}));\r\n//# sourceMappingURL=connectivity-state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29ubmVjdGl2aXR5LXN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3QkFBd0IseUJBQXlCLHlCQUF5QjtBQUMzRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2Nvbm5lY3Rpdml0eS1zdGF0ZS5qcz82M2QxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAyMSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkNvbm5lY3Rpdml0eVN0YXRlID0gdm9pZCAwO1xyXG52YXIgQ29ubmVjdGl2aXR5U3RhdGU7XHJcbihmdW5jdGlvbiAoQ29ubmVjdGl2aXR5U3RhdGUpIHtcclxuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiSURMRVwiXSA9IDBdID0gXCJJRExFXCI7XHJcbiAgICBDb25uZWN0aXZpdHlTdGF0ZVtDb25uZWN0aXZpdHlTdGF0ZVtcIkNPTk5FQ1RJTkdcIl0gPSAxXSA9IFwiQ09OTkVDVElOR1wiO1xyXG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJSRUFEWVwiXSA9IDJdID0gXCJSRUFEWVwiO1xyXG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJUUkFOU0lFTlRfRkFJTFVSRVwiXSA9IDNdID0gXCJUUkFOU0lFTlRfRkFJTFVSRVwiO1xyXG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJTSFVURE9XTlwiXSA9IDRdID0gXCJTSFVURE9XTlwiO1xyXG59KShDb25uZWN0aXZpdHlTdGF0ZSB8fCAoZXhwb3J0cy5Db25uZWN0aXZpdHlTdGF0ZSA9IENvbm5lY3Rpdml0eVN0YXRlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdGl2aXR5LXN0YXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/constants.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports.Propagate = exports.LogVerbosity = exports.Status = void 0;\r\nvar Status;\r\n(function (Status) {\r\n    Status[Status[\"OK\"] = 0] = \"OK\";\r\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\r\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\r\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\r\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\r\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\r\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\r\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\r\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\r\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\r\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\r\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\r\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\r\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\r\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\r\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\r\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\r\n})(Status || (exports.Status = Status = {}));\r\nvar LogVerbosity;\r\n(function (LogVerbosity) {\r\n    LogVerbosity[LogVerbosity[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogVerbosity[LogVerbosity[\"INFO\"] = 1] = \"INFO\";\r\n    LogVerbosity[LogVerbosity[\"ERROR\"] = 2] = \"ERROR\";\r\n    LogVerbosity[LogVerbosity[\"NONE\"] = 3] = \"NONE\";\r\n})(LogVerbosity || (exports.LogVerbosity = LogVerbosity = {}));\r\n/**\r\n * NOTE: This enum is not currently used in any implemented API in this\r\n * library. It is included only for type parity with the other implementation.\r\n */\r\nvar Propagate;\r\n(function (Propagate) {\r\n    Propagate[Propagate[\"DEADLINE\"] = 1] = \"DEADLINE\";\r\n    Propagate[Propagate[\"CENSUS_STATS_CONTEXT\"] = 2] = \"CENSUS_STATS_CONTEXT\";\r\n    Propagate[Propagate[\"CENSUS_TRACING_CONTEXT\"] = 4] = \"CENSUS_TRACING_CONTEXT\";\r\n    Propagate[Propagate[\"CANCELLATION\"] = 8] = \"CANCELLATION\";\r\n    // https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/propagation_bits.h#L43\r\n    Propagate[Propagate[\"DEFAULTS\"] = 65535] = \"DEFAULTS\";\r\n})(Propagate || (exports.Propagate = Propagate = {}));\r\n// -1 means unlimited\r\nexports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;\r\n// 4 MB default\r\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\r\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMENBQTBDLEdBQUcsdUNBQXVDLEdBQUcsaUJBQWlCLEdBQUcsb0JBQW9CLEdBQUcsY0FBYztBQUNoSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsYUFBYSxjQUFjLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUIsb0JBQW9CLG9CQUFvQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdCQUFnQixpQkFBaUIsaUJBQWlCO0FBQ25EO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0EsMENBQTBDO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdG9fcGgvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzP2NkNjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuREVGQVVMVF9NQVhfUkVDRUlWRV9NRVNTQUdFX0xFTkdUSCA9IGV4cG9ydHMuREVGQVVMVF9NQVhfU0VORF9NRVNTQUdFX0xFTkdUSCA9IGV4cG9ydHMuUHJvcGFnYXRlID0gZXhwb3J0cy5Mb2dWZXJib3NpdHkgPSBleHBvcnRzLlN0YXR1cyA9IHZvaWQgMDtcclxudmFyIFN0YXR1cztcclxuKGZ1bmN0aW9uIChTdGF0dXMpIHtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJPS1wiXSA9IDBdID0gXCJPS1wiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIkNBTkNFTExFRFwiXSA9IDFdID0gXCJDQU5DRUxMRURcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJVTktOT1dOXCJdID0gMl0gPSBcIlVOS05PV05cIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJJTlZBTElEX0FSR1VNRU5UXCJdID0gM10gPSBcIklOVkFMSURfQVJHVU1FTlRcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJERUFETElORV9FWENFRURFRFwiXSA9IDRdID0gXCJERUFETElORV9FWENFRURFRFwiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIk5PVF9GT1VORFwiXSA9IDVdID0gXCJOT1RfRk9VTkRcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJBTFJFQURZX0VYSVNUU1wiXSA9IDZdID0gXCJBTFJFQURZX0VYSVNUU1wiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIlBFUk1JU1NJT05fREVOSUVEXCJdID0gN10gPSBcIlBFUk1JU1NJT05fREVOSUVEXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiUkVTT1VSQ0VfRVhIQVVTVEVEXCJdID0gOF0gPSBcIlJFU09VUkNFX0VYSEFVU1RFRFwiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIkZBSUxFRF9QUkVDT05ESVRJT05cIl0gPSA5XSA9IFwiRkFJTEVEX1BSRUNPTkRJVElPTlwiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIkFCT1JURURcIl0gPSAxMF0gPSBcIkFCT1JURURcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJPVVRfT0ZfUkFOR0VcIl0gPSAxMV0gPSBcIk9VVF9PRl9SQU5HRVwiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIlVOSU1QTEVNRU5URURcIl0gPSAxMl0gPSBcIlVOSU1QTEVNRU5URURcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJJTlRFUk5BTFwiXSA9IDEzXSA9IFwiSU5URVJOQUxcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFWQUlMQUJMRVwiXSA9IDE0XSA9IFwiVU5BVkFJTEFCTEVcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJEQVRBX0xPU1NcIl0gPSAxNV0gPSBcIkRBVEFfTE9TU1wiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIlVOQVVUSEVOVElDQVRFRFwiXSA9IDE2XSA9IFwiVU5BVVRIRU5USUNBVEVEXCI7XHJcbn0pKFN0YXR1cyB8fCAoZXhwb3J0cy5TdGF0dXMgPSBTdGF0dXMgPSB7fSkpO1xyXG52YXIgTG9nVmVyYm9zaXR5O1xyXG4oZnVuY3Rpb24gKExvZ1ZlcmJvc2l0eSkge1xyXG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIkRFQlVHXCJdID0gMF0gPSBcIkRFQlVHXCI7XHJcbiAgICBMb2dWZXJib3NpdHlbTG9nVmVyYm9zaXR5W1wiSU5GT1wiXSA9IDFdID0gXCJJTkZPXCI7XHJcbiAgICBMb2dWZXJib3NpdHlbTG9nVmVyYm9zaXR5W1wiRVJST1JcIl0gPSAyXSA9IFwiRVJST1JcIjtcclxuICAgIExvZ1ZlcmJvc2l0eVtMb2dWZXJib3NpdHlbXCJOT05FXCJdID0gM10gPSBcIk5PTkVcIjtcclxufSkoTG9nVmVyYm9zaXR5IHx8IChleHBvcnRzLkxvZ1ZlcmJvc2l0eSA9IExvZ1ZlcmJvc2l0eSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBOT1RFOiBUaGlzIGVudW0gaXMgbm90IGN1cnJlbnRseSB1c2VkIGluIGFueSBpbXBsZW1lbnRlZCBBUEkgaW4gdGhpc1xyXG4gKiBsaWJyYXJ5LiBJdCBpcyBpbmNsdWRlZCBvbmx5IGZvciB0eXBlIHBhcml0eSB3aXRoIHRoZSBvdGhlciBpbXBsZW1lbnRhdGlvbi5cclxuICovXHJcbnZhciBQcm9wYWdhdGU7XHJcbihmdW5jdGlvbiAoUHJvcGFnYXRlKSB7XHJcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiREVBRExJTkVcIl0gPSAxXSA9IFwiREVBRExJTkVcIjtcclxuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJDRU5TVVNfU1RBVFNfQ09OVEVYVFwiXSA9IDJdID0gXCJDRU5TVVNfU1RBVFNfQ09OVEVYVFwiO1xyXG4gICAgUHJvcGFnYXRlW1Byb3BhZ2F0ZVtcIkNFTlNVU19UUkFDSU5HX0NPTlRFWFRcIl0gPSA0XSA9IFwiQ0VOU1VTX1RSQUNJTkdfQ09OVEVYVFwiO1xyXG4gICAgUHJvcGFnYXRlW1Byb3BhZ2F0ZVtcIkNBTkNFTExBVElPTlwiXSA9IDhdID0gXCJDQU5DRUxMQVRJT05cIjtcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9tYXN0ZXIvaW5jbHVkZS9ncnBjL2ltcGwvY29kZWdlbi9wcm9wYWdhdGlvbl9iaXRzLmgjTDQzXHJcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiREVGQVVMVFNcIl0gPSA2NTUzNV0gPSBcIkRFRkFVTFRTXCI7XHJcbn0pKFByb3BhZ2F0ZSB8fCAoZXhwb3J0cy5Qcm9wYWdhdGUgPSBQcm9wYWdhdGUgPSB7fSkpO1xyXG4vLyAtMSBtZWFucyB1bmxpbWl0ZWRcclxuZXhwb3J0cy5ERUZBVUxUX01BWF9TRU5EX01FU1NBR0VfTEVOR1RIID0gLTE7XHJcbi8vIDQgTUIgZGVmYXVsdFxyXG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSA0ICogMTAyNCAqIDEwMjQ7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/control-plane-status.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.restrictControlPlaneStatusCode = void 0;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst INAPPROPRIATE_CONTROL_PLANE_CODES = [\r\n    constants_1.Status.OK,\r\n    constants_1.Status.INVALID_ARGUMENT,\r\n    constants_1.Status.NOT_FOUND,\r\n    constants_1.Status.ALREADY_EXISTS,\r\n    constants_1.Status.FAILED_PRECONDITION,\r\n    constants_1.Status.ABORTED,\r\n    constants_1.Status.OUT_OF_RANGE,\r\n    constants_1.Status.DATA_LOSS,\r\n];\r\nfunction restrictControlPlaneStatusCode(code, details) {\r\n    if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {\r\n        return {\r\n            code: constants_1.Status.INTERNAL,\r\n            details: `Invalid status from control plane: ${code} ${constants_1.Status[code]} ${details}`,\r\n        };\r\n    }\r\n    else {\r\n        return { code, details };\r\n    }\r\n}\r\nexports.restrictControlPlaneStatusCode = restrictControlPlaneStatusCode;\r\n//# sourceMappingURL=control-plane-status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29udHJvbC1wbGFuZS1zdGF0dXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0M7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsOEVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxNQUFNLEVBQUUsMEJBQTBCLEVBQUUsUUFBUTtBQUN2RztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbnRyb2wtcGxhbmUtc3RhdHVzLmpzPzY4NjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucmVzdHJpY3RDb250cm9sUGxhbmVTdGF0dXNDb2RlID0gdm9pZCAwO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcclxuY29uc3QgSU5BUFBST1BSSUFURV9DT05UUk9MX1BMQU5FX0NPREVTID0gW1xyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLk9LLFxyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLklOVkFMSURfQVJHVU1FTlQsXHJcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuTk9UX0ZPVU5ELFxyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLkFMUkVBRFlfRVhJU1RTLFxyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLkZBSUxFRF9QUkVDT05ESVRJT04sXHJcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuQUJPUlRFRCxcclxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5PVVRfT0ZfUkFOR0UsXHJcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuREFUQV9MT1NTLFxyXG5dO1xyXG5mdW5jdGlvbiByZXN0cmljdENvbnRyb2xQbGFuZVN0YXR1c0NvZGUoY29kZSwgZGV0YWlscykge1xyXG4gICAgaWYgKElOQVBQUk9QUklBVEVfQ09OVFJPTF9QTEFORV9DT0RFUy5pbmNsdWRlcyhjb2RlKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5JTlRFUk5BTCxcclxuICAgICAgICAgICAgZGV0YWlsczogYEludmFsaWQgc3RhdHVzIGZyb20gY29udHJvbCBwbGFuZTogJHtjb2RlfSAke2NvbnN0YW50c18xLlN0YXR1c1tjb2RlXX0gJHtkZXRhaWxzfWAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7IGNvZGUsIGRldGFpbHMgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnJlc3RyaWN0Q29udHJvbFBsYW5lU3RhdHVzQ29kZSA9IHJlc3RyaWN0Q29udHJvbFBsYW5lU3RhdHVzQ29kZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJvbC1wbGFuZS1zdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/deadline.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.deadlineToString = exports.getRelativeTimeout = exports.getDeadlineTimeoutString = exports.minDeadline = void 0;\r\nfunction minDeadline(...deadlineList) {\r\n    let minValue = Infinity;\r\n    for (const deadline of deadlineList) {\r\n        const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\r\n        if (deadlineMsecs < minValue) {\r\n            minValue = deadlineMsecs;\r\n        }\r\n    }\r\n    return minValue;\r\n}\r\nexports.minDeadline = minDeadline;\r\nconst units = [\r\n    ['m', 1],\r\n    ['S', 1000],\r\n    ['M', 60 * 1000],\r\n    ['H', 60 * 60 * 1000],\r\n];\r\nfunction getDeadlineTimeoutString(deadline) {\r\n    const now = new Date().getTime();\r\n    if (deadline instanceof Date) {\r\n        deadline = deadline.getTime();\r\n    }\r\n    const timeoutMs = Math.max(deadline - now, 0);\r\n    for (const [unit, factor] of units) {\r\n        const amount = timeoutMs / factor;\r\n        if (amount < 1e8) {\r\n            return String(Math.ceil(amount)) + unit;\r\n        }\r\n    }\r\n    throw new Error('Deadline is too far in the future');\r\n}\r\nexports.getDeadlineTimeoutString = getDeadlineTimeoutString;\r\n/**\r\n * See https://nodejs.org/api/timers.html#settimeoutcallback-delay-args\r\n * In particular, \"When delay is larger than 2147483647 or less than 1, the\r\n * delay will be set to 1. Non-integer delays are truncated to an integer.\"\r\n * This number of milliseconds is almost 25 days.\r\n */\r\nconst MAX_TIMEOUT_TIME = 2147483647;\r\n/**\r\n * Get the timeout value that should be passed to setTimeout now for the timer\r\n * to end at the deadline. For any deadline before now, the timer should end\r\n * immediately, represented by a value of 0. For any deadline more than\r\n * MAX_TIMEOUT_TIME milliseconds in the future, a timer cannot be set that will\r\n * end at that time, so it is treated as infinitely far in the future.\r\n * @param deadline\r\n * @returns\r\n */\r\nfunction getRelativeTimeout(deadline) {\r\n    const deadlineMs = deadline instanceof Date ? deadline.getTime() : deadline;\r\n    const now = new Date().getTime();\r\n    const timeout = deadlineMs - now;\r\n    if (timeout < 0) {\r\n        return 0;\r\n    }\r\n    else if (timeout > MAX_TIMEOUT_TIME) {\r\n        return Infinity;\r\n    }\r\n    else {\r\n        return timeout;\r\n    }\r\n}\r\nexports.getRelativeTimeout = getRelativeTimeout;\r\nfunction deadlineToString(deadline) {\r\n    if (deadline instanceof Date) {\r\n        return deadline.toISOString();\r\n    }\r\n    else {\r\n        const dateDeadline = new Date(deadline);\r\n        if (Number.isNaN(dateDeadline.getTime())) {\r\n            return '' + deadline;\r\n        }\r\n        else {\r\n            return dateDeadline.toISOString();\r\n        }\r\n    }\r\n}\r\nexports.deadlineToString = deadlineToString;\r\n//# sourceMappingURL=deadline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZGVhZGxpbmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRywwQkFBMEIsR0FBRyxnQ0FBZ0MsR0FBRyxtQkFBbUI7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2RlYWRsaW5lLmpzPzM3YzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZGVhZGxpbmVUb1N0cmluZyA9IGV4cG9ydHMuZ2V0UmVsYXRpdmVUaW1lb3V0ID0gZXhwb3J0cy5nZXREZWFkbGluZVRpbWVvdXRTdHJpbmcgPSBleHBvcnRzLm1pbkRlYWRsaW5lID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBtaW5EZWFkbGluZSguLi5kZWFkbGluZUxpc3QpIHtcclxuICAgIGxldCBtaW5WYWx1ZSA9IEluZmluaXR5O1xyXG4gICAgZm9yIChjb25zdCBkZWFkbGluZSBvZiBkZWFkbGluZUxpc3QpIHtcclxuICAgICAgICBjb25zdCBkZWFkbGluZU1zZWNzID0gZGVhZGxpbmUgaW5zdGFuY2VvZiBEYXRlID8gZGVhZGxpbmUuZ2V0VGltZSgpIDogZGVhZGxpbmU7XHJcbiAgICAgICAgaWYgKGRlYWRsaW5lTXNlY3MgPCBtaW5WYWx1ZSkge1xyXG4gICAgICAgICAgICBtaW5WYWx1ZSA9IGRlYWRsaW5lTXNlY3M7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1pblZhbHVlO1xyXG59XHJcbmV4cG9ydHMubWluRGVhZGxpbmUgPSBtaW5EZWFkbGluZTtcclxuY29uc3QgdW5pdHMgPSBbXHJcbiAgICBbJ20nLCAxXSxcclxuICAgIFsnUycsIDEwMDBdLFxyXG4gICAgWydNJywgNjAgKiAxMDAwXSxcclxuICAgIFsnSCcsIDYwICogNjAgKiAxMDAwXSxcclxuXTtcclxuZnVuY3Rpb24gZ2V0RGVhZGxpbmVUaW1lb3V0U3RyaW5nKGRlYWRsaW5lKSB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGlmIChkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICBkZWFkbGluZSA9IGRlYWRsaW5lLmdldFRpbWUoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRpbWVvdXRNcyA9IE1hdGgubWF4KGRlYWRsaW5lIC0gbm93LCAwKTtcclxuICAgIGZvciAoY29uc3QgW3VuaXQsIGZhY3Rvcl0gb2YgdW5pdHMpIHtcclxuICAgICAgICBjb25zdCBhbW91bnQgPSB0aW1lb3V0TXMgLyBmYWN0b3I7XHJcbiAgICAgICAgaWYgKGFtb3VudCA8IDFlOCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKE1hdGguY2VpbChhbW91bnQpKSArIHVuaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEZWFkbGluZSBpcyB0b28gZmFyIGluIHRoZSBmdXR1cmUnKTtcclxufVxyXG5leHBvcnRzLmdldERlYWRsaW5lVGltZW91dFN0cmluZyA9IGdldERlYWRsaW5lVGltZW91dFN0cmluZztcclxuLyoqXHJcbiAqIFNlZSBodHRwczovL25vZGVqcy5vcmcvYXBpL3RpbWVycy5odG1sI3NldHRpbWVvdXRjYWxsYmFjay1kZWxheS1hcmdzXHJcbiAqIEluIHBhcnRpY3VsYXIsIFwiV2hlbiBkZWxheSBpcyBsYXJnZXIgdGhhbiAyMTQ3NDgzNjQ3IG9yIGxlc3MgdGhhbiAxLCB0aGVcclxuICogZGVsYXkgd2lsbCBiZSBzZXQgdG8gMS4gTm9uLWludGVnZXIgZGVsYXlzIGFyZSB0cnVuY2F0ZWQgdG8gYW4gaW50ZWdlci5cIlxyXG4gKiBUaGlzIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXMgYWxtb3N0IDI1IGRheXMuXHJcbiAqL1xyXG5jb25zdCBNQVhfVElNRU9VVF9USU1FID0gMjE0NzQ4MzY0NztcclxuLyoqXHJcbiAqIEdldCB0aGUgdGltZW91dCB2YWx1ZSB0aGF0IHNob3VsZCBiZSBwYXNzZWQgdG8gc2V0VGltZW91dCBub3cgZm9yIHRoZSB0aW1lclxyXG4gKiB0byBlbmQgYXQgdGhlIGRlYWRsaW5lLiBGb3IgYW55IGRlYWRsaW5lIGJlZm9yZSBub3csIHRoZSB0aW1lciBzaG91bGQgZW5kXHJcbiAqIGltbWVkaWF0ZWx5LCByZXByZXNlbnRlZCBieSBhIHZhbHVlIG9mIDAuIEZvciBhbnkgZGVhZGxpbmUgbW9yZSB0aGFuXHJcbiAqIE1BWF9USU1FT1VUX1RJTUUgbWlsbGlzZWNvbmRzIGluIHRoZSBmdXR1cmUsIGEgdGltZXIgY2Fubm90IGJlIHNldCB0aGF0IHdpbGxcclxuICogZW5kIGF0IHRoYXQgdGltZSwgc28gaXQgaXMgdHJlYXRlZCBhcyBpbmZpbml0ZWx5IGZhciBpbiB0aGUgZnV0dXJlLlxyXG4gKiBAcGFyYW0gZGVhZGxpbmVcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGdldFJlbGF0aXZlVGltZW91dChkZWFkbGluZSkge1xyXG4gICAgY29uc3QgZGVhZGxpbmVNcyA9IGRlYWRsaW5lIGluc3RhbmNlb2YgRGF0ZSA/IGRlYWRsaW5lLmdldFRpbWUoKSA6IGRlYWRsaW5lO1xyXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICBjb25zdCB0aW1lb3V0ID0gZGVhZGxpbmVNcyAtIG5vdztcclxuICAgIGlmICh0aW1lb3V0IDwgMCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodGltZW91dCA+IE1BWF9USU1FT1VUX1RJTUUpIHtcclxuICAgICAgICByZXR1cm4gSW5maW5pdHk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdGltZW91dDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdldFJlbGF0aXZlVGltZW91dCA9IGdldFJlbGF0aXZlVGltZW91dDtcclxuZnVuY3Rpb24gZGVhZGxpbmVUb1N0cmluZyhkZWFkbGluZSkge1xyXG4gICAgaWYgKGRlYWRsaW5lIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBkZWFkbGluZS50b0lTT1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgZGF0ZURlYWRsaW5lID0gbmV3IERhdGUoZGVhZGxpbmUpO1xyXG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oZGF0ZURlYWRsaW5lLmdldFRpbWUoKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnICsgZGVhZGxpbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0ZURlYWRsaW5lLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVhZGxpbmVUb1N0cmluZyA9IGRlYWRsaW5lVG9TdHJpbmc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYWRsaW5lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/duration.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.isDuration = exports.durationToMs = exports.msToDuration = void 0;\r\nfunction msToDuration(millis) {\r\n    return {\r\n        seconds: (millis / 1000) | 0,\r\n        nanos: ((millis % 1000) * 1000000) | 0,\r\n    };\r\n}\r\nexports.msToDuration = msToDuration;\r\nfunction durationToMs(duration) {\r\n    return (duration.seconds * 1000 + duration.nanos / 1000000) | 0;\r\n}\r\nexports.durationToMs = durationToMs;\r\nfunction isDuration(value) {\r\n    return typeof value.seconds === 'number' && typeof value.nanos === 'number';\r\n}\r\nexports.isDuration = isDuration;\r\n//# sourceMappingURL=duration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZHVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyxvQkFBb0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9kdXJhdGlvbi5qcz8zZDlmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmlzRHVyYXRpb24gPSBleHBvcnRzLmR1cmF0aW9uVG9NcyA9IGV4cG9ydHMubXNUb0R1cmF0aW9uID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBtc1RvRHVyYXRpb24obWlsbGlzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNlY29uZHM6IChtaWxsaXMgLyAxMDAwKSB8IDAsXHJcbiAgICAgICAgbmFub3M6ICgobWlsbGlzICUgMTAwMCkgKiAxMDAwMDAwKSB8IDAsXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMubXNUb0R1cmF0aW9uID0gbXNUb0R1cmF0aW9uO1xyXG5mdW5jdGlvbiBkdXJhdGlvblRvTXMoZHVyYXRpb24pIHtcclxuICAgIHJldHVybiAoZHVyYXRpb24uc2Vjb25kcyAqIDEwMDAgKyBkdXJhdGlvbi5uYW5vcyAvIDEwMDAwMDApIHwgMDtcclxufVxyXG5leHBvcnRzLmR1cmF0aW9uVG9NcyA9IGR1cmF0aW9uVG9NcztcclxuZnVuY3Rpb24gaXNEdXJhdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5zZWNvbmRzID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdmFsdWUubmFub3MgPT09ICdudW1iZXInO1xyXG59XHJcbmV4cG9ydHMuaXNEdXJhdGlvbiA9IGlzRHVyYXRpb247XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR1cmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/error.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/error.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getErrorCode = exports.getErrorMessage = void 0;\r\nfunction getErrorMessage(error) {\r\n    if (error instanceof Error) {\r\n        return error.message;\r\n    }\r\n    else {\r\n        return String(error);\r\n    }\r\n}\r\nexports.getErrorMessage = getErrorMessage;\r\nfunction getErrorCode(error) {\r\n    if (typeof error === 'object' &&\r\n        error !== null &&\r\n        'code' in error &&\r\n        typeof error.code === 'number') {\r\n        return error.code;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexports.getErrorCode = getErrorCode;\r\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdG9fcGgvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZXJyb3IuanM/NTc5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRFcnJvckNvZGUgPSBleHBvcnRzLmdldEVycm9yTWVzc2FnZSA9IHZvaWQgMDtcclxuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKGVycm9yKSB7XHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyhlcnJvcik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5nZXRFcnJvck1lc3NhZ2UgPSBnZXRFcnJvck1lc3NhZ2U7XHJcbmZ1bmN0aW9uIGdldEVycm9yQ29kZShlcnJvcikge1xyXG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICBlcnJvciAhPT0gbnVsbCAmJlxyXG4gICAgICAgICdjb2RlJyBpbiBlcnJvciAmJlxyXG4gICAgICAgIHR5cGVvZiBlcnJvci5jb2RlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHJldHVybiBlcnJvci5jb2RlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5nZXRFcnJvckNvZGUgPSBnZXRFcnJvckNvZGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/experimental.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OutlierDetectionLoadBalancingConfig = exports.BaseSubchannelWrapper = exports.registerAdminService = exports.FilterStackFactory = exports.BaseFilter = exports.PickResultType = exports.QueuePicker = exports.UnavailablePicker = exports.ChildLoadBalancerHandler = exports.subchannelAddressToString = exports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = exports.BackoffTimeout = exports.durationToMs = exports.uriToString = exports.createResolver = exports.registerResolver = exports.log = exports.trace = void 0;\r\nvar logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nObject.defineProperty(exports, \"trace\", ({ enumerable: true, get: function () { return logging_1.trace; } }));\r\nObject.defineProperty(exports, \"log\", ({ enumerable: true, get: function () { return logging_1.log; } }));\r\nvar resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nObject.defineProperty(exports, \"registerResolver\", ({ enumerable: true, get: function () { return resolver_1.registerResolver; } }));\r\nObject.defineProperty(exports, \"createResolver\", ({ enumerable: true, get: function () { return resolver_1.createResolver; } }));\r\nvar uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nObject.defineProperty(exports, \"uriToString\", ({ enumerable: true, get: function () { return uri_parser_1.uriToString; } }));\r\nvar duration_1 = __webpack_require__(/*! ./duration */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\r\nObject.defineProperty(exports, \"durationToMs\", ({ enumerable: true, get: function () { return duration_1.durationToMs; } }));\r\nvar backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nObject.defineProperty(exports, \"BackoffTimeout\", ({ enumerable: true, get: function () { return backoff_timeout_1.BackoffTimeout; } }));\r\nvar load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nObject.defineProperty(exports, \"createChildChannelControlHelper\", ({ enumerable: true, get: function () { return load_balancer_1.createChildChannelControlHelper; } }));\r\nObject.defineProperty(exports, \"registerLoadBalancerType\", ({ enumerable: true, get: function () { return load_balancer_1.registerLoadBalancerType; } }));\r\nObject.defineProperty(exports, \"getFirstUsableConfig\", ({ enumerable: true, get: function () { return load_balancer_1.getFirstUsableConfig; } }));\r\nObject.defineProperty(exports, \"validateLoadBalancingConfig\", ({ enumerable: true, get: function () { return load_balancer_1.validateLoadBalancingConfig; } }));\r\nvar subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nObject.defineProperty(exports, \"subchannelAddressToString\", ({ enumerable: true, get: function () { return subchannel_address_1.subchannelAddressToString; } }));\r\nvar load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\r\nObject.defineProperty(exports, \"ChildLoadBalancerHandler\", ({ enumerable: true, get: function () { return load_balancer_child_handler_1.ChildLoadBalancerHandler; } }));\r\nvar picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nObject.defineProperty(exports, \"UnavailablePicker\", ({ enumerable: true, get: function () { return picker_1.UnavailablePicker; } }));\r\nObject.defineProperty(exports, \"QueuePicker\", ({ enumerable: true, get: function () { return picker_1.QueuePicker; } }));\r\nObject.defineProperty(exports, \"PickResultType\", ({ enumerable: true, get: function () { return picker_1.PickResultType; } }));\r\nvar filter_1 = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\r\nObject.defineProperty(exports, \"BaseFilter\", ({ enumerable: true, get: function () { return filter_1.BaseFilter; } }));\r\nvar filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\r\nObject.defineProperty(exports, \"FilterStackFactory\", ({ enumerable: true, get: function () { return filter_stack_1.FilterStackFactory; } }));\r\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\r\nObject.defineProperty(exports, \"registerAdminService\", ({ enumerable: true, get: function () { return admin_1.registerAdminService; } }));\r\nvar subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\r\nObject.defineProperty(exports, \"BaseSubchannelWrapper\", ({ enumerable: true, get: function () { return subchannel_interface_1.BaseSubchannelWrapper; } }));\r\nvar load_balancer_outlier_detection_1 = __webpack_require__(/*! ./load-balancer-outlier-detection */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\");\r\nObject.defineProperty(exports, \"OutlierDetectionLoadBalancingConfig\", ({ enumerable: true, get: function () { return load_balancer_outlier_detection_1.OutlierDetectionLoadBalancingConfig; } }));\r\n//# sourceMappingURL=experimental.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter-stack.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FilterStackFactory = exports.FilterStack = void 0;\r\nclass FilterStack {\r\n    constructor(filters) {\r\n        this.filters = filters;\r\n    }\r\n    sendMetadata(metadata) {\r\n        let result = metadata;\r\n        for (let i = 0; i < this.filters.length; i++) {\r\n            result = this.filters[i].sendMetadata(result);\r\n        }\r\n        return result;\r\n    }\r\n    receiveMetadata(metadata) {\r\n        let result = metadata;\r\n        for (let i = this.filters.length - 1; i >= 0; i--) {\r\n            result = this.filters[i].receiveMetadata(result);\r\n        }\r\n        return result;\r\n    }\r\n    sendMessage(message) {\r\n        let result = message;\r\n        for (let i = 0; i < this.filters.length; i++) {\r\n            result = this.filters[i].sendMessage(result);\r\n        }\r\n        return result;\r\n    }\r\n    receiveMessage(message) {\r\n        let result = message;\r\n        for (let i = this.filters.length - 1; i >= 0; i--) {\r\n            result = this.filters[i].receiveMessage(result);\r\n        }\r\n        return result;\r\n    }\r\n    receiveTrailers(status) {\r\n        let result = status;\r\n        for (let i = this.filters.length - 1; i >= 0; i--) {\r\n            result = this.filters[i].receiveTrailers(result);\r\n        }\r\n        return result;\r\n    }\r\n    push(filters) {\r\n        this.filters.unshift(...filters);\r\n    }\r\n    getFilters() {\r\n        return this.filters;\r\n    }\r\n}\r\nexports.FilterStack = FilterStack;\r\nclass FilterStackFactory {\r\n    constructor(factories) {\r\n        this.factories = factories;\r\n    }\r\n    push(filterFactories) {\r\n        this.factories.unshift(...filterFactories);\r\n    }\r\n    clone() {\r\n        return new FilterStackFactory([...this.factories]);\r\n    }\r\n    createFilter() {\r\n        return new FilterStack(this.factories.map(factory => factory.createFilter()));\r\n    }\r\n}\r\nexports.FilterStackFactory = FilterStackFactory;\r\n//# sourceMappingURL=filter-stack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLXN0YWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9maWx0ZXItc3RhY2suanM/ZWQ0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5GaWx0ZXJTdGFja0ZhY3RvcnkgPSBleHBvcnRzLkZpbHRlclN0YWNrID0gdm9pZCAwO1xyXG5jbGFzcyBGaWx0ZXJTdGFjayB7XHJcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJzKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gZmlsdGVycztcclxuICAgIH1cclxuICAgIHNlbmRNZXRhZGF0YShtZXRhZGF0YSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBtZXRhZGF0YTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0uc2VuZE1ldGFkYXRhKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbWV0YWRhdGE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZmlsdGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0ucmVjZWl2ZU1ldGFkYXRhKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBzZW5kTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnNlbmRNZXNzYWdlKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZmlsdGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZpbHRlcnNbaV0ucmVjZWl2ZU1lc3NhZ2UocmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHJlY2VpdmVUcmFpbGVycyhzdGF0dXMpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gc3RhdHVzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnJlY2VpdmVUcmFpbGVycyhyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcHVzaChmaWx0ZXJzKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJzLnVuc2hpZnQoLi4uZmlsdGVycyk7XHJcbiAgICB9XHJcbiAgICBnZXRGaWx0ZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5GaWx0ZXJTdGFjayA9IEZpbHRlclN0YWNrO1xyXG5jbGFzcyBGaWx0ZXJTdGFja0ZhY3Rvcnkge1xyXG4gICAgY29uc3RydWN0b3IoZmFjdG9yaWVzKSB7XHJcbiAgICAgICAgdGhpcy5mYWN0b3JpZXMgPSBmYWN0b3JpZXM7XHJcbiAgICB9XHJcbiAgICBwdXNoKGZpbHRlckZhY3Rvcmllcykge1xyXG4gICAgICAgIHRoaXMuZmFjdG9yaWVzLnVuc2hpZnQoLi4uZmlsdGVyRmFjdG9yaWVzKTtcclxuICAgIH1cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmlsdGVyU3RhY2tGYWN0b3J5KFsuLi50aGlzLmZhY3Rvcmllc10pO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlRmlsdGVyKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRmlsdGVyU3RhY2sodGhpcy5mYWN0b3JpZXMubWFwKGZhY3RvcnkgPT4gZmFjdG9yeS5jcmVhdGVGaWx0ZXIoKSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRmlsdGVyU3RhY2tGYWN0b3J5ID0gRmlsdGVyU3RhY2tGYWN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXItc3RhY2suanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BaseFilter = void 0;\r\nclass BaseFilter {\r\n    async sendMetadata(metadata) {\r\n        return metadata;\r\n    }\r\n    receiveMetadata(metadata) {\r\n        return metadata;\r\n    }\r\n    async sendMessage(message) {\r\n        return message;\r\n    }\r\n    async receiveMessage(message) {\r\n        return message;\r\n    }\r\n    receiveTrailers(status) {\r\n        return status;\r\n    }\r\n}\r\nexports.BaseFilter = BaseFilter;\r\n//# sourceMappingURL=filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9maWx0ZXIuanM/NWY4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5CYXNlRmlsdGVyID0gdm9pZCAwO1xyXG5jbGFzcyBCYXNlRmlsdGVyIHtcclxuICAgIGFzeW5jIHNlbmRNZXRhZGF0YShtZXRhZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBtZXRhZGF0YTtcclxuICAgIH1cclxuICAgIHJlY2VpdmVNZXRhZGF0YShtZXRhZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBtZXRhZGF0YTtcclxuICAgIH1cclxuICAgIGFzeW5jIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgIH1cclxuICAgIGFzeW5jIHJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgIH1cclxuICAgIHJlY2VpdmVUcmFpbGVycyhzdGF0dXMpIHtcclxuICAgICAgICByZXR1cm4gc3RhdHVzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQmFzZUZpbHRlciA9IEJhc2VGaWx0ZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/http_proxy.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getProxiedConnection = exports.mapProxyName = void 0;\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst http = __webpack_require__(/*! http */ \"http\");\r\nconst tls = __webpack_require__(/*! tls */ \"tls\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst url_1 = __webpack_require__(/*! url */ \"url\");\r\nconst resolver_dns_1 = __webpack_require__(/*! ./resolver-dns */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\r\nconst TRACER_NAME = 'proxy';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nfunction getProxyInfo() {\r\n    let proxyEnv = '';\r\n    let envVar = '';\r\n    /* Prefer using 'grpc_proxy'. Fallback on 'http_proxy' if it is not set.\r\n     * Also prefer using 'https_proxy' with fallback on 'http_proxy'. The\r\n     * fallback behavior can be removed if there's a demand for it.\r\n     */\r\n    if (process.env.grpc_proxy) {\r\n        envVar = 'grpc_proxy';\r\n        proxyEnv = process.env.grpc_proxy;\r\n    }\r\n    else if (process.env.https_proxy) {\r\n        envVar = 'https_proxy';\r\n        proxyEnv = process.env.https_proxy;\r\n    }\r\n    else if (process.env.http_proxy) {\r\n        envVar = 'http_proxy';\r\n        proxyEnv = process.env.http_proxy;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n    let proxyUrl;\r\n    try {\r\n        proxyUrl = new url_1.URL(proxyEnv);\r\n    }\r\n    catch (e) {\r\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `cannot parse value of \"${envVar}\" env var`);\r\n        return {};\r\n    }\r\n    if (proxyUrl.protocol !== 'http:') {\r\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `\"${proxyUrl.protocol}\" scheme not supported in proxy URI`);\r\n        return {};\r\n    }\r\n    let userCred = null;\r\n    if (proxyUrl.username) {\r\n        if (proxyUrl.password) {\r\n            (0, logging_1.log)(constants_1.LogVerbosity.INFO, 'userinfo found in proxy URI');\r\n            userCred = `${proxyUrl.username}:${proxyUrl.password}`;\r\n        }\r\n        else {\r\n            userCred = proxyUrl.username;\r\n        }\r\n    }\r\n    const hostname = proxyUrl.hostname;\r\n    let port = proxyUrl.port;\r\n    /* The proxy URL uses the scheme \"http:\", which has a default port number of\r\n     * 80. We need to set that explicitly here if it is omitted because otherwise\r\n     * it will use gRPC's default port 443. */\r\n    if (port === '') {\r\n        port = '80';\r\n    }\r\n    const result = {\r\n        address: `${hostname}:${port}`,\r\n    };\r\n    if (userCred) {\r\n        result.creds = userCred;\r\n    }\r\n    trace('Proxy server ' + result.address + ' set by environment variable ' + envVar);\r\n    return result;\r\n}\r\nfunction getNoProxyHostList() {\r\n    /* Prefer using 'no_grpc_proxy'. Fallback on 'no_proxy' if it is not set. */\r\n    let noProxyStr = process.env.no_grpc_proxy;\r\n    let envVar = 'no_grpc_proxy';\r\n    if (!noProxyStr) {\r\n        noProxyStr = process.env.no_proxy;\r\n        envVar = 'no_proxy';\r\n    }\r\n    if (noProxyStr) {\r\n        trace('No proxy server list set by environment variable ' + envVar);\r\n        return noProxyStr.split(',');\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction mapProxyName(target, options) {\r\n    var _a;\r\n    const noProxyResult = {\r\n        target: target,\r\n        extraOptions: {},\r\n    };\r\n    if (((_a = options['grpc.enable_http_proxy']) !== null && _a !== void 0 ? _a : 1) === 0) {\r\n        return noProxyResult;\r\n    }\r\n    if (target.scheme === 'unix') {\r\n        return noProxyResult;\r\n    }\r\n    const proxyInfo = getProxyInfo();\r\n    if (!proxyInfo.address) {\r\n        return noProxyResult;\r\n    }\r\n    const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\r\n    if (!hostPort) {\r\n        return noProxyResult;\r\n    }\r\n    const serverHost = hostPort.host;\r\n    for (const host of getNoProxyHostList()) {\r\n        if (host === serverHost) {\r\n            trace('Not using proxy for target in no_proxy list: ' + (0, uri_parser_1.uriToString)(target));\r\n            return noProxyResult;\r\n        }\r\n    }\r\n    const extraOptions = {\r\n        'grpc.http_connect_target': (0, uri_parser_1.uriToString)(target),\r\n    };\r\n    if (proxyInfo.creds) {\r\n        extraOptions['grpc.http_connect_creds'] = proxyInfo.creds;\r\n    }\r\n    return {\r\n        target: {\r\n            scheme: 'dns',\r\n            path: proxyInfo.address,\r\n        },\r\n        extraOptions: extraOptions,\r\n    };\r\n}\r\nexports.mapProxyName = mapProxyName;\r\nfunction getProxiedConnection(address, channelOptions, connectionOptions) {\r\n    var _a;\r\n    if (!('grpc.http_connect_target' in channelOptions)) {\r\n        return Promise.resolve({});\r\n    }\r\n    const realTarget = channelOptions['grpc.http_connect_target'];\r\n    const parsedTarget = (0, uri_parser_1.parseUri)(realTarget);\r\n    if (parsedTarget === null) {\r\n        return Promise.resolve({});\r\n    }\r\n    const splitHostPost = (0, uri_parser_1.splitHostPort)(parsedTarget.path);\r\n    if (splitHostPost === null) {\r\n        return Promise.resolve({});\r\n    }\r\n    const hostPort = `${splitHostPost.host}:${(_a = splitHostPost.port) !== null && _a !== void 0 ? _a : resolver_dns_1.DEFAULT_PORT}`;\r\n    const options = {\r\n        method: 'CONNECT',\r\n        path: hostPort,\r\n    };\r\n    const headers = {\r\n        Host: hostPort,\r\n    };\r\n    // Connect to the subchannel address as a proxy\r\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {\r\n        options.host = address.host;\r\n        options.port = address.port;\r\n    }\r\n    else {\r\n        options.socketPath = address.path;\r\n    }\r\n    if ('grpc.http_connect_creds' in channelOptions) {\r\n        headers['Proxy-Authorization'] =\r\n            'Basic ' +\r\n                Buffer.from(channelOptions['grpc.http_connect_creds']).toString('base64');\r\n    }\r\n    options.headers = headers;\r\n    const proxyAddressString = (0, subchannel_address_1.subchannelAddressToString)(address);\r\n    trace('Using proxy ' + proxyAddressString + ' to connect to ' + options.path);\r\n    return new Promise((resolve, reject) => {\r\n        const request = http.request(options);\r\n        request.once('connect', (res, socket, head) => {\r\n            var _a;\r\n            request.removeAllListeners();\r\n            socket.removeAllListeners();\r\n            if (res.statusCode === 200) {\r\n                trace('Successfully connected to ' +\r\n                    options.path +\r\n                    ' through proxy ' +\r\n                    proxyAddressString);\r\n                if ('secureContext' in connectionOptions) {\r\n                    /* The proxy is connecting to a TLS server, so upgrade this socket\r\n                     * connection to a TLS connection.\r\n                     * This is a workaround for https://github.com/nodejs/node/issues/32922\r\n                     * See https://github.com/grpc/grpc-node/pull/1369 for more info. */\r\n                    const targetPath = (0, resolver_1.getDefaultAuthority)(parsedTarget);\r\n                    const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\r\n                    const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;\r\n                    const cts = tls.connect(Object.assign({ host: remoteHost, servername: remoteHost, socket: socket }, connectionOptions), () => {\r\n                        trace('Successfully established a TLS connection to ' +\r\n                            options.path +\r\n                            ' through proxy ' +\r\n                            proxyAddressString);\r\n                        resolve({ socket: cts, realTarget: parsedTarget });\r\n                    });\r\n                    cts.on('error', (error) => {\r\n                        trace('Failed to establish a TLS connection to ' +\r\n                            options.path +\r\n                            ' through proxy ' +\r\n                            proxyAddressString +\r\n                            ' with error ' +\r\n                            error.message);\r\n                        reject();\r\n                    });\r\n                }\r\n                else {\r\n                    trace('Successfully established a plaintext connection to ' +\r\n                        options.path +\r\n                        ' through proxy ' +\r\n                        proxyAddressString);\r\n                    resolve({\r\n                        socket,\r\n                        realTarget: parsedTarget,\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to ' +\r\n                    options.path +\r\n                    ' through proxy ' +\r\n                    proxyAddressString +\r\n                    ' with status ' +\r\n                    res.statusCode);\r\n                reject();\r\n            }\r\n        });\r\n        request.once('error', err => {\r\n            request.removeAllListeners();\r\n            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to proxy ' +\r\n                proxyAddressString +\r\n                ' with error ' +\r\n                err.message);\r\n            reject();\r\n        });\r\n        request.end();\r\n    });\r\n}\r\nexports.getProxiedConnection = getProxiedConnection;\r\n//# sourceMappingURL=http_proxy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.experimental = exports.addAdminServicesToServer = exports.getChannelzHandlers = exports.getChannelzServiceDefinition = exports.InterceptorConfigurationError = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\r\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\r\nObject.defineProperty(exports, \"CallCredentials\", ({ enumerable: true, get: function () { return call_credentials_1.CallCredentials; } }));\r\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\r\nObject.defineProperty(exports, \"Channel\", ({ enumerable: true, get: function () { return channel_1.ChannelImplementation; } }));\r\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\r\nObject.defineProperty(exports, \"compressionAlgorithms\", ({ enumerable: true, get: function () { return compression_algorithms_1.CompressionAlgorithms; } }));\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nObject.defineProperty(exports, \"connectivityState\", ({ enumerable: true, get: function () { return connectivity_state_1.ConnectivityState; } }));\r\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\r\nObject.defineProperty(exports, \"ChannelCredentials\", ({ enumerable: true, get: function () { return channel_credentials_1.ChannelCredentials; } }));\r\nconst client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js\");\r\nObject.defineProperty(exports, \"Client\", ({ enumerable: true, get: function () { return client_1.Client; } }));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nObject.defineProperty(exports, \"logVerbosity\", ({ enumerable: true, get: function () { return constants_1.LogVerbosity; } }));\r\nObject.defineProperty(exports, \"status\", ({ enumerable: true, get: function () { return constants_1.Status; } }));\r\nObject.defineProperty(exports, \"propagate\", ({ enumerable: true, get: function () { return constants_1.Propagate; } }));\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\r\nObject.defineProperty(exports, \"loadPackageDefinition\", ({ enumerable: true, get: function () { return make_client_1.loadPackageDefinition; } }));\r\nObject.defineProperty(exports, \"makeClientConstructor\", ({ enumerable: true, get: function () { return make_client_1.makeClientConstructor; } }));\r\nObject.defineProperty(exports, \"makeGenericClientConstructor\", ({ enumerable: true, get: function () { return make_client_1.makeClientConstructor; } }));\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nObject.defineProperty(exports, \"Metadata\", ({ enumerable: true, get: function () { return metadata_1.Metadata; } }));\r\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server.js\");\r\nObject.defineProperty(exports, \"Server\", ({ enumerable: true, get: function () { return server_1.Server; } }));\r\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\r\nObject.defineProperty(exports, \"ServerCredentials\", ({ enumerable: true, get: function () { return server_credentials_1.ServerCredentials; } }));\r\nconst status_builder_1 = __webpack_require__(/*! ./status-builder */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\");\r\nObject.defineProperty(exports, \"StatusBuilder\", ({ enumerable: true, get: function () { return status_builder_1.StatusBuilder; } }));\r\n/**** Client Credentials ****/\r\n// Using assign only copies enumerable properties, which is what we want\r\nexports.credentials = {\r\n    /**\r\n     * Combine a ChannelCredentials with any number of CallCredentials into a\r\n     * single ChannelCredentials object.\r\n     * @param channelCredentials The ChannelCredentials object.\r\n     * @param callCredentials Any number of CallCredentials objects.\r\n     * @return The resulting ChannelCredentials object.\r\n     */\r\n    combineChannelCredentials: (channelCredentials, ...callCredentials) => {\r\n        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\r\n    },\r\n    /**\r\n     * Combine any number of CallCredentials into a single CallCredentials\r\n     * object.\r\n     * @param first The first CallCredentials object.\r\n     * @param additional Any number of additional CallCredentials objects.\r\n     * @return The resulting CallCredentials object.\r\n     */\r\n    combineCallCredentials: (first, ...additional) => {\r\n        return additional.reduce((acc, other) => acc.compose(other), first);\r\n    },\r\n    // from channel-credentials.ts\r\n    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\r\n    createSsl: channel_credentials_1.ChannelCredentials.createSsl,\r\n    createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,\r\n    // from call-credentials.ts\r\n    createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\r\n    createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\r\n    createEmpty: call_credentials_1.CallCredentials.createEmpty,\r\n};\r\n/**\r\n * Close a Client object.\r\n * @param client The client to close.\r\n */\r\nconst closeClient = (client) => client.close();\r\nexports.closeClient = closeClient;\r\nconst waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\r\nexports.waitForClientReady = waitForClientReady;\r\n/* eslint-enable @typescript-eslint/no-explicit-any */\r\n/**** Unimplemented function stubs ****/\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst loadObject = (value, options) => {\r\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\r\n};\r\nexports.loadObject = loadObject;\r\nconst load = (filename, format, options) => {\r\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\r\n};\r\nexports.load = load;\r\nconst setLogger = (logger) => {\r\n    logging.setLogger(logger);\r\n};\r\nexports.setLogger = setLogger;\r\nconst setLogVerbosity = (verbosity) => {\r\n    logging.setLoggerVerbosity(verbosity);\r\n};\r\nexports.setLogVerbosity = setLogVerbosity;\r\nconst getClientChannel = (client) => {\r\n    return client_1.Client.prototype.getChannel.call(client);\r\n};\r\nexports.getClientChannel = getClientChannel;\r\nvar client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\r\nObject.defineProperty(exports, \"ListenerBuilder\", ({ enumerable: true, get: function () { return client_interceptors_1.ListenerBuilder; } }));\r\nObject.defineProperty(exports, \"RequesterBuilder\", ({ enumerable: true, get: function () { return client_interceptors_1.RequesterBuilder; } }));\r\nObject.defineProperty(exports, \"InterceptingCall\", ({ enumerable: true, get: function () { return client_interceptors_1.InterceptingCall; } }));\r\nObject.defineProperty(exports, \"InterceptorConfigurationError\", ({ enumerable: true, get: function () { return client_interceptors_1.InterceptorConfigurationError; } }));\r\nvar channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", ({ enumerable: true, get: function () { return channelz_1.getChannelzServiceDefinition; } }));\r\nObject.defineProperty(exports, \"getChannelzHandlers\", ({ enumerable: true, get: function () { return channelz_1.getChannelzHandlers; } }));\r\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\r\nObject.defineProperty(exports, \"addAdminServicesToServer\", ({ enumerable: true, get: function () { return admin_1.addAdminServicesToServer; } }));\r\nconst experimental = __webpack_require__(/*! ./experimental */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\r\nexports.experimental = experimental;\r\nconst resolver_dns = __webpack_require__(/*! ./resolver-dns */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\r\nconst resolver_uds = __webpack_require__(/*! ./resolver-uds */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\");\r\nconst resolver_ip = __webpack_require__(/*! ./resolver-ip */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\");\r\nconst load_balancer_pick_first = __webpack_require__(/*! ./load-balancer-pick-first */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\r\nconst load_balancer_round_robin = __webpack_require__(/*! ./load-balancer-round-robin */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\");\r\nconst load_balancer_outlier_detection = __webpack_require__(/*! ./load-balancer-outlier-detection */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\");\r\nconst channelz = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\n(() => {\r\n    resolver_dns.setup();\r\n    resolver_uds.setup();\r\n    resolver_ip.setup();\r\n    load_balancer_pick_first.setup();\r\n    load_balancer_round_robin.setup();\r\n    load_balancer_outlier_detection.setup();\r\n    channelz.setup();\r\n})();\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js":
/*!******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/internal-channel.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InternalChannel = void 0;\r\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\r\nconst resolving_load_balancer_1 = __webpack_require__(/*! ./resolving-load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\");\r\nconst subchannel_pool_1 = __webpack_require__(/*! ./subchannel-pool */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\r\nconst compression_filter_1 = __webpack_require__(/*! ./compression-filter */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nconst load_balancing_call_1 = __webpack_require__(/*! ./load-balancing-call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\");\r\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\r\nconst resolving_call_1 = __webpack_require__(/*! ./resolving-call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js\");\r\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-number.js\");\r\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\r\nconst retrying_call_1 = __webpack_require__(/*! ./retrying-call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js\");\r\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\r\n/**\r\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\r\n */\r\nconst MAX_TIMEOUT_TIME = 2147483647;\r\nconst MIN_IDLE_TIMEOUT_MS = 1000;\r\n// 30 minutes\r\nconst DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;\r\nconst RETRY_THROTTLER_MAP = new Map();\r\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\r\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\r\nclass ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\r\n    constructor(childSubchannel, channel) {\r\n        super(childSubchannel);\r\n        this.channel = channel;\r\n        this.refCount = 0;\r\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {\r\n            channel.throttleKeepalive(keepaliveTime);\r\n        };\r\n        childSubchannel.addConnectivityStateListener(this.subchannelStateListener);\r\n    }\r\n    ref() {\r\n        this.child.ref();\r\n        this.refCount += 1;\r\n    }\r\n    unref() {\r\n        this.child.unref();\r\n        this.refCount -= 1;\r\n        if (this.refCount <= 0) {\r\n            this.child.removeConnectivityStateListener(this.subchannelStateListener);\r\n            this.channel.removeWrappedSubchannel(this);\r\n        }\r\n    }\r\n}\r\nclass InternalChannel {\r\n    constructor(target, credentials, options) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        this.credentials = credentials;\r\n        this.options = options;\r\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.currentPicker = new picker_1.UnavailablePicker();\r\n        /**\r\n         * Calls queued up to get a call config. Should only be populated before the\r\n         * first time the resolver returns a result, which includes the ConfigSelector.\r\n         */\r\n        this.configSelectionQueue = [];\r\n        this.pickQueue = [];\r\n        this.connectivityStateWatchers = [];\r\n        this.configSelector = null;\r\n        /**\r\n         * This is the error from the name resolver if it failed most recently. It\r\n         * is only used to end calls that start while there is no config selector\r\n         * and the name resolver is in backoff, so it should be nulled if\r\n         * configSelector becomes set or the channel state becomes anything other\r\n         * than TRANSIENT_FAILURE.\r\n         */\r\n        this.currentResolutionError = null;\r\n        this.wrappedSubchannels = new Set();\r\n        this.callCount = 0;\r\n        this.idleTimer = null;\r\n        // Channelz info\r\n        this.channelzEnabled = true;\r\n        this.callTracker = new channelz_1.ChannelzCallTracker();\r\n        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\r\n        if (typeof target !== 'string') {\r\n            throw new TypeError('Channel target must be a string');\r\n        }\r\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\r\n            throw new TypeError('Channel credentials must be a ChannelCredentials object');\r\n        }\r\n        if (options) {\r\n            if (typeof options !== 'object') {\r\n                throw new TypeError('Channel options must be an object');\r\n            }\r\n        }\r\n        this.originalTarget = target;\r\n        const originalTargetUri = (0, uri_parser_1.parseUri)(target);\r\n        if (originalTargetUri === null) {\r\n            throw new Error(`Could not parse target name \"${target}\"`);\r\n        }\r\n        /* This ensures that the target has a scheme that is registered with the\r\n         * resolver */\r\n        const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);\r\n        if (defaultSchemeMapResult === null) {\r\n            throw new Error(`Could not find a default scheme for target name \"${target}\"`);\r\n        }\r\n        this.callRefTimer = setInterval(() => { }, MAX_TIMEOUT_TIME);\r\n        (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        if (this.options['grpc.enable_channelz'] === 0) {\r\n            this.channelzEnabled = false;\r\n        }\r\n        this.channelzTrace = new channelz_1.ChannelzTrace();\r\n        this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, () => this.getChannelzInfo(), this.channelzEnabled);\r\n        if (this.channelzEnabled) {\r\n            this.channelzTrace.addTrace('CT_INFO', 'Channel created');\r\n        }\r\n        if (this.options['grpc.default_authority']) {\r\n            this.defaultAuthority = this.options['grpc.default_authority'];\r\n        }\r\n        else {\r\n            this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);\r\n        }\r\n        const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);\r\n        this.target = proxyMapResult.target;\r\n        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\r\n        /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\r\n         * the grpc.use_local_subchannel_pool channel option means. */\r\n        this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_c = options['grpc.use_local_subchannel_pool']) !== null && _c !== void 0 ? _c : 0) === 0);\r\n        this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_d = options['grpc.retry_buffer_size']) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_e = options['grpc.per_rpc_retry_buffer_size']) !== null && _e !== void 0 ? _e : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);\r\n        this.keepaliveTime = (_f = options['grpc.keepalive_time_ms']) !== null && _f !== void 0 ? _f : -1;\r\n        this.idleTimeoutMs = Math.max((_g = options['grpc.client_idle_timeout_ms']) !== null && _g !== void 0 ? _g : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);\r\n        const channelControlHelper = {\r\n            createSubchannel: (subchannelAddress, subchannelArgs) => {\r\n                const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);\r\n                subchannel.throttleKeepalive(this.keepaliveTime);\r\n                if (this.channelzEnabled) {\r\n                    this.channelzTrace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());\r\n                }\r\n                const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\r\n                this.wrappedSubchannels.add(wrappedSubchannel);\r\n                return wrappedSubchannel;\r\n            },\r\n            updateState: (connectivityState, picker) => {\r\n                this.currentPicker = picker;\r\n                const queueCopy = this.pickQueue.slice();\r\n                this.pickQueue = [];\r\n                if (queueCopy.length > 0) {\r\n                    this.callRefTimerUnref();\r\n                }\r\n                for (const call of queueCopy) {\r\n                    call.doPick();\r\n                }\r\n                this.updateState(connectivityState);\r\n            },\r\n            requestReresolution: () => {\r\n                // This should never be called.\r\n                throw new Error('Resolving load balancer should never call requestReresolution');\r\n            },\r\n            addChannelzChild: (child) => {\r\n                if (this.channelzEnabled) {\r\n                    this.childrenTracker.refChild(child);\r\n                }\r\n            },\r\n            removeChannelzChild: (child) => {\r\n                if (this.channelzEnabled) {\r\n                    this.childrenTracker.unrefChild(child);\r\n                }\r\n            },\r\n        };\r\n        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options, (serviceConfig, configSelector) => {\r\n            if (serviceConfig.retryThrottling) {\r\n                RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\r\n            }\r\n            else {\r\n                RETRY_THROTTLER_MAP.delete(this.getTarget());\r\n            }\r\n            if (this.channelzEnabled) {\r\n                this.channelzTrace.addTrace('CT_INFO', 'Address resolution succeeded');\r\n            }\r\n            this.configSelector = configSelector;\r\n            this.currentResolutionError = null;\r\n            /* We process the queue asynchronously to ensure that the corresponding\r\n             * load balancer update has completed. */\r\n            process.nextTick(() => {\r\n                const localQueue = this.configSelectionQueue;\r\n                this.configSelectionQueue = [];\r\n                if (localQueue.length > 0) {\r\n                    this.callRefTimerUnref();\r\n                }\r\n                for (const call of localQueue) {\r\n                    call.getConfig();\r\n                }\r\n            });\r\n        }, status => {\r\n            if (this.channelzEnabled) {\r\n                this.channelzTrace.addTrace('CT_WARNING', 'Address resolution failed with code ' +\r\n                    status.code +\r\n                    ' and details \"' +\r\n                    status.details +\r\n                    '\"');\r\n            }\r\n            if (this.configSelectionQueue.length > 0) {\r\n                this.trace('Name resolution failed with calls queued for config selection');\r\n            }\r\n            if (this.configSelector === null) {\r\n                this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), { metadata: status.metadata });\r\n            }\r\n            const localQueue = this.configSelectionQueue;\r\n            this.configSelectionQueue = [];\r\n            if (localQueue.length > 0) {\r\n                this.callRefTimerUnref();\r\n            }\r\n            for (const call of localQueue) {\r\n                call.reportResolverError(status);\r\n            }\r\n        });\r\n        this.filterStackFactory = new filter_stack_1.FilterStackFactory([\r\n            new compression_filter_1.CompressionFilterFactory(this, this.options),\r\n        ]);\r\n        this.trace('Channel constructed with options ' +\r\n            JSON.stringify(options, undefined, 2));\r\n        const error = new Error();\r\n        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'channel_stacktrace', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            'Channel constructed \\n' +\r\n            ((_h = error.stack) === null || _h === void 0 ? void 0 : _h.substring(error.stack.indexOf('\\n') + 1)));\r\n        this.lastActivityTimestamp = new Date();\r\n    }\r\n    getChannelzInfo() {\r\n        return {\r\n            target: this.originalTarget,\r\n            state: this.connectivityState,\r\n            trace: this.channelzTrace,\r\n            callTracker: this.callTracker,\r\n            children: this.childrenTracker.getChildLists(),\r\n        };\r\n    }\r\n    trace(text, verbosityOverride) {\r\n        (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + text);\r\n    }\r\n    callRefTimerRef() {\r\n        var _a, _b, _c, _d;\r\n        // If the hasRef function does not exist, always run the code\r\n        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\r\n            this.trace('callRefTimer.ref | configSelectionQueue.length=' +\r\n                this.configSelectionQueue.length +\r\n                ' pickQueue.length=' +\r\n                this.pickQueue.length);\r\n            (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\r\n        }\r\n    }\r\n    callRefTimerUnref() {\r\n        var _a, _b;\r\n        // If the hasRef function does not exist, always run the code\r\n        if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {\r\n            this.trace('callRefTimer.unref | configSelectionQueue.length=' +\r\n                this.configSelectionQueue.length +\r\n                ' pickQueue.length=' +\r\n                this.pickQueue.length);\r\n            (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    }\r\n    removeConnectivityStateWatcher(watcherObject) {\r\n        const watcherIndex = this.connectivityStateWatchers.findIndex(value => value === watcherObject);\r\n        if (watcherIndex >= 0) {\r\n            this.connectivityStateWatchers.splice(watcherIndex, 1);\r\n        }\r\n    }\r\n    updateState(newState) {\r\n        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'connectivity_state', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            (0, uri_parser_1.uriToString)(this.target) +\r\n            ' ' +\r\n            connectivity_state_1.ConnectivityState[this.connectivityState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[newState]);\r\n        if (this.channelzEnabled) {\r\n            this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\r\n        }\r\n        this.connectivityState = newState;\r\n        const watchersCopy = this.connectivityStateWatchers.slice();\r\n        for (const watcherObject of watchersCopy) {\r\n            if (newState !== watcherObject.currentState) {\r\n                if (watcherObject.timer) {\r\n                    clearTimeout(watcherObject.timer);\r\n                }\r\n                this.removeConnectivityStateWatcher(watcherObject);\r\n                watcherObject.callback();\r\n            }\r\n        }\r\n        if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n            this.currentResolutionError = null;\r\n        }\r\n    }\r\n    throttleKeepalive(newKeepaliveTime) {\r\n        if (newKeepaliveTime > this.keepaliveTime) {\r\n            this.keepaliveTime = newKeepaliveTime;\r\n            for (const wrappedSubchannel of this.wrappedSubchannels) {\r\n                wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\r\n            }\r\n        }\r\n    }\r\n    removeWrappedSubchannel(wrappedSubchannel) {\r\n        this.wrappedSubchannels.delete(wrappedSubchannel);\r\n    }\r\n    doPick(metadata, extraPickInfo) {\r\n        return this.currentPicker.pick({\r\n            metadata: metadata,\r\n            extraPickInfo: extraPickInfo,\r\n        });\r\n    }\r\n    queueCallForPick(call) {\r\n        this.pickQueue.push(call);\r\n        this.callRefTimerRef();\r\n    }\r\n    getConfig(method, metadata) {\r\n        this.resolvingLoadBalancer.exitIdle();\r\n        if (this.configSelector) {\r\n            return {\r\n                type: 'SUCCESS',\r\n                config: this.configSelector(method, metadata),\r\n            };\r\n        }\r\n        else {\r\n            if (this.currentResolutionError) {\r\n                return {\r\n                    type: 'ERROR',\r\n                    error: this.currentResolutionError,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    type: 'NONE',\r\n                };\r\n            }\r\n        }\r\n    }\r\n    queueCallForConfig(call) {\r\n        this.configSelectionQueue.push(call);\r\n        this.callRefTimerRef();\r\n    }\r\n    enterIdle() {\r\n        this.resolvingLoadBalancer.destroy();\r\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE);\r\n        this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);\r\n        if (this.idleTimer) {\r\n            clearTimeout(this.idleTimer);\r\n            this.idleTimer = null;\r\n        }\r\n    }\r\n    startIdleTimeout(timeoutMs) {\r\n        var _a, _b;\r\n        this.idleTimer = setTimeout(() => {\r\n            if (this.callCount > 0) {\r\n                /* If there is currently a call, the channel will not go idle for a\r\n                 * period of at least idleTimeoutMs, so check again after that time.\r\n                 */\r\n                this.startIdleTimeout(this.idleTimeoutMs);\r\n                return;\r\n            }\r\n            const now = new Date();\r\n            const timeSinceLastActivity = now.valueOf() - this.lastActivityTimestamp.valueOf();\r\n            if (timeSinceLastActivity >= this.idleTimeoutMs) {\r\n                this.trace('Idle timer triggered after ' +\r\n                    this.idleTimeoutMs +\r\n                    'ms of inactivity');\r\n                this.enterIdle();\r\n            }\r\n            else {\r\n                /* Whenever the timer fires with the latest activity being too recent,\r\n                 * set the timer again for the time when the time since the last\r\n                 * activity is equal to the timeout. This should result in the timer\r\n                 * firing no more than once every idleTimeoutMs/2 on average. */\r\n                this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);\r\n            }\r\n        }, timeoutMs);\r\n        (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    maybeStartIdleTimer() {\r\n        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN && !this.idleTimer) {\r\n            this.startIdleTimeout(this.idleTimeoutMs);\r\n        }\r\n    }\r\n    onCallStart() {\r\n        if (this.channelzEnabled) {\r\n            this.callTracker.addCallStarted();\r\n        }\r\n        this.callCount += 1;\r\n    }\r\n    onCallEnd(status) {\r\n        if (this.channelzEnabled) {\r\n            if (status.code === constants_1.Status.OK) {\r\n                this.callTracker.addCallSucceeded();\r\n            }\r\n            else {\r\n                this.callTracker.addCallFailed();\r\n            }\r\n        }\r\n        this.callCount -= 1;\r\n        this.lastActivityTimestamp = new Date();\r\n        this.maybeStartIdleTimer();\r\n    }\r\n    createLoadBalancingCall(callConfig, method, host, credentials, deadline) {\r\n        const callNumber = (0, call_number_1.getNextCallNumber)();\r\n        this.trace('createLoadBalancingCall [' + callNumber + '] method=\"' + method + '\"');\r\n        return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\r\n    }\r\n    createRetryingCall(callConfig, method, host, credentials, deadline) {\r\n        const callNumber = (0, call_number_1.getNextCallNumber)();\r\n        this.trace('createRetryingCall [' + callNumber + '] method=\"' + method + '\"');\r\n        return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));\r\n    }\r\n    createInnerCall(callConfig, method, host, credentials, deadline) {\r\n        // Create a RetryingCall if retries are enabled\r\n        if (this.options['grpc.enable_retries'] === 0) {\r\n            return this.createLoadBalancingCall(callConfig, method, host, credentials, deadline);\r\n        }\r\n        else {\r\n            return this.createRetryingCall(callConfig, method, host, credentials, deadline);\r\n        }\r\n    }\r\n    createResolvingCall(method, deadline, host, parentCall, propagateFlags) {\r\n        const callNumber = (0, call_number_1.getNextCallNumber)();\r\n        this.trace('createResolvingCall [' +\r\n            callNumber +\r\n            '] method=\"' +\r\n            method +\r\n            '\", deadline=' +\r\n            (0, deadline_1.deadlineToString)(deadline));\r\n        const finalOptions = {\r\n            deadline: deadline,\r\n            flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\r\n            host: host !== null && host !== void 0 ? host : this.defaultAuthority,\r\n            parentCall: parentCall,\r\n        };\r\n        const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), this.credentials._getCallCredentials(), callNumber);\r\n        this.onCallStart();\r\n        call.addStatusWatcher(status => {\r\n            this.onCallEnd(status);\r\n        });\r\n        return call;\r\n    }\r\n    close() {\r\n        this.resolvingLoadBalancer.destroy();\r\n        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\r\n        clearInterval(this.callRefTimer);\r\n        if (this.idleTimer) {\r\n            clearTimeout(this.idleTimer);\r\n        }\r\n        if (this.channelzEnabled) {\r\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n        }\r\n        this.subchannelPool.unrefUnusedSubchannels();\r\n    }\r\n    getTarget() {\r\n        return (0, uri_parser_1.uriToString)(this.target);\r\n    }\r\n    getConnectivityState(tryToConnect) {\r\n        const connectivityState = this.connectivityState;\r\n        if (tryToConnect) {\r\n            this.resolvingLoadBalancer.exitIdle();\r\n            this.lastActivityTimestamp = new Date();\r\n            this.maybeStartIdleTimer();\r\n        }\r\n        return connectivityState;\r\n    }\r\n    watchConnectivityState(currentState, deadline, callback) {\r\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\r\n            throw new Error('Channel has been shut down');\r\n        }\r\n        let timer = null;\r\n        if (deadline !== Infinity) {\r\n            const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\r\n            const now = new Date();\r\n            if (deadline === -Infinity || deadlineDate <= now) {\r\n                process.nextTick(callback, new Error('Deadline passed without connectivity state change'));\r\n                return;\r\n            }\r\n            timer = setTimeout(() => {\r\n                this.removeConnectivityStateWatcher(watcherObject);\r\n                callback(new Error('Deadline passed without connectivity state change'));\r\n            }, deadlineDate.getTime() - now.getTime());\r\n        }\r\n        const watcherObject = {\r\n            currentState,\r\n            callback,\r\n            timer,\r\n        };\r\n        this.connectivityStateWatchers.push(watcherObject);\r\n    }\r\n    /**\r\n     * Get the channelz reference object for this channel. The returned value is\r\n     * garbage if channelz is disabled for this channel.\r\n     * @returns\r\n     */\r\n    getChannelzRef() {\r\n        return this.channelzRef;\r\n    }\r\n    createCall(method, deadline, host, parentCall, propagateFlags) {\r\n        if (typeof method !== 'string') {\r\n            throw new TypeError('Channel#createCall: method must be a string');\r\n        }\r\n        if (!(typeof deadline === 'number' || deadline instanceof Date)) {\r\n            throw new TypeError('Channel#createCall: deadline must be a number or Date');\r\n        }\r\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\r\n            throw new Error('Channel has been shut down');\r\n        }\r\n        return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\r\n    }\r\n}\r\nexports.InternalChannel = InternalChannel;\r\n//# sourceMappingURL=internal-channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2020 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChildLoadBalancerHandler = void 0;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst TYPE_NAME = 'child_load_balancer_helper';\r\nclass ChildLoadBalancerHandler {\r\n    constructor(channelControlHelper) {\r\n        this.channelControlHelper = channelControlHelper;\r\n        this.currentChild = null;\r\n        this.pendingChild = null;\r\n        this.latestConfig = null;\r\n        this.ChildPolicyHelper = class {\r\n            constructor(parent) {\r\n                this.parent = parent;\r\n                this.child = null;\r\n            }\r\n            createSubchannel(subchannelAddress, subchannelArgs) {\r\n                return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\r\n            }\r\n            updateState(connectivityState, picker) {\r\n                var _a;\r\n                if (this.calledByPendingChild()) {\r\n                    if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {\r\n                        return;\r\n                    }\r\n                    (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();\r\n                    this.parent.currentChild = this.parent.pendingChild;\r\n                    this.parent.pendingChild = null;\r\n                }\r\n                else if (!this.calledByCurrentChild()) {\r\n                    return;\r\n                }\r\n                this.parent.channelControlHelper.updateState(connectivityState, picker);\r\n            }\r\n            requestReresolution() {\r\n                var _a;\r\n                const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;\r\n                if (this.child === latestChild) {\r\n                    this.parent.channelControlHelper.requestReresolution();\r\n                }\r\n            }\r\n            setChild(newChild) {\r\n                this.child = newChild;\r\n            }\r\n            addChannelzChild(child) {\r\n                this.parent.channelControlHelper.addChannelzChild(child);\r\n            }\r\n            removeChannelzChild(child) {\r\n                this.parent.channelControlHelper.removeChannelzChild(child);\r\n            }\r\n            calledByPendingChild() {\r\n                return this.child === this.parent.pendingChild;\r\n            }\r\n            calledByCurrentChild() {\r\n                return this.child === this.parent.currentChild;\r\n            }\r\n        };\r\n    }\r\n    configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {\r\n        return oldConfig.getLoadBalancerName() !== newConfig.getLoadBalancerName();\r\n    }\r\n    /**\r\n     * Prerequisites: lbConfig !== null and lbConfig.name is registered\r\n     * @param addressList\r\n     * @param lbConfig\r\n     * @param attributes\r\n     */\r\n    updateAddressList(addressList, lbConfig, attributes) {\r\n        let childToUpdate;\r\n        if (this.currentChild === null ||\r\n            this.latestConfig === null ||\r\n            this.configUpdateRequiresNewPolicyInstance(this.latestConfig, lbConfig)) {\r\n            const newHelper = new this.ChildPolicyHelper(this);\r\n            const newChild = (0, load_balancer_1.createLoadBalancer)(lbConfig, newHelper);\r\n            newHelper.setChild(newChild);\r\n            if (this.currentChild === null) {\r\n                this.currentChild = newChild;\r\n                childToUpdate = this.currentChild;\r\n            }\r\n            else {\r\n                if (this.pendingChild) {\r\n                    this.pendingChild.destroy();\r\n                }\r\n                this.pendingChild = newChild;\r\n                childToUpdate = this.pendingChild;\r\n            }\r\n        }\r\n        else {\r\n            if (this.pendingChild === null) {\r\n                childToUpdate = this.currentChild;\r\n            }\r\n            else {\r\n                childToUpdate = this.pendingChild;\r\n            }\r\n        }\r\n        this.latestConfig = lbConfig;\r\n        childToUpdate.updateAddressList(addressList, lbConfig, attributes);\r\n    }\r\n    exitIdle() {\r\n        if (this.currentChild) {\r\n            this.currentChild.exitIdle();\r\n            if (this.pendingChild) {\r\n                this.pendingChild.exitIdle();\r\n            }\r\n        }\r\n    }\r\n    resetBackoff() {\r\n        if (this.currentChild) {\r\n            this.currentChild.resetBackoff();\r\n            if (this.pendingChild) {\r\n                this.pendingChild.resetBackoff();\r\n            }\r\n        }\r\n    }\r\n    destroy() {\r\n        /* Note: state updates are only propagated from the child balancer if that\r\n         * object is equal to this.currentChild or this.pendingChild. Since this\r\n         * function sets both of those to null, no further state updates will\r\n         * occur after this function returns. */\r\n        if (this.currentChild) {\r\n            this.currentChild.destroy();\r\n            this.currentChild = null;\r\n        }\r\n        if (this.pendingChild) {\r\n            this.pendingChild.destroy();\r\n            this.pendingChild = null;\r\n        }\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.ChildLoadBalancerHandler = ChildLoadBalancerHandler;\r\n//# sourceMappingURL=load-balancer-child-handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = exports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst duration_1 = __webpack_require__(/*! ./duration */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\r\nconst experimental_1 = __webpack_require__(/*! ./experimental */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'outlier_detection';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst TYPE_NAME = 'outlier_detection';\r\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : 'true') === 'true';\r\nconst defaultSuccessRateEjectionConfig = {\r\n    stdev_factor: 1900,\r\n    enforcement_percentage: 100,\r\n    minimum_hosts: 5,\r\n    request_volume: 100,\r\n};\r\nconst defaultFailurePercentageEjectionConfig = {\r\n    threshold: 85,\r\n    enforcement_percentage: 100,\r\n    minimum_hosts: 5,\r\n    request_volume: 50,\r\n};\r\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\r\n    if (fieldName in obj && typeof obj[fieldName] !== expectedType) {\r\n        const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\r\n        throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\r\n    }\r\n}\r\nfunction validatePositiveDuration(obj, fieldName, objectName) {\r\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\r\n    if (fieldName in obj) {\r\n        if (!(0, duration_1.isDuration)(obj[fieldName])) {\r\n            throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\r\n        }\r\n        if (!(obj[fieldName].seconds >= 0 &&\r\n            obj[fieldName].seconds <= 315576000000 &&\r\n            obj[fieldName].nanos >= 0 &&\r\n            obj[fieldName].nanos <= 999999999)) {\r\n            throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\r\n        }\r\n    }\r\n}\r\nfunction validatePercentage(obj, fieldName, objectName) {\r\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\r\n    validateFieldType(obj, fieldName, 'number', objectName);\r\n    if (fieldName in obj && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\r\n        throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\r\n    }\r\n}\r\nclass OutlierDetectionLoadBalancingConfig {\r\n    constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {\r\n        this.childPolicy = childPolicy;\r\n        if (childPolicy.length > 0 &&\r\n            childPolicy[0].getLoadBalancerName() === 'pick_first') {\r\n            throw new Error('outlier_detection LB policy cannot have a pick_first child policy');\r\n        }\r\n        this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\r\n        this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\r\n        this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\r\n        this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\r\n        this.successRateEjection = successRateEjection\r\n            ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\r\n        this.failurePercentageEjection = failurePercentageEjection\r\n            ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\r\n    }\r\n    getLoadBalancerName() {\r\n        return TYPE_NAME;\r\n    }\r\n    toJsonObject() {\r\n        return {\r\n            interval: (0, duration_1.msToDuration)(this.intervalMs),\r\n            base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),\r\n            max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),\r\n            max_ejection_percent: this.maxEjectionPercent,\r\n            success_rate_ejection: this.successRateEjection,\r\n            failure_percentage_ejection: this.failurePercentageEjection,\r\n            child_policy: this.childPolicy.map(policy => policy.toJsonObject()),\r\n        };\r\n    }\r\n    getIntervalMs() {\r\n        return this.intervalMs;\r\n    }\r\n    getBaseEjectionTimeMs() {\r\n        return this.baseEjectionTimeMs;\r\n    }\r\n    getMaxEjectionTimeMs() {\r\n        return this.maxEjectionTimeMs;\r\n    }\r\n    getMaxEjectionPercent() {\r\n        return this.maxEjectionPercent;\r\n    }\r\n    getSuccessRateEjectionConfig() {\r\n        return this.successRateEjection;\r\n    }\r\n    getFailurePercentageEjectionConfig() {\r\n        return this.failurePercentageEjection;\r\n    }\r\n    getChildPolicy() {\r\n        return this.childPolicy;\r\n    }\r\n    copyWithChildPolicy(childPolicy) {\r\n        return new OutlierDetectionLoadBalancingConfig(this.intervalMs, this.baseEjectionTimeMs, this.maxEjectionTimeMs, this.maxEjectionPercent, this.successRateEjection, this.failurePercentageEjection, childPolicy);\r\n    }\r\n    static createFromJson(obj) {\r\n        var _a;\r\n        validatePositiveDuration(obj, 'interval');\r\n        validatePositiveDuration(obj, 'base_ejection_time');\r\n        validatePositiveDuration(obj, 'max_ejection_time');\r\n        validatePercentage(obj, 'max_ejection_percent');\r\n        if ('success_rate_ejection' in obj) {\r\n            if (typeof obj.success_rate_ejection !== 'object') {\r\n                throw new Error('outlier detection config success_rate_ejection must be an object');\r\n            }\r\n            validateFieldType(obj.success_rate_ejection, 'stdev_factor', 'number', 'success_rate_ejection');\r\n            validatePercentage(obj.success_rate_ejection, 'enforcement_percentage', 'success_rate_ejection');\r\n            validateFieldType(obj.success_rate_ejection, 'minimum_hosts', 'number', 'success_rate_ejection');\r\n            validateFieldType(obj.success_rate_ejection, 'request_volume', 'number', 'success_rate_ejection');\r\n        }\r\n        if ('failure_percentage_ejection' in obj) {\r\n            if (typeof obj.failure_percentage_ejection !== 'object') {\r\n                throw new Error('outlier detection config failure_percentage_ejection must be an object');\r\n            }\r\n            validatePercentage(obj.failure_percentage_ejection, 'threshold', 'failure_percentage_ejection');\r\n            validatePercentage(obj.failure_percentage_ejection, 'enforcement_percentage', 'failure_percentage_ejection');\r\n            validateFieldType(obj.failure_percentage_ejection, 'minimum_hosts', 'number', 'failure_percentage_ejection');\r\n            validateFieldType(obj.failure_percentage_ejection, 'request_volume', 'number', 'failure_percentage_ejection');\r\n        }\r\n        return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, obj.child_policy.map(load_balancer_1.validateLoadBalancingConfig));\r\n    }\r\n}\r\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\r\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\r\n    constructor(childSubchannel, mapEntry) {\r\n        super(childSubchannel);\r\n        this.mapEntry = mapEntry;\r\n        this.stateListeners = [];\r\n        this.ejected = false;\r\n        this.refCount = 0;\r\n        this.childSubchannelState = childSubchannel.getConnectivityState();\r\n        childSubchannel.addConnectivityStateListener((subchannel, previousState, newState, keepaliveTime) => {\r\n            this.childSubchannelState = newState;\r\n            if (!this.ejected) {\r\n                for (const listener of this.stateListeners) {\r\n                    listener(this, previousState, newState, keepaliveTime);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    getConnectivityState() {\r\n        if (this.ejected) {\r\n            return connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\r\n        }\r\n        else {\r\n            return this.childSubchannelState;\r\n        }\r\n    }\r\n    /**\r\n     * Add a listener function to be called whenever the wrapper's\r\n     * connectivity state changes.\r\n     * @param listener\r\n     */\r\n    addConnectivityStateListener(listener) {\r\n        this.stateListeners.push(listener);\r\n    }\r\n    /**\r\n     * Remove a listener previously added with `addConnectivityStateListener`\r\n     * @param listener A reference to a function previously passed to\r\n     *     `addConnectivityStateListener`\r\n     */\r\n    removeConnectivityStateListener(listener) {\r\n        const listenerIndex = this.stateListeners.indexOf(listener);\r\n        if (listenerIndex > -1) {\r\n            this.stateListeners.splice(listenerIndex, 1);\r\n        }\r\n    }\r\n    ref() {\r\n        this.child.ref();\r\n        this.refCount += 1;\r\n    }\r\n    unref() {\r\n        this.child.unref();\r\n        this.refCount -= 1;\r\n        if (this.refCount <= 0) {\r\n            if (this.mapEntry) {\r\n                const index = this.mapEntry.subchannelWrappers.indexOf(this);\r\n                if (index >= 0) {\r\n                    this.mapEntry.subchannelWrappers.splice(index, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    eject() {\r\n        this.ejected = true;\r\n        for (const listener of this.stateListeners) {\r\n            listener(this, this.childSubchannelState, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, -1);\r\n        }\r\n    }\r\n    uneject() {\r\n        this.ejected = false;\r\n        for (const listener of this.stateListeners) {\r\n            listener(this, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, this.childSubchannelState, -1);\r\n        }\r\n    }\r\n    getMapEntry() {\r\n        return this.mapEntry;\r\n    }\r\n    getWrappedSubchannel() {\r\n        return this.child;\r\n    }\r\n}\r\nfunction createEmptyBucket() {\r\n    return {\r\n        success: 0,\r\n        failure: 0,\r\n    };\r\n}\r\nclass CallCounter {\r\n    constructor() {\r\n        this.activeBucket = createEmptyBucket();\r\n        this.inactiveBucket = createEmptyBucket();\r\n    }\r\n    addSuccess() {\r\n        this.activeBucket.success += 1;\r\n    }\r\n    addFailure() {\r\n        this.activeBucket.failure += 1;\r\n    }\r\n    switchBuckets() {\r\n        this.inactiveBucket = this.activeBucket;\r\n        this.activeBucket = createEmptyBucket();\r\n    }\r\n    getLastSuccesses() {\r\n        return this.inactiveBucket.success;\r\n    }\r\n    getLastFailures() {\r\n        return this.inactiveBucket.failure;\r\n    }\r\n}\r\nclass OutlierDetectionPicker {\r\n    constructor(wrappedPicker, countCalls) {\r\n        this.wrappedPicker = wrappedPicker;\r\n        this.countCalls = countCalls;\r\n    }\r\n    pick(pickArgs) {\r\n        const wrappedPick = this.wrappedPicker.pick(pickArgs);\r\n        if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\r\n            const subchannelWrapper = wrappedPick.subchannel;\r\n            const mapEntry = subchannelWrapper.getMapEntry();\r\n            if (mapEntry) {\r\n                let onCallEnded = wrappedPick.onCallEnded;\r\n                if (this.countCalls) {\r\n                    onCallEnded = statusCode => {\r\n                        var _a;\r\n                        if (statusCode === constants_1.Status.OK) {\r\n                            mapEntry.counter.addSuccess();\r\n                        }\r\n                        else {\r\n                            mapEntry.counter.addFailure();\r\n                        }\r\n                        (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);\r\n                    };\r\n                }\r\n                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel(), onCallEnded: onCallEnded });\r\n            }\r\n            else {\r\n                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel() });\r\n            }\r\n        }\r\n        else {\r\n            return wrappedPick;\r\n        }\r\n    }\r\n}\r\nclass OutlierDetectionLoadBalancer {\r\n    constructor(channelControlHelper) {\r\n        this.addressMap = new Map();\r\n        this.latestConfig = null;\r\n        this.timerStartTime = null;\r\n        this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {\r\n            createSubchannel: (subchannelAddress, subchannelArgs) => {\r\n                const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\r\n                const mapEntry = this.addressMap.get((0, subchannel_address_1.subchannelAddressToString)(subchannelAddress));\r\n                const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\r\n                if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\r\n                    // If the address is ejected, propagate that to the new subchannel wrapper\r\n                    subchannelWrapper.eject();\r\n                }\r\n                mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\r\n                return subchannelWrapper;\r\n            },\r\n            updateState: (connectivityState, picker) => {\r\n                if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\r\n                    channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()));\r\n                }\r\n                else {\r\n                    channelControlHelper.updateState(connectivityState, picker);\r\n                }\r\n            },\r\n        }));\r\n        this.ejectionTimer = setInterval(() => { }, 0);\r\n        clearInterval(this.ejectionTimer);\r\n    }\r\n    isCountingEnabled() {\r\n        return (this.latestConfig !== null &&\r\n            (this.latestConfig.getSuccessRateEjectionConfig() !== null ||\r\n                this.latestConfig.getFailurePercentageEjectionConfig() !== null));\r\n    }\r\n    getCurrentEjectionPercent() {\r\n        let ejectionCount = 0;\r\n        for (const mapEntry of this.addressMap.values()) {\r\n            if (mapEntry.currentEjectionTimestamp !== null) {\r\n                ejectionCount += 1;\r\n            }\r\n        }\r\n        return (ejectionCount * 100) / this.addressMap.size;\r\n    }\r\n    runSuccessRateCheck(ejectionTimestamp) {\r\n        if (!this.latestConfig) {\r\n            return;\r\n        }\r\n        const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\r\n        if (!successRateConfig) {\r\n            return;\r\n        }\r\n        trace('Running success rate check');\r\n        // Step 1\r\n        const targetRequestVolume = successRateConfig.request_volume;\r\n        let addresesWithTargetVolume = 0;\r\n        const successRates = [];\r\n        for (const [address, mapEntry] of this.addressMap) {\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            trace('Stats for ' +\r\n                address +\r\n                ': successes=' +\r\n                successes +\r\n                ' failures=' +\r\n                failures +\r\n                ' targetRequestVolume=' +\r\n                targetRequestVolume);\r\n            if (successes + failures >= targetRequestVolume) {\r\n                addresesWithTargetVolume += 1;\r\n                successRates.push(successes / (successes + failures));\r\n            }\r\n        }\r\n        trace('Found ' +\r\n            addresesWithTargetVolume +\r\n            ' success rate candidates; currentEjectionPercent=' +\r\n            this.getCurrentEjectionPercent() +\r\n            ' successRates=[' +\r\n            successRates +\r\n            ']');\r\n        if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\r\n            return;\r\n        }\r\n        // Step 2\r\n        const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;\r\n        let successRateDeviationSum = 0;\r\n        for (const rate of successRates) {\r\n            const deviation = rate - successRateMean;\r\n            successRateDeviationSum += deviation * deviation;\r\n        }\r\n        const successRateVariance = successRateDeviationSum / successRates.length;\r\n        const successRateStdev = Math.sqrt(successRateVariance);\r\n        const ejectionThreshold = successRateMean -\r\n            successRateStdev * (successRateConfig.stdev_factor / 1000);\r\n        trace('stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold);\r\n        // Step 3\r\n        for (const [address, mapEntry] of this.addressMap.entries()) {\r\n            // Step 3.i\r\n            if (this.getCurrentEjectionPercent() >=\r\n                this.latestConfig.getMaxEjectionPercent()) {\r\n                break;\r\n            }\r\n            // Step 3.ii\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            if (successes + failures < targetRequestVolume) {\r\n                continue;\r\n            }\r\n            // Step 3.iii\r\n            const successRate = successes / (successes + failures);\r\n            trace('Checking candidate ' + address + ' successRate=' + successRate);\r\n            if (successRate < ejectionThreshold) {\r\n                const randomNumber = Math.random() * 100;\r\n                trace('Candidate ' +\r\n                    address +\r\n                    ' randomNumber=' +\r\n                    randomNumber +\r\n                    ' enforcement_percentage=' +\r\n                    successRateConfig.enforcement_percentage);\r\n                if (randomNumber < successRateConfig.enforcement_percentage) {\r\n                    trace('Ejecting candidate ' + address);\r\n                    this.eject(mapEntry, ejectionTimestamp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    runFailurePercentageCheck(ejectionTimestamp) {\r\n        if (!this.latestConfig) {\r\n            return;\r\n        }\r\n        const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\r\n        if (!failurePercentageConfig) {\r\n            return;\r\n        }\r\n        trace('Running failure percentage check. threshold=' +\r\n            failurePercentageConfig.threshold +\r\n            ' request volume threshold=' +\r\n            failurePercentageConfig.request_volume);\r\n        // Step 1\r\n        let addressesWithTargetVolume = 0;\r\n        for (const mapEntry of this.addressMap.values()) {\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            if (successes + failures >= failurePercentageConfig.request_volume) {\r\n                addressesWithTargetVolume += 1;\r\n            }\r\n        }\r\n        if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\r\n            return;\r\n        }\r\n        // Step 2\r\n        for (const [address, mapEntry] of this.addressMap.entries()) {\r\n            // Step 2.i\r\n            if (this.getCurrentEjectionPercent() >=\r\n                this.latestConfig.getMaxEjectionPercent()) {\r\n                break;\r\n            }\r\n            // Step 2.ii\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            trace('Candidate successes=' + successes + ' failures=' + failures);\r\n            if (successes + failures < failurePercentageConfig.request_volume) {\r\n                continue;\r\n            }\r\n            // Step 2.iii\r\n            const failurePercentage = (failures * 100) / (failures + successes);\r\n            if (failurePercentage > failurePercentageConfig.threshold) {\r\n                const randomNumber = Math.random() * 100;\r\n                trace('Candidate ' +\r\n                    address +\r\n                    ' randomNumber=' +\r\n                    randomNumber +\r\n                    ' enforcement_percentage=' +\r\n                    failurePercentageConfig.enforcement_percentage);\r\n                if (randomNumber < failurePercentageConfig.enforcement_percentage) {\r\n                    trace('Ejecting candidate ' + address);\r\n                    this.eject(mapEntry, ejectionTimestamp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    eject(mapEntry, ejectionTimestamp) {\r\n        mapEntry.currentEjectionTimestamp = new Date();\r\n        mapEntry.ejectionTimeMultiplier += 1;\r\n        for (const subchannelWrapper of mapEntry.subchannelWrappers) {\r\n            subchannelWrapper.eject();\r\n        }\r\n    }\r\n    uneject(mapEntry) {\r\n        mapEntry.currentEjectionTimestamp = null;\r\n        for (const subchannelWrapper of mapEntry.subchannelWrappers) {\r\n            subchannelWrapper.uneject();\r\n        }\r\n    }\r\n    switchAllBuckets() {\r\n        for (const mapEntry of this.addressMap.values()) {\r\n            mapEntry.counter.switchBuckets();\r\n        }\r\n    }\r\n    startTimer(delayMs) {\r\n        var _a, _b;\r\n        this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\r\n        (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    runChecks() {\r\n        const ejectionTimestamp = new Date();\r\n        trace('Ejection timer running');\r\n        this.switchAllBuckets();\r\n        if (!this.latestConfig) {\r\n            return;\r\n        }\r\n        this.timerStartTime = ejectionTimestamp;\r\n        this.startTimer(this.latestConfig.getIntervalMs());\r\n        this.runSuccessRateCheck(ejectionTimestamp);\r\n        this.runFailurePercentageCheck(ejectionTimestamp);\r\n        for (const [address, mapEntry] of this.addressMap.entries()) {\r\n            if (mapEntry.currentEjectionTimestamp === null) {\r\n                if (mapEntry.ejectionTimeMultiplier > 0) {\r\n                    mapEntry.ejectionTimeMultiplier -= 1;\r\n                }\r\n            }\r\n            else {\r\n                const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\r\n                const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\r\n                const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\r\n                returnTime.setMilliseconds(returnTime.getMilliseconds() +\r\n                    Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\r\n                if (returnTime < new Date()) {\r\n                    trace('Unejecting ' + address);\r\n                    this.uneject(mapEntry);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateAddressList(addressList, lbConfig, attributes) {\r\n        if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\r\n            return;\r\n        }\r\n        const subchannelAddresses = new Set();\r\n        for (const address of addressList) {\r\n            subchannelAddresses.add((0, subchannel_address_1.subchannelAddressToString)(address));\r\n        }\r\n        for (const address of subchannelAddresses) {\r\n            if (!this.addressMap.has(address)) {\r\n                trace('Adding map entry for ' + address);\r\n                this.addressMap.set(address, {\r\n                    counter: new CallCounter(),\r\n                    currentEjectionTimestamp: null,\r\n                    ejectionTimeMultiplier: 0,\r\n                    subchannelWrappers: [],\r\n                });\r\n            }\r\n        }\r\n        for (const key of this.addressMap.keys()) {\r\n            if (!subchannelAddresses.has(key)) {\r\n                trace('Removing map entry for ' + key);\r\n                this.addressMap.delete(key);\r\n            }\r\n        }\r\n        const childPolicy = (0, load_balancer_1.getFirstUsableConfig)(lbConfig.getChildPolicy(), true);\r\n        this.childBalancer.updateAddressList(addressList, childPolicy, attributes);\r\n        if (lbConfig.getSuccessRateEjectionConfig() ||\r\n            lbConfig.getFailurePercentageEjectionConfig()) {\r\n            if (this.timerStartTime) {\r\n                trace('Previous timer existed. Replacing timer');\r\n                clearTimeout(this.ejectionTimer);\r\n                const remainingDelay = lbConfig.getIntervalMs() -\r\n                    (new Date().getTime() - this.timerStartTime.getTime());\r\n                this.startTimer(remainingDelay);\r\n            }\r\n            else {\r\n                trace('Starting new timer');\r\n                this.timerStartTime = new Date();\r\n                this.startTimer(lbConfig.getIntervalMs());\r\n                this.switchAllBuckets();\r\n            }\r\n        }\r\n        else {\r\n            trace('Counting disabled. Cancelling timer.');\r\n            this.timerStartTime = null;\r\n            clearTimeout(this.ejectionTimer);\r\n            for (const mapEntry of this.addressMap.values()) {\r\n                this.uneject(mapEntry);\r\n                mapEntry.ejectionTimeMultiplier = 0;\r\n            }\r\n        }\r\n        this.latestConfig = lbConfig;\r\n    }\r\n    exitIdle() {\r\n        this.childBalancer.exitIdle();\r\n    }\r\n    resetBackoff() {\r\n        this.childBalancer.resetBackoff();\r\n    }\r\n    destroy() {\r\n        clearTimeout(this.ejectionTimer);\r\n        this.childBalancer.destroy();\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\r\nfunction setup() {\r\n    if (OUTLIER_DETECTION_ENABLED) {\r\n        (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\r\n    }\r\n}\r\nexports.setup = setup;\r\n//# sourceMappingURL=load-balancer-outlier-detection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = exports.PickFirstLoadBalancer = exports.shuffled = exports.PickFirstLoadBalancingConfig = void 0;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst TRACER_NAME = 'pick_first';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst TYPE_NAME = 'pick_first';\r\n/**\r\n * Delay after starting a connection on a subchannel before starting a\r\n * connection on the next subchannel in the list, for Happy Eyeballs algorithm.\r\n */\r\nconst CONNECTION_DELAY_INTERVAL_MS = 250;\r\nclass PickFirstLoadBalancingConfig {\r\n    constructor(shuffleAddressList) {\r\n        this.shuffleAddressList = shuffleAddressList;\r\n    }\r\n    getLoadBalancerName() {\r\n        return TYPE_NAME;\r\n    }\r\n    toJsonObject() {\r\n        return {\r\n            [TYPE_NAME]: {\r\n                shuffleAddressList: this.shuffleAddressList,\r\n            },\r\n        };\r\n    }\r\n    getShuffleAddressList() {\r\n        return this.shuffleAddressList;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static createFromJson(obj) {\r\n        if ('shuffleAddressList' in obj &&\r\n            !(typeof obj.shuffleAddressList === 'boolean')) {\r\n            throw new Error('pick_first config field shuffleAddressList must be a boolean if provided');\r\n        }\r\n        return new PickFirstLoadBalancingConfig(obj.shuffleAddressList === true);\r\n    }\r\n}\r\nexports.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;\r\n/**\r\n * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the\r\n * picked subchannel.\r\n */\r\nclass PickFirstPicker {\r\n    constructor(subchannel) {\r\n        this.subchannel = subchannel;\r\n    }\r\n    pick(pickArgs) {\r\n        return {\r\n            pickResultType: picker_1.PickResultType.COMPLETE,\r\n            subchannel: this.subchannel,\r\n            status: null,\r\n            onCallStarted: null,\r\n            onCallEnded: null,\r\n        };\r\n    }\r\n}\r\n/**\r\n * Return a new array with the elements of the input array in a random order\r\n * @param list The input array\r\n * @returns A shuffled array of the elements of list\r\n */\r\nfunction shuffled(list) {\r\n    const result = list.slice();\r\n    for (let i = result.length - 1; i > 1; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = result[i];\r\n        result[i] = result[j];\r\n        result[j] = temp;\r\n    }\r\n    return result;\r\n}\r\nexports.shuffled = shuffled;\r\nclass PickFirstLoadBalancer {\r\n    /**\r\n     * Load balancer that attempts to connect to each backend in the address list\r\n     * in order, and picks the first one that connects, using it for every\r\n     * request.\r\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\r\n     *     this load balancer's owner.\r\n     */\r\n    constructor(channelControlHelper) {\r\n        this.channelControlHelper = channelControlHelper;\r\n        /**\r\n         * The list of subchannels this load balancer is currently attempting to\r\n         * connect to.\r\n         */\r\n        this.children = [];\r\n        /**\r\n         * The current connectivity state of the load balancer.\r\n         */\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        /**\r\n         * The index within the `subchannels` array of the subchannel with the most\r\n         * recently started connection attempt.\r\n         */\r\n        this.currentSubchannelIndex = 0;\r\n        /**\r\n         * The currently picked subchannel used for making calls. Populated if\r\n         * and only if the load balancer's current state is READY. In that case,\r\n         * the subchannel's current state is also READY.\r\n         */\r\n        this.currentPick = null;\r\n        /**\r\n         * Listener callback attached to each subchannel in the `subchannels` list\r\n         * while establishing a connection.\r\n         */\r\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {\r\n            this.onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage);\r\n        };\r\n        this.triedAllSubchannels = false;\r\n        /**\r\n         * The LB policy enters sticky TRANSIENT_FAILURE mode when all\r\n         * subchannels have failed to connect at least once, and it stays in that\r\n         * mode until a connection attempt is successful. While in sticky TF mode,\r\n         * the LB policy continuously attempts to connect to all of its subchannels.\r\n         */\r\n        this.stickyTransientFailureMode = false;\r\n        /**\r\n         * Indicates whether we called channelControlHelper.requestReresolution since\r\n         * the last call to updateAddressList\r\n         */\r\n        this.requestedResolutionSinceLastUpdate = false;\r\n        /**\r\n         * The most recent error reported by any subchannel as it transitioned to\r\n         * TRANSIENT_FAILURE.\r\n         */\r\n        this.lastError = null;\r\n        this.latestAddressList = null;\r\n        this.connectionDelayTimeout = setTimeout(() => { }, 0);\r\n        clearTimeout(this.connectionDelayTimeout);\r\n    }\r\n    allChildrenHaveReportedTF() {\r\n        return this.children.every(child => child.hasReportedTransientFailure);\r\n    }\r\n    calculateAndReportNewState() {\r\n        if (this.currentPick) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(this.currentPick));\r\n        }\r\n        else if (this.children.length === 0) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\r\n        }\r\n        else {\r\n            if (this.stickyTransientFailureMode) {\r\n                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({ details: `No connection established. Last error: ${this.lastError}` }));\r\n            }\r\n            else {\r\n                this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\r\n            }\r\n        }\r\n    }\r\n    requestReresolution() {\r\n        this.requestedResolutionSinceLastUpdate = true;\r\n        this.channelControlHelper.requestReresolution();\r\n    }\r\n    maybeEnterStickyTransientFailureMode() {\r\n        if (!this.allChildrenHaveReportedTF()) {\r\n            return;\r\n        }\r\n        if (!this.requestedResolutionSinceLastUpdate) {\r\n            /* Each time we get an update we reset each subchannel's\r\n             * hasReportedTransientFailure flag, so the next time we get to this\r\n             * point after that, each subchannel has reported TRANSIENT_FAILURE\r\n             * at least once since then. That is the trigger for requesting\r\n             * reresolution, whether or not the LB policy is already in sticky TF\r\n             * mode. */\r\n            this.requestReresolution();\r\n        }\r\n        if (this.stickyTransientFailureMode) {\r\n            return;\r\n        }\r\n        this.stickyTransientFailureMode = true;\r\n        for (const { subchannel } of this.children) {\r\n            subchannel.startConnecting();\r\n        }\r\n        this.calculateAndReportNewState();\r\n    }\r\n    removeCurrentPick() {\r\n        if (this.currentPick !== null) {\r\n            /* Unref can cause a state change, which can cause a change in the value\r\n             * of this.currentPick, so we hold a local reference to make sure that\r\n             * does not impact this function. */\r\n            const currentPick = this.currentPick;\r\n            this.currentPick = null;\r\n            currentPick.unref();\r\n            currentPick.removeConnectivityStateListener(this.subchannelStateListener);\r\n            this.channelControlHelper.removeChannelzChild(currentPick.getChannelzRef());\r\n        }\r\n    }\r\n    onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage) {\r\n        var _a;\r\n        if ((_a = this.currentPick) === null || _a === void 0 ? void 0 : _a.realSubchannelEquals(subchannel)) {\r\n            if (newState !== connectivity_state_1.ConnectivityState.READY) {\r\n                this.removeCurrentPick();\r\n                this.calculateAndReportNewState();\r\n                this.requestReresolution();\r\n            }\r\n            return;\r\n        }\r\n        for (const [index, child] of this.children.entries()) {\r\n            if (subchannel.realSubchannelEquals(child.subchannel)) {\r\n                if (newState === connectivity_state_1.ConnectivityState.READY) {\r\n                    this.pickSubchannel(child.subchannel);\r\n                }\r\n                if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n                    child.hasReportedTransientFailure = true;\r\n                    if (errorMessage) {\r\n                        this.lastError = errorMessage;\r\n                    }\r\n                    this.maybeEnterStickyTransientFailureMode();\r\n                    if (index === this.currentSubchannelIndex) {\r\n                        this.startNextSubchannelConnecting(index + 1);\r\n                    }\r\n                }\r\n                child.subchannel.startConnecting();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    startNextSubchannelConnecting(startIndex) {\r\n        clearTimeout(this.connectionDelayTimeout);\r\n        if (this.triedAllSubchannels) {\r\n            return;\r\n        }\r\n        for (const [index, child] of this.children.entries()) {\r\n            if (index >= startIndex) {\r\n                const subchannelState = child.subchannel.getConnectivityState();\r\n                if (subchannelState === connectivity_state_1.ConnectivityState.IDLE ||\r\n                    subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\r\n                    this.startConnecting(index);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this.triedAllSubchannels = true;\r\n        this.maybeEnterStickyTransientFailureMode();\r\n    }\r\n    /**\r\n     * Have a single subchannel in the `subchannels` list start connecting.\r\n     * @param subchannelIndex The index into the `subchannels` list.\r\n     */\r\n    startConnecting(subchannelIndex) {\r\n        var _a, _b;\r\n        clearTimeout(this.connectionDelayTimeout);\r\n        this.currentSubchannelIndex = subchannelIndex;\r\n        if (this.children[subchannelIndex].subchannel.getConnectivityState() ===\r\n            connectivity_state_1.ConnectivityState.IDLE) {\r\n            trace('Start connecting to subchannel with address ' +\r\n                this.children[subchannelIndex].subchannel.getAddress());\r\n            process.nextTick(() => {\r\n                var _a;\r\n                (_a = this.children[subchannelIndex]) === null || _a === void 0 ? void 0 : _a.subchannel.startConnecting();\r\n            });\r\n        }\r\n        this.connectionDelayTimeout = (_b = (_a = setTimeout(() => {\r\n            this.startNextSubchannelConnecting(subchannelIndex + 1);\r\n        }, CONNECTION_DELAY_INTERVAL_MS)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    pickSubchannel(subchannel) {\r\n        if (this.currentPick && subchannel.realSubchannelEquals(this.currentPick)) {\r\n            return;\r\n        }\r\n        trace('Pick subchannel with address ' + subchannel.getAddress());\r\n        this.stickyTransientFailureMode = false;\r\n        if (this.currentPick !== null) {\r\n            this.currentPick.unref();\r\n            this.channelControlHelper.removeChannelzChild(this.currentPick.getChannelzRef());\r\n            this.currentPick.removeConnectivityStateListener(this.subchannelStateListener);\r\n        }\r\n        this.currentPick = subchannel;\r\n        subchannel.ref();\r\n        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\r\n        this.resetSubchannelList();\r\n        clearTimeout(this.connectionDelayTimeout);\r\n        this.calculateAndReportNewState();\r\n    }\r\n    updateState(newState, picker) {\r\n        trace(connectivity_state_1.ConnectivityState[this.currentState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[newState]);\r\n        this.currentState = newState;\r\n        this.channelControlHelper.updateState(newState, picker);\r\n    }\r\n    resetSubchannelList() {\r\n        for (const child of this.children) {\r\n            if (!(this.currentPick && child.subchannel.realSubchannelEquals(this.currentPick))) {\r\n                /* The connectivity state listener is the same whether the subchannel\r\n                 * is in the list of children or it is the currentPick, so if it is in\r\n                 * both, removing it here would cause problems. In particular, that\r\n                 * always happens immediately after the subchannel is picked. */\r\n                child.subchannel.removeConnectivityStateListener(this.subchannelStateListener);\r\n            }\r\n            /* Refs are counted independently for the children list and the\r\n             * currentPick, so we call unref whether or not the child is the\r\n             * currentPick. Channelz child references are also refcounted, so\r\n             * removeChannelzChild can be handled the same way. */\r\n            child.subchannel.unref();\r\n            this.channelControlHelper.removeChannelzChild(child.subchannel.getChannelzRef());\r\n        }\r\n        this.currentSubchannelIndex = 0;\r\n        this.children = [];\r\n        this.triedAllSubchannels = false;\r\n        this.requestedResolutionSinceLastUpdate = false;\r\n    }\r\n    connectToAddressList(addressList) {\r\n        const newChildrenList = addressList.map(address => ({\r\n            subchannel: this.channelControlHelper.createSubchannel(address, {}),\r\n            hasReportedTransientFailure: false,\r\n        }));\r\n        /* Ref each subchannel before resetting the list, to ensure that\r\n         * subchannels shared between the list don't drop to 0 refs during the\r\n         * transition. */\r\n        for (const { subchannel } of newChildrenList) {\r\n            subchannel.ref();\r\n            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\r\n        }\r\n        this.resetSubchannelList();\r\n        this.children = newChildrenList;\r\n        for (const { subchannel } of this.children) {\r\n            subchannel.addConnectivityStateListener(this.subchannelStateListener);\r\n            if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {\r\n                this.pickSubchannel(subchannel);\r\n                return;\r\n            }\r\n        }\r\n        for (const child of this.children) {\r\n            if (child.subchannel.getConnectivityState() ===\r\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n                child.hasReportedTransientFailure = true;\r\n            }\r\n        }\r\n        this.startNextSubchannelConnecting(0);\r\n        this.calculateAndReportNewState();\r\n    }\r\n    updateAddressList(addressList, lbConfig) {\r\n        if (!(lbConfig instanceof PickFirstLoadBalancingConfig)) {\r\n            return;\r\n        }\r\n        /* Previously, an update would be discarded if it was identical to the\r\n         * previous update, to minimize churn. Now the DNS resolver is\r\n         * rate-limited, so that is less of a concern. */\r\n        if (lbConfig.getShuffleAddressList()) {\r\n            addressList = shuffled(addressList);\r\n        }\r\n        this.latestAddressList = addressList;\r\n        this.connectToAddressList(addressList);\r\n    }\r\n    exitIdle() {\r\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE && this.latestAddressList) {\r\n            this.connectToAddressList(this.latestAddressList);\r\n        }\r\n    }\r\n    resetBackoff() {\r\n        /* The pick first load balancer does not have a connection backoff, so this\r\n         * does nothing */\r\n    }\r\n    destroy() {\r\n        this.resetSubchannelList();\r\n        this.removeCurrentPick();\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.PickFirstLoadBalancer = PickFirstLoadBalancer;\r\nfunction setup() {\r\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);\r\n    (0, load_balancer_1.registerDefaultLoadBalancerType)(TYPE_NAME);\r\n}\r\nexports.setup = setup;\r\n//# sourceMappingURL=load-balancer-pick-first.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = exports.RoundRobinLoadBalancer = void 0;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst TRACER_NAME = 'round_robin';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst TYPE_NAME = 'round_robin';\r\nclass RoundRobinLoadBalancingConfig {\r\n    getLoadBalancerName() {\r\n        return TYPE_NAME;\r\n    }\r\n    constructor() { }\r\n    toJsonObject() {\r\n        return {\r\n            [TYPE_NAME]: {},\r\n        };\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static createFromJson(obj) {\r\n        return new RoundRobinLoadBalancingConfig();\r\n    }\r\n}\r\nclass RoundRobinPicker {\r\n    constructor(subchannelList, nextIndex = 0) {\r\n        this.subchannelList = subchannelList;\r\n        this.nextIndex = nextIndex;\r\n    }\r\n    pick(pickArgs) {\r\n        const pickedSubchannel = this.subchannelList[this.nextIndex];\r\n        this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;\r\n        return {\r\n            pickResultType: picker_1.PickResultType.COMPLETE,\r\n            subchannel: pickedSubchannel,\r\n            status: null,\r\n            onCallStarted: null,\r\n            onCallEnded: null,\r\n        };\r\n    }\r\n    /**\r\n     * Check what the next subchannel returned would be. Used by the load\r\n     * balancer implementation to preserve this part of the picker state if\r\n     * possible when a subchannel connects or disconnects.\r\n     */\r\n    peekNextSubchannel() {\r\n        return this.subchannelList[this.nextIndex];\r\n    }\r\n}\r\nclass RoundRobinLoadBalancer {\r\n    constructor(channelControlHelper) {\r\n        this.channelControlHelper = channelControlHelper;\r\n        this.subchannels = [];\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.currentReadyPicker = null;\r\n        this.lastError = null;\r\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {\r\n            this.calculateAndUpdateState();\r\n            if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE ||\r\n                newState === connectivity_state_1.ConnectivityState.IDLE) {\r\n                if (errorMessage) {\r\n                    this.lastError = errorMessage;\r\n                }\r\n                this.channelControlHelper.requestReresolution();\r\n                subchannel.startConnecting();\r\n            }\r\n        };\r\n    }\r\n    countSubchannelsWithState(state) {\r\n        return this.subchannels.filter(subchannel => subchannel.getConnectivityState() === state).length;\r\n    }\r\n    calculateAndUpdateState() {\r\n        if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\r\n            const readySubchannels = this.subchannels.filter(subchannel => subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\r\n            let index = 0;\r\n            if (this.currentReadyPicker !== null) {\r\n                index = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());\r\n                if (index < 0) {\r\n                    index = 0;\r\n                }\r\n            }\r\n            this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index));\r\n        }\r\n        else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\r\n        }\r\n        else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({ details: `No connection established. Last error: ${this.lastError}` }));\r\n        }\r\n        else {\r\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\r\n        }\r\n    }\r\n    updateState(newState, picker) {\r\n        trace(connectivity_state_1.ConnectivityState[this.currentState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[newState]);\r\n        if (newState === connectivity_state_1.ConnectivityState.READY) {\r\n            this.currentReadyPicker = picker;\r\n        }\r\n        else {\r\n            this.currentReadyPicker = null;\r\n        }\r\n        this.currentState = newState;\r\n        this.channelControlHelper.updateState(newState, picker);\r\n    }\r\n    resetSubchannelList() {\r\n        for (const subchannel of this.subchannels) {\r\n            subchannel.removeConnectivityStateListener(this.subchannelStateListener);\r\n            subchannel.unref();\r\n            this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\r\n        }\r\n        this.subchannels = [];\r\n    }\r\n    updateAddressList(addressList, lbConfig) {\r\n        this.resetSubchannelList();\r\n        trace('Connect to address list ' +\r\n            addressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)));\r\n        this.subchannels = addressList.map(address => this.channelControlHelper.createSubchannel(address, {}));\r\n        for (const subchannel of this.subchannels) {\r\n            subchannel.ref();\r\n            subchannel.addConnectivityStateListener(this.subchannelStateListener);\r\n            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\r\n            const subchannelState = subchannel.getConnectivityState();\r\n            if (subchannelState === connectivity_state_1.ConnectivityState.IDLE ||\r\n                subchannelState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n                subchannel.startConnecting();\r\n            }\r\n        }\r\n        this.calculateAndUpdateState();\r\n    }\r\n    exitIdle() {\r\n        for (const subchannel of this.subchannels) {\r\n            subchannel.startConnecting();\r\n        }\r\n    }\r\n    resetBackoff() {\r\n        /* The pick first load balancer does not have a connection backoff, so this\r\n         * does nothing */\r\n    }\r\n    destroy() {\r\n        this.resetSubchannelList();\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\r\nfunction setup() {\r\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\r\n}\r\nexports.setup = setup;\r\n//# sourceMappingURL=load-balancer-round-robin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.isLoadBalancerNameRegistered = exports.createLoadBalancer = exports.registerDefaultLoadBalancerType = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = void 0;\r\n/**\r\n * Create a child ChannelControlHelper that overrides some methods of the\r\n * parent while letting others pass through to the parent unmodified. This\r\n * allows other code to create these children without needing to know about\r\n * all of the methods to be passed through.\r\n * @param parent\r\n * @param overrides\r\n */\r\nfunction createChildChannelControlHelper(parent, overrides) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\n    return {\r\n        createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\r\n        updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\r\n        requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\r\n        addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\r\n        removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent),\r\n    };\r\n}\r\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\r\nconst registeredLoadBalancerTypes = {};\r\nlet defaultLoadBalancerType = null;\r\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\r\n    registeredLoadBalancerTypes[typeName] = {\r\n        LoadBalancer: loadBalancerType,\r\n        LoadBalancingConfig: loadBalancingConfigType,\r\n    };\r\n}\r\nexports.registerLoadBalancerType = registerLoadBalancerType;\r\nfunction registerDefaultLoadBalancerType(typeName) {\r\n    defaultLoadBalancerType = typeName;\r\n}\r\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\r\nfunction createLoadBalancer(config, channelControlHelper) {\r\n    const typeName = config.getLoadBalancerName();\r\n    if (typeName in registeredLoadBalancerTypes) {\r\n        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexports.createLoadBalancer = createLoadBalancer;\r\nfunction isLoadBalancerNameRegistered(typeName) {\r\n    return typeName in registeredLoadBalancerTypes;\r\n}\r\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\r\nfunction getFirstUsableConfig(configs, fallbackTodefault = false) {\r\n    for (const config of configs) {\r\n        if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\r\n            return config;\r\n        }\r\n    }\r\n    if (fallbackTodefault) {\r\n        if (defaultLoadBalancerType) {\r\n            return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexports.getFirstUsableConfig = getFirstUsableConfig;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction validateLoadBalancingConfig(obj) {\r\n    if (!(obj !== null && typeof obj === 'object')) {\r\n        throw new Error('Load balancing config must be an object');\r\n    }\r\n    const keys = Object.keys(obj);\r\n    if (keys.length !== 1) {\r\n        throw new Error('Provided load balancing config has multiple conflicting entries');\r\n    }\r\n    const typeName = keys[0];\r\n    if (typeName in registeredLoadBalancerTypes) {\r\n        return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);\r\n    }\r\n    else {\r\n        throw new Error(`Unrecognized load balancing config name ${typeName}`);\r\n    }\r\n}\r\nexports.validateLoadBalancingConfig = validateLoadBalancingConfig;\r\n//# sourceMappingURL=load-balancer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LoadBalancingCall = void 0;\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst TRACER_NAME = 'load_balancing_call';\r\nclass LoadBalancingCall {\r\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber) {\r\n        var _a, _b;\r\n        this.channel = channel;\r\n        this.callConfig = callConfig;\r\n        this.methodName = methodName;\r\n        this.host = host;\r\n        this.credentials = credentials;\r\n        this.deadline = deadline;\r\n        this.callNumber = callNumber;\r\n        this.child = null;\r\n        this.readPending = false;\r\n        this.pendingMessage = null;\r\n        this.pendingHalfClose = false;\r\n        this.ended = false;\r\n        this.metadata = null;\r\n        this.listener = null;\r\n        this.onCallEnded = null;\r\n        const splitPath = this.methodName.split('/');\r\n        let serviceName = '';\r\n        /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\r\n         * by '/', the first item should be empty and the second should be the\r\n         * service name */\r\n        if (splitPath.length >= 2) {\r\n            serviceName = splitPath[1];\r\n        }\r\n        const hostname = (_b = (_a = (0, uri_parser_1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\r\n        /* Currently, call credentials are only allowed on HTTPS connections, so we\r\n         * can assume that the scheme is \"https\" */\r\n        this.serviceUrl = `https://${hostname}/${serviceName}`;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\r\n    }\r\n    outputStatus(status, progress) {\r\n        var _a, _b;\r\n        if (!this.ended) {\r\n            this.ended = true;\r\n            this.trace('ended with status: code=' +\r\n                status.code +\r\n                ' details=\"' +\r\n                status.details +\r\n                '\"');\r\n            const finalStatus = Object.assign(Object.assign({}, status), { progress });\r\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);\r\n            (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);\r\n        }\r\n    }\r\n    doPick() {\r\n        var _a, _b;\r\n        if (this.ended) {\r\n            return;\r\n        }\r\n        if (!this.metadata) {\r\n            throw new Error('doPick called before start');\r\n        }\r\n        this.trace('Pick called');\r\n        const pickResult = this.channel.doPick(this.metadata, this.callConfig.pickInformation);\r\n        const subchannelString = pickResult.subchannel\r\n            ? '(' +\r\n                pickResult.subchannel.getChannelzRef().id +\r\n                ') ' +\r\n                pickResult.subchannel.getAddress()\r\n            : '' + pickResult.subchannel;\r\n        this.trace('Pick result: ' +\r\n            picker_1.PickResultType[pickResult.pickResultType] +\r\n            ' subchannel: ' +\r\n            subchannelString +\r\n            ' status: ' +\r\n            ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) +\r\n            ' ' +\r\n            ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));\r\n        switch (pickResult.pickResultType) {\r\n            case picker_1.PickResultType.COMPLETE:\r\n                this.credentials\r\n                    .generateMetadata({ service_url: this.serviceUrl })\r\n                    .then(credsMetadata => {\r\n                    var _a, _b, _c;\r\n                    /* If this call was cancelled (e.g. by the deadline) before\r\n                     * metadata generation finished, we shouldn't do anything with\r\n                     * it. */\r\n                    if (this.ended) {\r\n                        this.trace('Credentials metadata generation finished after call ended');\r\n                        return;\r\n                    }\r\n                    const finalMetadata = this.metadata.clone();\r\n                    finalMetadata.merge(credsMetadata);\r\n                    if (finalMetadata.get('authorization').length > 1) {\r\n                        this.outputStatus({\r\n                            code: constants_1.Status.INTERNAL,\r\n                            details: '\"authorization\" metadata cannot have multiple values',\r\n                            metadata: new metadata_1.Metadata(),\r\n                        }, 'PROCESSED');\r\n                    }\r\n                    if (pickResult.subchannel.getConnectivityState() !==\r\n                        connectivity_state_1.ConnectivityState.READY) {\r\n                        this.trace('Picked subchannel ' +\r\n                            subchannelString +\r\n                            ' has state ' +\r\n                            connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] +\r\n                            ' after getting credentials metadata. Retrying pick');\r\n                        this.doPick();\r\n                        return;\r\n                    }\r\n                    if (this.deadline !== Infinity) {\r\n                        finalMetadata.set('grpc-timeout', (0, deadline_1.getDeadlineTimeoutString)(this.deadline));\r\n                    }\r\n                    try {\r\n                        this.child = pickResult\r\n                            .subchannel.getRealSubchannel()\r\n                            .createCall(finalMetadata, this.host, this.methodName, {\r\n                            onReceiveMetadata: metadata => {\r\n                                this.trace('Received metadata');\r\n                                this.listener.onReceiveMetadata(metadata);\r\n                            },\r\n                            onReceiveMessage: message => {\r\n                                this.trace('Received message');\r\n                                this.listener.onReceiveMessage(message);\r\n                            },\r\n                            onReceiveStatus: status => {\r\n                                this.trace('Received status');\r\n                                if (status.rstCode ===\r\n                                    http2.constants.NGHTTP2_REFUSED_STREAM) {\r\n                                    this.outputStatus(status, 'REFUSED');\r\n                                }\r\n                                else {\r\n                                    this.outputStatus(status, 'PROCESSED');\r\n                                }\r\n                            },\r\n                        });\r\n                    }\r\n                    catch (error) {\r\n                        this.trace('Failed to start call on picked subchannel ' +\r\n                            subchannelString +\r\n                            ' with error ' +\r\n                            error.message);\r\n                        this.outputStatus({\r\n                            code: constants_1.Status.INTERNAL,\r\n                            details: 'Failed to start HTTP/2 stream with error ' +\r\n                                error.message,\r\n                            metadata: new metadata_1.Metadata(),\r\n                        }, 'NOT_STARTED');\r\n                        return;\r\n                    }\r\n                    (_b = (_a = this.callConfig).onCommitted) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n                    (_c = pickResult.onCallStarted) === null || _c === void 0 ? void 0 : _c.call(pickResult);\r\n                    this.onCallEnded = pickResult.onCallEnded;\r\n                    this.trace('Created child call [' + this.child.getCallNumber() + ']');\r\n                    if (this.readPending) {\r\n                        this.child.startRead();\r\n                    }\r\n                    if (this.pendingMessage) {\r\n                        this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);\r\n                    }\r\n                    if (this.pendingHalfClose) {\r\n                        this.child.halfClose();\r\n                    }\r\n                }, (error) => {\r\n                    // We assume the error code isn't 0 (Status.OK)\r\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(typeof error.code === 'number' ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);\r\n                    this.outputStatus({\r\n                        code: code,\r\n                        details: details,\r\n                        metadata: new metadata_1.Metadata(),\r\n                    }, 'PROCESSED');\r\n                });\r\n                break;\r\n            case picker_1.PickResultType.DROP:\r\n                const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\r\n                setImmediate(() => {\r\n                    this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'DROP');\r\n                });\r\n                break;\r\n            case picker_1.PickResultType.TRANSIENT_FAILURE:\r\n                if (this.metadata.getOptions().waitForReady) {\r\n                    this.channel.queueCallForPick(this);\r\n                }\r\n                else {\r\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\r\n                    setImmediate(() => {\r\n                        this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'PROCESSED');\r\n                    });\r\n                }\r\n                break;\r\n            case picker_1.PickResultType.QUEUE:\r\n                this.channel.queueCallForPick(this);\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        var _a;\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\r\n        this.outputStatus({ code: status, details: details, metadata: new metadata_1.Metadata() }, 'PROCESSED');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\r\n    }\r\n    start(metadata, listener) {\r\n        this.trace('start called');\r\n        this.listener = listener;\r\n        this.metadata = metadata;\r\n        this.doPick();\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        this.trace('write() called with message of length ' + message.length);\r\n        if (this.child) {\r\n            this.child.sendMessageWithContext(context, message);\r\n        }\r\n        else {\r\n            this.pendingMessage = { context, message };\r\n        }\r\n    }\r\n    startRead() {\r\n        this.trace('startRead called');\r\n        if (this.child) {\r\n            this.child.startRead();\r\n        }\r\n        else {\r\n            this.readPending = true;\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('halfClose called');\r\n        if (this.child) {\r\n            this.child.halfClose();\r\n        }\r\n        else {\r\n            this.pendingHalfClose = true;\r\n        }\r\n    }\r\n    setCredentials(credentials) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    getCallNumber() {\r\n        return this.callNumber;\r\n    }\r\n}\r\nexports.LoadBalancingCall = LoadBalancingCall;\r\n//# sourceMappingURL=load-balancing-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/logging.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst process_1 = __webpack_require__(/*! process */ \"process\");\r\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/@grpc/grpc-js/package.json\").version);\r\nconst DEFAULT_LOGGER = {\r\n    error: (message, ...optionalParams) => {\r\n        console.error('E ' + message, ...optionalParams);\r\n    },\r\n    info: (message, ...optionalParams) => {\r\n        console.error('I ' + message, ...optionalParams);\r\n    },\r\n    debug: (message, ...optionalParams) => {\r\n        console.error('D ' + message, ...optionalParams);\r\n    },\r\n};\r\nlet _logger = DEFAULT_LOGGER;\r\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\r\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\r\nswitch (verbosityString.toUpperCase()) {\r\n    case 'DEBUG':\r\n        _logVerbosity = constants_1.LogVerbosity.DEBUG;\r\n        break;\r\n    case 'INFO':\r\n        _logVerbosity = constants_1.LogVerbosity.INFO;\r\n        break;\r\n    case 'ERROR':\r\n        _logVerbosity = constants_1.LogVerbosity.ERROR;\r\n        break;\r\n    case 'NONE':\r\n        _logVerbosity = constants_1.LogVerbosity.NONE;\r\n        break;\r\n    default:\r\n    // Ignore any other values\r\n}\r\nconst getLogger = () => {\r\n    return _logger;\r\n};\r\nexports.getLogger = getLogger;\r\nconst setLogger = (logger) => {\r\n    _logger = logger;\r\n};\r\nexports.setLogger = setLogger;\r\nconst setLoggerVerbosity = (verbosity) => {\r\n    _logVerbosity = verbosity;\r\n};\r\nexports.setLoggerVerbosity = setLoggerVerbosity;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst log = (severity, ...args) => {\r\n    let logFunction;\r\n    if (severity >= _logVerbosity) {\r\n        switch (severity) {\r\n            case constants_1.LogVerbosity.DEBUG:\r\n                logFunction = _logger.debug;\r\n                break;\r\n            case constants_1.LogVerbosity.INFO:\r\n                logFunction = _logger.info;\r\n                break;\r\n            case constants_1.LogVerbosity.ERROR:\r\n                logFunction = _logger.error;\r\n                break;\r\n        }\r\n        /* Fall back to _logger.error when other methods are not available for\r\n         * compatiblity with older behavior that always logged to _logger.error */\r\n        if (!logFunction) {\r\n            logFunction = _logger.error;\r\n        }\r\n        if (logFunction) {\r\n            logFunction.bind(_logger)(...args);\r\n        }\r\n    }\r\n};\r\nexports.log = log;\r\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\r\nconst enabledTracers = new Set();\r\nconst disabledTracers = new Set();\r\nfor (const tracerName of tracersString.split(',')) {\r\n    if (tracerName.startsWith('-')) {\r\n        disabledTracers.add(tracerName.substring(1));\r\n    }\r\n    else {\r\n        enabledTracers.add(tracerName);\r\n    }\r\n}\r\nconst allEnabled = enabledTracers.has('all');\r\nfunction trace(severity, tracer, text) {\r\n    if (isTracerEnabled(tracer)) {\r\n        (0, exports.log)(severity, new Date().toISOString() + ' | v' + clientVersion + ' ' + process_1.pid + ' | ' + tracer + ' | ' + text);\r\n    }\r\n}\r\nexports.trace = trace;\r\nfunction isTracerEnabled(tracer) {\r\n    return (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer)));\r\n}\r\nexports.isTracerEnabled = isTracerEnabled;\r\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvbG9nZ2luZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsYUFBYSxHQUFHLFdBQVcsR0FBRywwQkFBMEIsR0FBRyxpQkFBaUIsR0FBRyxpQkFBaUI7QUFDMUgsb0JBQW9CLG1CQUFPLENBQUMsOEVBQWE7QUFDekMsa0JBQWtCLG1CQUFPLENBQUMsd0JBQVM7QUFDbkMsc0JBQXNCLDBHQUFxQztBQUMzRDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2xvZ2dpbmcuanM/MzdhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbnZhciBfYSwgX2IsIF9jLCBfZDtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmlzVHJhY2VyRW5hYmxlZCA9IGV4cG9ydHMudHJhY2UgPSBleHBvcnRzLmxvZyA9IGV4cG9ydHMuc2V0TG9nZ2VyVmVyYm9zaXR5ID0gZXhwb3J0cy5zZXRMb2dnZXIgPSBleHBvcnRzLmdldExvZ2dlciA9IHZvaWQgMDtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XHJcbmNvbnN0IHByb2Nlc3NfMSA9IHJlcXVpcmUoXCJwcm9jZXNzXCIpO1xyXG5jb25zdCBjbGllbnRWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcclxuY29uc3QgREVGQVVMVF9MT0dHRVIgPSB7XHJcbiAgICBlcnJvcjogKG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRSAnICsgbWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xyXG4gICAgfSxcclxuICAgIGluZm86IChtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcykgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0kgJyArIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICBkZWJ1ZzogKG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRCAnICsgbWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xyXG4gICAgfSxcclxufTtcclxubGV0IF9sb2dnZXIgPSBERUZBVUxUX0xPR0dFUjtcclxubGV0IF9sb2dWZXJib3NpdHkgPSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuRVJST1I7XHJcbmNvbnN0IHZlcmJvc2l0eVN0cmluZyA9IChfYiA9IChfYSA9IHByb2Nlc3MuZW52LkdSUENfTk9ERV9WRVJCT1NJVFkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHByb2Nlc3MuZW52LkdSUENfVkVSQk9TSVRZKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJztcclxuc3dpdGNoICh2ZXJib3NpdHlTdHJpbmcudG9VcHBlckNhc2UoKSkge1xyXG4gICAgY2FzZSAnREVCVUcnOlxyXG4gICAgICAgIF9sb2dWZXJib3NpdHkgPSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuREVCVUc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdJTkZPJzpcclxuICAgICAgICBfbG9nVmVyYm9zaXR5ID0gY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LklORk87XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdFUlJPUic6XHJcbiAgICAgICAgX2xvZ1ZlcmJvc2l0eSA9IGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5FUlJPUjtcclxuICAgICAgICBicmVhaztcclxuICAgIGNhc2UgJ05PTkUnOlxyXG4gICAgICAgIF9sb2dWZXJib3NpdHkgPSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuTk9ORTtcclxuICAgICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAvLyBJZ25vcmUgYW55IG90aGVyIHZhbHVlc1xyXG59XHJcbmNvbnN0IGdldExvZ2dlciA9ICgpID0+IHtcclxuICAgIHJldHVybiBfbG9nZ2VyO1xyXG59O1xyXG5leHBvcnRzLmdldExvZ2dlciA9IGdldExvZ2dlcjtcclxuY29uc3Qgc2V0TG9nZ2VyID0gKGxvZ2dlcikgPT4ge1xyXG4gICAgX2xvZ2dlciA9IGxvZ2dlcjtcclxufTtcclxuZXhwb3J0cy5zZXRMb2dnZXIgPSBzZXRMb2dnZXI7XHJcbmNvbnN0IHNldExvZ2dlclZlcmJvc2l0eSA9ICh2ZXJib3NpdHkpID0+IHtcclxuICAgIF9sb2dWZXJib3NpdHkgPSB2ZXJib3NpdHk7XHJcbn07XHJcbmV4cG9ydHMuc2V0TG9nZ2VyVmVyYm9zaXR5ID0gc2V0TG9nZ2VyVmVyYm9zaXR5O1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5jb25zdCBsb2cgPSAoc2V2ZXJpdHksIC4uLmFyZ3MpID0+IHtcclxuICAgIGxldCBsb2dGdW5jdGlvbjtcclxuICAgIGlmIChzZXZlcml0eSA+PSBfbG9nVmVyYm9zaXR5KSB7XHJcbiAgICAgICAgc3dpdGNoIChzZXZlcml0eSkge1xyXG4gICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5ERUJVRzpcclxuICAgICAgICAgICAgICAgIGxvZ0Z1bmN0aW9uID0gX2xvZ2dlci5kZWJ1ZztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5JTkZPOlxyXG4gICAgICAgICAgICAgICAgbG9nRnVuY3Rpb24gPSBfbG9nZ2VyLmluZm87XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuRVJST1I6XHJcbiAgICAgICAgICAgICAgICBsb2dGdW5jdGlvbiA9IF9sb2dnZXIuZXJyb3I7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgLyogRmFsbCBiYWNrIHRvIF9sb2dnZXIuZXJyb3Igd2hlbiBvdGhlciBtZXRob2RzIGFyZSBub3QgYXZhaWxhYmxlIGZvclxyXG4gICAgICAgICAqIGNvbXBhdGlibGl0eSB3aXRoIG9sZGVyIGJlaGF2aW9yIHRoYXQgYWx3YXlzIGxvZ2dlZCB0byBfbG9nZ2VyLmVycm9yICovXHJcbiAgICAgICAgaWYgKCFsb2dGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBsb2dGdW5jdGlvbiA9IF9sb2dnZXIuZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb2dGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBsb2dGdW5jdGlvbi5iaW5kKF9sb2dnZXIpKC4uLmFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5sb2cgPSBsb2c7XHJcbmNvbnN0IHRyYWNlcnNTdHJpbmcgPSAoX2QgPSAoX2MgPSBwcm9jZXNzLmVudi5HUlBDX05PREVfVFJBQ0UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHByb2Nlc3MuZW52LkdSUENfVFJBQ0UpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6ICcnO1xyXG5jb25zdCBlbmFibGVkVHJhY2VycyA9IG5ldyBTZXQoKTtcclxuY29uc3QgZGlzYWJsZWRUcmFjZXJzID0gbmV3IFNldCgpO1xyXG5mb3IgKGNvbnN0IHRyYWNlck5hbWUgb2YgdHJhY2Vyc1N0cmluZy5zcGxpdCgnLCcpKSB7XHJcbiAgICBpZiAodHJhY2VyTmFtZS5zdGFydHNXaXRoKCctJykpIHtcclxuICAgICAgICBkaXNhYmxlZFRyYWNlcnMuYWRkKHRyYWNlck5hbWUuc3Vic3RyaW5nKDEpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGVuYWJsZWRUcmFjZXJzLmFkZCh0cmFjZXJOYW1lKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBhbGxFbmFibGVkID0gZW5hYmxlZFRyYWNlcnMuaGFzKCdhbGwnKTtcclxuZnVuY3Rpb24gdHJhY2Uoc2V2ZXJpdHksIHRyYWNlciwgdGV4dCkge1xyXG4gICAgaWYgKGlzVHJhY2VyRW5hYmxlZCh0cmFjZXIpKSB7XHJcbiAgICAgICAgKDAsIGV4cG9ydHMubG9nKShzZXZlcml0eSwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpICsgJyB8IHYnICsgY2xpZW50VmVyc2lvbiArICcgJyArIHByb2Nlc3NfMS5waWQgKyAnIHwgJyArIHRyYWNlciArICcgfCAnICsgdGV4dCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy50cmFjZSA9IHRyYWNlO1xyXG5mdW5jdGlvbiBpc1RyYWNlckVuYWJsZWQodHJhY2VyKSB7XHJcbiAgICByZXR1cm4gKCFkaXNhYmxlZFRyYWNlcnMuaGFzKHRyYWNlcikgJiYgKGFsbEVuYWJsZWQgfHwgZW5hYmxlZFRyYWNlcnMuaGFzKHRyYWNlcikpKTtcclxufVxyXG5leHBvcnRzLmlzVHJhY2VyRW5hYmxlZCA9IGlzVHJhY2VyRW5hYmxlZDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/make-client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.loadPackageDefinition = exports.makeClientConstructor = void 0;\r\nconst client_1 = __webpack_require__(/*! ./client */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/client.js\");\r\n/**\r\n * Map with short names for each of the requester maker functions. Used in\r\n * makeClientConstructor\r\n * @private\r\n */\r\nconst requesterFuncs = {\r\n    unary: client_1.Client.prototype.makeUnaryRequest,\r\n    server_stream: client_1.Client.prototype.makeServerStreamRequest,\r\n    client_stream: client_1.Client.prototype.makeClientStreamRequest,\r\n    bidi: client_1.Client.prototype.makeBidiStreamRequest,\r\n};\r\n/**\r\n * Returns true, if given key is included in the blacklisted\r\n * keys.\r\n * @param key key for check, string.\r\n */\r\nfunction isPrototypePolluted(key) {\r\n    return ['__proto__', 'prototype', 'constructor'].includes(key);\r\n}\r\n/**\r\n * Creates a constructor for a client with the given methods, as specified in\r\n * the methods argument. The resulting class will have an instance method for\r\n * each method in the service, which is a partial application of one of the\r\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\r\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\r\n * arguments predefined.\r\n * @param methods An object mapping method names to\r\n *     method attributes\r\n * @param serviceName The fully qualified name of the service\r\n * @param classOptions An options object.\r\n * @return New client constructor, which is a subclass of\r\n *     {@link grpc.Client}, and has the same arguments as that constructor.\r\n */\r\nfunction makeClientConstructor(methods, serviceName, classOptions) {\r\n    if (!classOptions) {\r\n        classOptions = {};\r\n    }\r\n    class ServiceClientImpl extends client_1.Client {\r\n    }\r\n    Object.keys(methods).forEach(name => {\r\n        if (isPrototypePolluted(name)) {\r\n            return;\r\n        }\r\n        const attrs = methods[name];\r\n        let methodType;\r\n        // TODO(murgatroid99): Verify that we don't need this anymore\r\n        if (typeof name === 'string' && name.charAt(0) === '$') {\r\n            throw new Error('Method names cannot start with $');\r\n        }\r\n        if (attrs.requestStream) {\r\n            if (attrs.responseStream) {\r\n                methodType = 'bidi';\r\n            }\r\n            else {\r\n                methodType = 'client_stream';\r\n            }\r\n        }\r\n        else {\r\n            if (attrs.responseStream) {\r\n                methodType = 'server_stream';\r\n            }\r\n            else {\r\n                methodType = 'unary';\r\n            }\r\n        }\r\n        const serialize = attrs.requestSerialize;\r\n        const deserialize = attrs.responseDeserialize;\r\n        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\r\n        ServiceClientImpl.prototype[name] = methodFunc;\r\n        // Associate all provided attributes with the method\r\n        Object.assign(ServiceClientImpl.prototype[name], attrs);\r\n        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\r\n            ServiceClientImpl.prototype[attrs.originalName] =\r\n                ServiceClientImpl.prototype[name];\r\n        }\r\n    });\r\n    ServiceClientImpl.service = methods;\r\n    ServiceClientImpl.serviceName = serviceName;\r\n    return ServiceClientImpl;\r\n}\r\nexports.makeClientConstructor = makeClientConstructor;\r\nfunction partial(fn, path, serialize, deserialize) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return function (...args) {\r\n        return fn.call(this, path, serialize, deserialize, ...args);\r\n    };\r\n}\r\nfunction isProtobufTypeDefinition(obj) {\r\n    return 'format' in obj;\r\n}\r\n/**\r\n * Load a gRPC package definition as a gRPC object hierarchy.\r\n * @param packageDef The package definition object.\r\n * @return The resulting gRPC object.\r\n */\r\nfunction loadPackageDefinition(packageDef) {\r\n    const result = {};\r\n    for (const serviceFqn in packageDef) {\r\n        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\r\n            const service = packageDef[serviceFqn];\r\n            const nameComponents = serviceFqn.split('.');\r\n            if (nameComponents.some((comp) => isPrototypePolluted(comp))) {\r\n                continue;\r\n            }\r\n            const serviceName = nameComponents[nameComponents.length - 1];\r\n            let current = result;\r\n            for (const packageName of nameComponents.slice(0, -1)) {\r\n                if (!current[packageName]) {\r\n                    current[packageName] = {};\r\n                }\r\n                current = current[packageName];\r\n            }\r\n            if (isProtobufTypeDefinition(service)) {\r\n                current[serviceName] = service;\r\n            }\r\n            else {\r\n                current[serviceName] = makeClientConstructor(service, serviceName, {});\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.loadPackageDefinition = loadPackageDefinition;\r\n//# sourceMappingURL=make-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/make-client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/metadata.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Metadata = void 0;\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/error.js\");\r\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\r\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\r\nfunction isLegalKey(key) {\r\n    return LEGAL_KEY_REGEX.test(key);\r\n}\r\nfunction isLegalNonBinaryValue(value) {\r\n    return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\r\n}\r\nfunction isBinaryKey(key) {\r\n    return key.endsWith('-bin');\r\n}\r\nfunction isCustomMetadata(key) {\r\n    return !key.startsWith('grpc-');\r\n}\r\nfunction normalizeKey(key) {\r\n    return key.toLowerCase();\r\n}\r\nfunction validate(key, value) {\r\n    if (!isLegalKey(key)) {\r\n        throw new Error('Metadata key \"' + key + '\" contains illegal characters');\r\n    }\r\n    if (value !== null && value !== undefined) {\r\n        if (isBinaryKey(key)) {\r\n            if (!Buffer.isBuffer(value)) {\r\n                throw new Error(\"keys that end with '-bin' must have Buffer values\");\r\n            }\r\n        }\r\n        else {\r\n            if (Buffer.isBuffer(value)) {\r\n                throw new Error(\"keys that don't end with '-bin' must have String values\");\r\n            }\r\n            if (!isLegalNonBinaryValue(value)) {\r\n                throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\r\n */\r\nclass Metadata {\r\n    constructor(options = {}) {\r\n        this.internalRepr = new Map();\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * Sets the given value for the given key by replacing any other values\r\n     * associated with that key. Normalizes the key.\r\n     * @param key The key to whose value should be set.\r\n     * @param value The value to set. Must be a buffer if and only\r\n     *   if the normalized key ends with '-bin'.\r\n     */\r\n    set(key, value) {\r\n        key = normalizeKey(key);\r\n        validate(key, value);\r\n        this.internalRepr.set(key, [value]);\r\n    }\r\n    /**\r\n     * Adds the given value for the given key by appending to a list of previous\r\n     * values associated with that key. Normalizes the key.\r\n     * @param key The key for which a new value should be appended.\r\n     * @param value The value to add. Must be a buffer if and only\r\n     *   if the normalized key ends with '-bin'.\r\n     */\r\n    add(key, value) {\r\n        key = normalizeKey(key);\r\n        validate(key, value);\r\n        const existingValue = this.internalRepr.get(key);\r\n        if (existingValue === undefined) {\r\n            this.internalRepr.set(key, [value]);\r\n        }\r\n        else {\r\n            existingValue.push(value);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the given key and any associated values. Normalizes the key.\r\n     * @param key The key whose values should be removed.\r\n     */\r\n    remove(key) {\r\n        key = normalizeKey(key);\r\n        // validate(key);\r\n        this.internalRepr.delete(key);\r\n    }\r\n    /**\r\n     * Gets a list of all values associated with the key. Normalizes the key.\r\n     * @param key The key whose value should be retrieved.\r\n     * @return A list of values associated with the given key.\r\n     */\r\n    get(key) {\r\n        key = normalizeKey(key);\r\n        // validate(key);\r\n        return this.internalRepr.get(key) || [];\r\n    }\r\n    /**\r\n     * Gets a plain object mapping each key to the first value associated with it.\r\n     * This reflects the most common way that people will want to see metadata.\r\n     * @return A key/value mapping of the metadata.\r\n     */\r\n    getMap() {\r\n        const result = {};\r\n        for (const [key, values] of this.internalRepr) {\r\n            if (values.length > 0) {\r\n                const v = values[0];\r\n                result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Clones the metadata object.\r\n     * @return The newly cloned object.\r\n     */\r\n    clone() {\r\n        const newMetadata = new Metadata(this.options);\r\n        const newInternalRepr = newMetadata.internalRepr;\r\n        for (const [key, value] of this.internalRepr) {\r\n            const clonedValue = value.map(v => {\r\n                if (Buffer.isBuffer(v)) {\r\n                    return Buffer.from(v);\r\n                }\r\n                else {\r\n                    return v;\r\n                }\r\n            });\r\n            newInternalRepr.set(key, clonedValue);\r\n        }\r\n        return newMetadata;\r\n    }\r\n    /**\r\n     * Merges all key-value pairs from a given Metadata object into this one.\r\n     * If both this object and the given object have values in the same key,\r\n     * values from the other Metadata object will be appended to this object's\r\n     * values.\r\n     * @param other A Metadata object.\r\n     */\r\n    merge(other) {\r\n        for (const [key, values] of other.internalRepr) {\r\n            const mergedValue = (this.internalRepr.get(key) || []).concat(values);\r\n            this.internalRepr.set(key, mergedValue);\r\n        }\r\n    }\r\n    setOptions(options) {\r\n        this.options = options;\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n    /**\r\n     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\r\n     */\r\n    toHttp2Headers() {\r\n        // NOTE: Node <8.9 formats http2 headers incorrectly.\r\n        const result = {};\r\n        for (const [key, values] of this.internalRepr) {\r\n            // We assume that the user's interaction with this object is limited to\r\n            // through its public API (i.e. keys and values are already validated).\r\n            result[key] = values.map(bufToString);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * This modifies the behavior of JSON.stringify to show an object\r\n     * representation of the metadata map.\r\n     */\r\n    toJSON() {\r\n        const result = {};\r\n        for (const [key, values] of this.internalRepr) {\r\n            result[key] = values;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns a new Metadata object based fields in a given IncomingHttpHeaders\r\n     * object.\r\n     * @param headers An IncomingHttpHeaders object.\r\n     */\r\n    static fromHttp2Headers(headers) {\r\n        const result = new Metadata();\r\n        for (const key of Object.keys(headers)) {\r\n            // Reserved headers (beginning with `:`) are not valid keys.\r\n            if (key.charAt(0) === ':') {\r\n                continue;\r\n            }\r\n            const values = headers[key];\r\n            try {\r\n                if (isBinaryKey(key)) {\r\n                    if (Array.isArray(values)) {\r\n                        values.forEach(value => {\r\n                            result.add(key, Buffer.from(value, 'base64'));\r\n                        });\r\n                    }\r\n                    else if (values !== undefined) {\r\n                        if (isCustomMetadata(key)) {\r\n                            values.split(',').forEach(v => {\r\n                                result.add(key, Buffer.from(v.trim(), 'base64'));\r\n                            });\r\n                        }\r\n                        else {\r\n                            result.add(key, Buffer.from(values, 'base64'));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (Array.isArray(values)) {\r\n                        values.forEach(value => {\r\n                            result.add(key, value);\r\n                        });\r\n                    }\r\n                    else if (values !== undefined) {\r\n                        result.add(key, values);\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\r\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexports.Metadata = Metadata;\r\nconst bufToString = (val) => {\r\n    return Buffer.isBuffer(val) ? val.toString('base64') : val;\r\n};\r\n//# sourceMappingURL=metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/picker.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.QueuePicker = exports.UnavailablePicker = exports.PickResultType = void 0;\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nvar PickResultType;\r\n(function (PickResultType) {\r\n    PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\r\n    PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\r\n    PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\r\n    PickResultType[PickResultType[\"DROP\"] = 3] = \"DROP\";\r\n})(PickResultType || (exports.PickResultType = PickResultType = {}));\r\n/**\r\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\r\n * state. Always responds to every pick request with an UNAVAILABLE status.\r\n */\r\nclass UnavailablePicker {\r\n    constructor(status) {\r\n        this.status = Object.assign({ code: constants_1.Status.UNAVAILABLE, details: 'No connection established', metadata: new metadata_1.Metadata() }, status);\r\n    }\r\n    pick(pickArgs) {\r\n        return {\r\n            pickResultType: PickResultType.TRANSIENT_FAILURE,\r\n            subchannel: null,\r\n            status: this.status,\r\n            onCallStarted: null,\r\n            onCallEnded: null,\r\n        };\r\n    }\r\n}\r\nexports.UnavailablePicker = UnavailablePicker;\r\n/**\r\n * A standard picker representing a load balancer in the IDLE or CONNECTING\r\n * state. Always responds to every pick request with a QUEUE pick result\r\n * indicating that the pick should be tried again with the next `Picker`. Also\r\n * reports back to the load balancer that a connection should be established\r\n * once any pick is attempted.\r\n */\r\nclass QueuePicker {\r\n    // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\r\n    constructor(loadBalancer) {\r\n        this.loadBalancer = loadBalancer;\r\n        this.calledExitIdle = false;\r\n    }\r\n    pick(pickArgs) {\r\n        if (!this.calledExitIdle) {\r\n            process.nextTick(() => {\r\n                this.loadBalancer.exitIdle();\r\n            });\r\n            this.calledExitIdle = true;\r\n        }\r\n        return {\r\n            pickResultType: PickResultType.QUEUE,\r\n            subchannel: null,\r\n            status: null,\r\n            onCallStarted: null,\r\n            onCallEnded: null,\r\n        };\r\n    }\r\n}\r\nexports.QueuePicker = QueuePicker;\r\n//# sourceMappingURL=picker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcGlja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcseUJBQXlCLEdBQUcsc0JBQXNCO0FBQ3hFLG1CQUFtQixtQkFBTyxDQUFDLDRFQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMscUJBQXFCLHNCQUFzQixzQkFBc0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGlIQUFpSDtBQUN2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3BpY2tlci5qcz9mNmZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlF1ZXVlUGlja2VyID0gZXhwb3J0cy5VbmF2YWlsYWJsZVBpY2tlciA9IGV4cG9ydHMuUGlja1Jlc3VsdFR5cGUgPSB2b2lkIDA7XHJcbmNvbnN0IG1ldGFkYXRhXzEgPSByZXF1aXJlKFwiLi9tZXRhZGF0YVwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XHJcbnZhciBQaWNrUmVzdWx0VHlwZTtcclxuKGZ1bmN0aW9uIChQaWNrUmVzdWx0VHlwZSkge1xyXG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJDT01QTEVURVwiXSA9IDBdID0gXCJDT01QTEVURVwiO1xyXG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJRVUVVRVwiXSA9IDFdID0gXCJRVUVVRVwiO1xyXG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJUUkFOU0lFTlRfRkFJTFVSRVwiXSA9IDJdID0gXCJUUkFOU0lFTlRfRkFJTFVSRVwiO1xyXG4gICAgUGlja1Jlc3VsdFR5cGVbUGlja1Jlc3VsdFR5cGVbXCJEUk9QXCJdID0gM10gPSBcIkRST1BcIjtcclxufSkoUGlja1Jlc3VsdFR5cGUgfHwgKGV4cG9ydHMuUGlja1Jlc3VsdFR5cGUgPSBQaWNrUmVzdWx0VHlwZSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIHN0YW5kYXJkIHBpY2tlciByZXByZXNlbnRpbmcgYSBsb2FkIGJhbGFuY2VyIGluIHRoZSBUUkFOU0lFTlRfRkFJTFVSRVxyXG4gKiBzdGF0ZS4gQWx3YXlzIHJlc3BvbmRzIHRvIGV2ZXJ5IHBpY2sgcmVxdWVzdCB3aXRoIGFuIFVOQVZBSUxBQkxFIHN0YXR1cy5cclxuICovXHJcbmNsYXNzIFVuYXZhaWxhYmxlUGlja2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHN0YXR1cykge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gT2JqZWN0LmFzc2lnbih7IGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTkFWQUlMQUJMRSwgZGV0YWlsczogJ05vIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQnLCBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSB9LCBzdGF0dXMpO1xyXG4gICAgfVxyXG4gICAgcGljayhwaWNrQXJncykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHBpY2tSZXN1bHRUeXBlOiBQaWNrUmVzdWx0VHlwZS5UUkFOU0lFTlRfRkFJTFVSRSxcclxuICAgICAgICAgICAgc3ViY2hhbm5lbDogbnVsbCxcclxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcclxuICAgICAgICAgICAgb25DYWxsU3RhcnRlZDogbnVsbCxcclxuICAgICAgICAgICAgb25DYWxsRW5kZWQ6IG51bGwsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlVuYXZhaWxhYmxlUGlja2VyID0gVW5hdmFpbGFibGVQaWNrZXI7XHJcbi8qKlxyXG4gKiBBIHN0YW5kYXJkIHBpY2tlciByZXByZXNlbnRpbmcgYSBsb2FkIGJhbGFuY2VyIGluIHRoZSBJRExFIG9yIENPTk5FQ1RJTkdcclxuICogc3RhdGUuIEFsd2F5cyByZXNwb25kcyB0byBldmVyeSBwaWNrIHJlcXVlc3Qgd2l0aCBhIFFVRVVFIHBpY2sgcmVzdWx0XHJcbiAqIGluZGljYXRpbmcgdGhhdCB0aGUgcGljayBzaG91bGQgYmUgdHJpZWQgYWdhaW4gd2l0aCB0aGUgbmV4dCBgUGlja2VyYC4gQWxzb1xyXG4gKiByZXBvcnRzIGJhY2sgdG8gdGhlIGxvYWQgYmFsYW5jZXIgdGhhdCBhIGNvbm5lY3Rpb24gc2hvdWxkIGJlIGVzdGFibGlzaGVkXHJcbiAqIG9uY2UgYW55IHBpY2sgaXMgYXR0ZW1wdGVkLlxyXG4gKi9cclxuY2xhc3MgUXVldWVQaWNrZXIge1xyXG4gICAgLy8gQ29uc3RydWN0ZWQgd2l0aCBhIGxvYWQgYmFsYW5jZXIuIENhbGxzIGV4aXRJZGxlIG9uIGl0IHRoZSBmaXJzdCB0aW1lIHBpY2sgaXMgY2FsbGVkXHJcbiAgICBjb25zdHJ1Y3Rvcihsb2FkQmFsYW5jZXIpIHtcclxuICAgICAgICB0aGlzLmxvYWRCYWxhbmNlciA9IGxvYWRCYWxhbmNlcjtcclxuICAgICAgICB0aGlzLmNhbGxlZEV4aXRJZGxlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBwaWNrKHBpY2tBcmdzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhbGxlZEV4aXRJZGxlKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQmFsYW5jZXIuZXhpdElkbGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGVkRXhpdElkbGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwaWNrUmVzdWx0VHlwZTogUGlja1Jlc3VsdFR5cGUuUVVFVUUsXHJcbiAgICAgICAgICAgIHN1YmNoYW5uZWw6IG51bGwsXHJcbiAgICAgICAgICAgIHN0YXR1czogbnVsbCxcclxuICAgICAgICAgICAgb25DYWxsU3RhcnRlZDogbnVsbCxcclxuICAgICAgICAgICAgb25DYWxsRW5kZWQ6IG51bGwsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlF1ZXVlUGlja2VyID0gUXVldWVQaWNrZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpY2tlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-dns.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = exports.DEFAULT_PORT = void 0;\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst dns = __webpack_require__(/*! dns */ \"dns\");\r\nconst util = __webpack_require__(/*! util */ \"util\");\r\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nconst TRACER_NAME = 'dns_resolver';\r\nfunction trace(text) {\r\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\n/**\r\n * The default TCP port to connect to if not explicitly specified in the target.\r\n */\r\nexports.DEFAULT_PORT = 443;\r\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\r\nconst resolveTxtPromise = util.promisify(dns.resolveTxt);\r\nconst dnsLookupPromise = util.promisify(dns.lookup);\r\n/**\r\n * Merge any number of arrays into a single alternating array\r\n * @param arrays\r\n */\r\nfunction mergeArrays(...arrays) {\r\n    const result = [];\r\n    for (let i = 0; i <\r\n        Math.max.apply(null, arrays.map(array => array.length)); i++) {\r\n        for (const array of arrays) {\r\n            if (i < array.length) {\r\n                result.push(array[i]);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Resolver implementation that handles DNS names and IP addresses.\r\n */\r\nclass DnsResolver {\r\n    constructor(target, listener, channelOptions) {\r\n        var _a, _b, _c;\r\n        this.target = target;\r\n        this.listener = listener;\r\n        this.pendingLookupPromise = null;\r\n        this.pendingTxtPromise = null;\r\n        this.latestLookupResult = null;\r\n        this.latestServiceConfig = null;\r\n        this.latestServiceConfigError = null;\r\n        this.continueResolving = false;\r\n        this.isNextResolutionTimerRunning = false;\r\n        this.isServiceConfigEnabled = true;\r\n        this.returnedIpResult = false;\r\n        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\r\n        const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\r\n        if (hostPort === null) {\r\n            this.ipResult = null;\r\n            this.dnsHostname = null;\r\n            this.port = null;\r\n        }\r\n        else {\r\n            if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\r\n                this.ipResult = [\r\n                    {\r\n                        host: hostPort.host,\r\n                        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : exports.DEFAULT_PORT,\r\n                    },\r\n                ];\r\n                this.dnsHostname = null;\r\n                this.port = null;\r\n            }\r\n            else {\r\n                this.ipResult = null;\r\n                this.dnsHostname = hostPort.host;\r\n                this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : exports.DEFAULT_PORT;\r\n            }\r\n        }\r\n        this.percentage = Math.random() * 100;\r\n        if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\r\n            this.isServiceConfigEnabled = false;\r\n        }\r\n        this.defaultResolutionError = {\r\n            code: constants_1.Status.UNAVAILABLE,\r\n            details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\r\n            metadata: new metadata_1.Metadata(),\r\n        };\r\n        const backoffOptions = {\r\n            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\r\n            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\r\n        };\r\n        this.backoff = new backoff_timeout_1.BackoffTimeout(() => {\r\n            if (this.continueResolving) {\r\n                this.startResolutionWithBackoff();\r\n            }\r\n        }, backoffOptions);\r\n        this.backoff.unref();\r\n        this.minTimeBetweenResolutionsMs =\r\n            (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\r\n        this.nextResolutionTimer = setTimeout(() => { }, 0);\r\n        clearTimeout(this.nextResolutionTimer);\r\n    }\r\n    /**\r\n     * If the target is an IP address, just provide that address as a result.\r\n     * Otherwise, initiate A, AAAA, and TXT lookups\r\n     */\r\n    startResolution() {\r\n        if (this.ipResult !== null) {\r\n            if (!this.returnedIpResult) {\r\n                trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));\r\n                setImmediate(() => {\r\n                    this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\r\n                });\r\n                this.returnedIpResult = true;\r\n            }\r\n            this.backoff.stop();\r\n            this.backoff.reset();\r\n            this.stopNextResolutionTimer();\r\n            return;\r\n        }\r\n        if (this.dnsHostname === null) {\r\n            trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));\r\n            setImmediate(() => {\r\n                this.listener.onError({\r\n                    code: constants_1.Status.UNAVAILABLE,\r\n                    details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\r\n                    metadata: new metadata_1.Metadata(),\r\n                });\r\n            });\r\n            this.stopNextResolutionTimer();\r\n        }\r\n        else {\r\n            if (this.pendingLookupPromise !== null) {\r\n                return;\r\n            }\r\n            trace('Looking up DNS hostname ' + this.dnsHostname);\r\n            /* We clear out latestLookupResult here to ensure that it contains the\r\n             * latest result since the last time we started resolving. That way, the\r\n             * TXT resolution handler can use it, but only if it finishes second. We\r\n             * don't clear out any previous service config results because it's\r\n             * better to use a service config that's slightly out of date than to\r\n             * revert to an effectively blank one. */\r\n            this.latestLookupResult = null;\r\n            const hostname = this.dnsHostname;\r\n            /* We lookup both address families here and then split them up later\r\n             * because when looking up a single family, dns.lookup outputs an error\r\n             * if the name exists but there are no records for that family, and that\r\n             * error is indistinguishable from other kinds of errors */\r\n            this.pendingLookupPromise = dnsLookupPromise(hostname, { all: true });\r\n            this.pendingLookupPromise.then(addressList => {\r\n                if (this.pendingLookupPromise === null) {\r\n                    return;\r\n                }\r\n                this.pendingLookupPromise = null;\r\n                this.backoff.reset();\r\n                this.backoff.stop();\r\n                const ip4Addresses = addressList.filter(addr => addr.family === 4);\r\n                const ip6Addresses = addressList.filter(addr => addr.family === 6);\r\n                this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map(addr => ({ host: addr.address, port: +this.port }));\r\n                const allAddressesString = '[' +\r\n                    this.latestLookupResult\r\n                        .map(addr => addr.host + ':' + addr.port)\r\n                        .join(',') +\r\n                    ']';\r\n                trace('Resolved addresses for target ' +\r\n                    (0, uri_parser_1.uriToString)(this.target) +\r\n                    ': ' +\r\n                    allAddressesString);\r\n                if (this.latestLookupResult.length === 0) {\r\n                    this.listener.onError(this.defaultResolutionError);\r\n                    return;\r\n                }\r\n                /* If the TXT lookup has not yet finished, both of the last two\r\n                 * arguments will be null, which is the equivalent of getting an\r\n                 * empty TXT response. When the TXT lookup does finish, its handler\r\n                 * can update the service config by using the same address list */\r\n                this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\r\n            }, err => {\r\n                if (this.pendingLookupPromise === null) {\r\n                    return;\r\n                }\r\n                trace('Resolution error for target ' +\r\n                    (0, uri_parser_1.uriToString)(this.target) +\r\n                    ': ' +\r\n                    err.message);\r\n                this.pendingLookupPromise = null;\r\n                this.stopNextResolutionTimer();\r\n                this.listener.onError(this.defaultResolutionError);\r\n            });\r\n            /* If there already is a still-pending TXT resolution, we can just use\r\n             * that result when it comes in */\r\n            if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\r\n                /* We handle the TXT query promise differently than the others because\r\n                 * the name resolution attempt as a whole is a success even if the TXT\r\n                 * lookup fails */\r\n                this.pendingTxtPromise = resolveTxtPromise(hostname);\r\n                this.pendingTxtPromise.then(txtRecord => {\r\n                    if (this.pendingTxtPromise === null) {\r\n                        return;\r\n                    }\r\n                    this.pendingTxtPromise = null;\r\n                    try {\r\n                        this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\r\n                    }\r\n                    catch (err) {\r\n                        this.latestServiceConfigError = {\r\n                            code: constants_1.Status.UNAVAILABLE,\r\n                            details: `Parsing service config failed with error ${err.message}`,\r\n                            metadata: new metadata_1.Metadata(),\r\n                        };\r\n                    }\r\n                    if (this.latestLookupResult !== null) {\r\n                        /* We rely here on the assumption that calling this function with\r\n                         * identical parameters will be essentialy idempotent, and calling\r\n                         * it with the same address list and a different service config\r\n                         * should result in a fast and seamless switchover. */\r\n                        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\r\n                    }\r\n                }, err => {\r\n                    /* If TXT lookup fails we should do nothing, which means that we\r\n                     * continue to use the result of the most recent successful lookup,\r\n                     * or the default null config object if there has never been a\r\n                     * successful lookup. We do not set the latestServiceConfigError\r\n                     * here because that is specifically used for response validation\r\n                     * errors. We still need to handle this error so that it does not\r\n                     * bubble up as an unhandled promise rejection. */\r\n                });\r\n            }\r\n        }\r\n    }\r\n    startNextResolutionTimer() {\r\n        var _a, _b;\r\n        clearTimeout(this.nextResolutionTimer);\r\n        this.nextResolutionTimer = (_b = (_a = setTimeout(() => {\r\n            this.stopNextResolutionTimer();\r\n            if (this.continueResolving) {\r\n                this.startResolutionWithBackoff();\r\n            }\r\n        }, this.minTimeBetweenResolutionsMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        this.isNextResolutionTimerRunning = true;\r\n    }\r\n    stopNextResolutionTimer() {\r\n        clearTimeout(this.nextResolutionTimer);\r\n        this.isNextResolutionTimerRunning = false;\r\n    }\r\n    startResolutionWithBackoff() {\r\n        if (this.pendingLookupPromise === null) {\r\n            this.continueResolving = false;\r\n            this.backoff.runOnce();\r\n            this.startNextResolutionTimer();\r\n            this.startResolution();\r\n        }\r\n    }\r\n    updateResolution() {\r\n        /* If there is a pending lookup, just let it finish. Otherwise, if the\r\n         * nextResolutionTimer or backoff timer is running, set the\r\n         * continueResolving flag to resolve when whichever of those timers\r\n         * fires. Otherwise, start resolving immediately. */\r\n        if (this.pendingLookupPromise === null) {\r\n            if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\r\n                if (this.isNextResolutionTimerRunning) {\r\n                    trace('resolution update delayed by \"min time between resolutions\" rate limit');\r\n                }\r\n                else {\r\n                    trace('resolution update delayed by backoff timer until ' + this.backoff.getEndTime().toISOString());\r\n                }\r\n                this.continueResolving = true;\r\n            }\r\n            else {\r\n                this.startResolutionWithBackoff();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Reset the resolver to the same state it had when it was created. In-flight\r\n     * DNS requests cannot be cancelled, but they are discarded and their results\r\n     * will be ignored.\r\n     */\r\n    destroy() {\r\n        this.continueResolving = false;\r\n        this.backoff.reset();\r\n        this.backoff.stop();\r\n        this.stopNextResolutionTimer();\r\n        this.pendingLookupPromise = null;\r\n        this.pendingTxtPromise = null;\r\n        this.latestLookupResult = null;\r\n        this.latestServiceConfig = null;\r\n        this.latestServiceConfigError = null;\r\n        this.returnedIpResult = false;\r\n    }\r\n    /**\r\n     * Get the default authority for the given target. For IP targets, that is\r\n     * the IP address. For DNS targets, it is the hostname.\r\n     * @param target\r\n     */\r\n    static getDefaultAuthority(target) {\r\n        return target.path;\r\n    }\r\n}\r\n/**\r\n * Set up the DNS resolver class by registering it as the handler for the\r\n * \"dns:\" prefix and as the default resolver.\r\n */\r\nfunction setup() {\r\n    (0, resolver_1.registerResolver)('dns', DnsResolver);\r\n    (0, resolver_1.registerDefaultScheme)('dns');\r\n}\r\nexports.setup = setup;\r\n//# sourceMappingURL=resolver-dns.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-ip.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = void 0;\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'ip_resolver';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst IPV4_SCHEME = 'ipv4';\r\nconst IPV6_SCHEME = 'ipv6';\r\n/**\r\n * The default TCP port to connect to if not explicitly specified in the target.\r\n */\r\nconst DEFAULT_PORT = 443;\r\nclass IpResolver {\r\n    constructor(target, listener, channelOptions) {\r\n        var _a;\r\n        this.listener = listener;\r\n        this.addresses = [];\r\n        this.error = null;\r\n        this.hasReturnedResult = false;\r\n        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\r\n        const addresses = [];\r\n        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\r\n            this.error = {\r\n                code: constants_1.Status.UNAVAILABLE,\r\n                details: `Unrecognized scheme ${target.scheme} in IP resolver`,\r\n                metadata: new metadata_1.Metadata(),\r\n            };\r\n            return;\r\n        }\r\n        const pathList = target.path.split(',');\r\n        for (const path of pathList) {\r\n            const hostPort = (0, uri_parser_1.splitHostPort)(path);\r\n            if (hostPort === null) {\r\n                this.error = {\r\n                    code: constants_1.Status.UNAVAILABLE,\r\n                    details: `Failed to parse ${target.scheme} address ${path}`,\r\n                    metadata: new metadata_1.Metadata(),\r\n                };\r\n                return;\r\n            }\r\n            if ((target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host)) ||\r\n                (target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host))) {\r\n                this.error = {\r\n                    code: constants_1.Status.UNAVAILABLE,\r\n                    details: `Failed to parse ${target.scheme} address ${path}`,\r\n                    metadata: new metadata_1.Metadata(),\r\n                };\r\n                return;\r\n            }\r\n            addresses.push({\r\n                host: hostPort.host,\r\n                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT,\r\n            });\r\n        }\r\n        this.addresses = addresses;\r\n        trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\r\n    }\r\n    updateResolution() {\r\n        if (!this.hasReturnedResult) {\r\n            this.hasReturnedResult = true;\r\n            process.nextTick(() => {\r\n                if (this.error) {\r\n                    this.listener.onError(this.error);\r\n                }\r\n                else {\r\n                    this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});\r\n                }\r\n            });\r\n        }\r\n    }\r\n    destroy() {\r\n        this.hasReturnedResult = false;\r\n    }\r\n    static getDefaultAuthority(target) {\r\n        return target.path.split(',')[0];\r\n    }\r\n}\r\nfunction setup() {\r\n    (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);\r\n    (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);\r\n}\r\nexports.setup = setup;\r\n//# sourceMappingURL=resolver-ip.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItaXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQixvQkFBb0IsbUJBQU8sQ0FBQyw4RUFBYTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyw0RUFBWTtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyw0RUFBWTtBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBYztBQUMzQyxnQkFBZ0IsbUJBQU8sQ0FBQywwRUFBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxlQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGVBQWUsVUFBVSxLQUFLO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZUFBZSxVQUFVLEtBQUs7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGO0FBQzdGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdG9fcGgvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItaXAuanM/NjY4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cCA9IHZvaWQgMDtcclxuY29uc3QgbmV0XzEgPSByZXF1aXJlKFwibmV0XCIpO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcclxuY29uc3QgbWV0YWRhdGFfMSA9IHJlcXVpcmUoXCIuL21ldGFkYXRhXCIpO1xyXG5jb25zdCByZXNvbHZlcl8xID0gcmVxdWlyZShcIi4vcmVzb2x2ZXJcIik7XHJcbmNvbnN0IHVyaV9wYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3VyaS1wYXJzZXJcIik7XHJcbmNvbnN0IGxvZ2dpbmcgPSByZXF1aXJlKFwiLi9sb2dnaW5nXCIpO1xyXG5jb25zdCBUUkFDRVJfTkFNRSA9ICdpcF9yZXNvbHZlcic7XHJcbmZ1bmN0aW9uIHRyYWNlKHRleHQpIHtcclxuICAgIGxvZ2dpbmcudHJhY2UoY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkRFQlVHLCBUUkFDRVJfTkFNRSwgdGV4dCk7XHJcbn1cclxuY29uc3QgSVBWNF9TQ0hFTUUgPSAnaXB2NCc7XHJcbmNvbnN0IElQVjZfU0NIRU1FID0gJ2lwdjYnO1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgVENQIHBvcnQgdG8gY29ubmVjdCB0byBpZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgaW4gdGhlIHRhcmdldC5cclxuICovXHJcbmNvbnN0IERFRkFVTFRfUE9SVCA9IDQ0MztcclxuY2xhc3MgSXBSZXNvbHZlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIGxpc3RlbmVyLCBjaGFubmVsT3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XHJcbiAgICAgICAgdGhpcy5hZGRyZXNzZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgdHJhY2UoJ1Jlc29sdmVyIGNvbnN0cnVjdGVkIGZvciB0YXJnZXQgJyArICgwLCB1cmlfcGFyc2VyXzEudXJpVG9TdHJpbmcpKHRhcmdldCkpO1xyXG4gICAgICAgIGNvbnN0IGFkZHJlc3NlcyA9IFtdO1xyXG4gICAgICAgIGlmICghKHRhcmdldC5zY2hlbWUgPT09IElQVjRfU0NIRU1FIHx8IHRhcmdldC5zY2hlbWUgPT09IElQVjZfU0NIRU1FKSkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0ge1xyXG4gICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOQVZBSUxBQkxFLFxyXG4gICAgICAgICAgICAgICAgZGV0YWlsczogYFVucmVjb2duaXplZCBzY2hlbWUgJHt0YXJnZXQuc2NoZW1lfSBpbiBJUCByZXNvbHZlcmAsXHJcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXRoTGlzdCA9IHRhcmdldC5wYXRoLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHBhdGhMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvc3RQb3J0ID0gKDAsIHVyaV9wYXJzZXJfMS5zcGxpdEhvc3RQb3J0KShwYXRoKTtcclxuICAgICAgICAgICAgaWYgKGhvc3RQb3J0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTkFWQUlMQUJMRSxcclxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBgRmFpbGVkIHRvIHBhcnNlICR7dGFyZ2V0LnNjaGVtZX0gYWRkcmVzcyAke3BhdGh9YCxcclxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCh0YXJnZXQuc2NoZW1lID09PSBJUFY0X1NDSEVNRSAmJiAhKDAsIG5ldF8xLmlzSVB2NCkoaG9zdFBvcnQuaG9zdCkpIHx8XHJcbiAgICAgICAgICAgICAgICAodGFyZ2V0LnNjaGVtZSA9PT0gSVBWNl9TQ0hFTUUgJiYgISgwLCBuZXRfMS5pc0lQdjYpKGhvc3RQb3J0Lmhvc3QpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuVU5BVkFJTEFCTEUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogYEZhaWxlZCB0byBwYXJzZSAke3RhcmdldC5zY2hlbWV9IGFkZHJlc3MgJHtwYXRofWAsXHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG5ldyBtZXRhZGF0YV8xLk1ldGFkYXRhKCksXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFkZHJlc3Nlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGhvc3Q6IGhvc3RQb3J0Lmhvc3QsXHJcbiAgICAgICAgICAgICAgICBwb3J0OiAoX2EgPSBob3N0UG9ydC5wb3J0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX1BPUlQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFkZHJlc3NlcyA9IGFkZHJlc3NlcztcclxuICAgICAgICB0cmFjZSgnUGFyc2VkICcgKyB0YXJnZXQuc2NoZW1lICsgJyBhZGRyZXNzIGxpc3QgJyArIHRoaXMuYWRkcmVzc2VzKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVJlc29sdXRpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc1JldHVybmVkUmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5vbkVycm9yKHRoaXMuZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lci5vblN1Y2Nlc3NmdWxSZXNvbHV0aW9uKHRoaXMuYWRkcmVzc2VzLCBudWxsLCBudWxsLCBudWxsLCB7fSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5oYXNSZXR1cm5lZFJlc3VsdCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldERlZmF1bHRBdXRob3JpdHkodGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5wYXRoLnNwbGl0KCcsJylbMF07XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0dXAoKSB7XHJcbiAgICAoMCwgcmVzb2x2ZXJfMS5yZWdpc3RlclJlc29sdmVyKShJUFY0X1NDSEVNRSwgSXBSZXNvbHZlcik7XHJcbiAgICAoMCwgcmVzb2x2ZXJfMS5yZWdpc3RlclJlc29sdmVyKShJUFY2X1NDSEVNRSwgSXBSZXNvbHZlcik7XHJcbn1cclxuZXhwb3J0cy5zZXR1cCA9IHNldHVwO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlci1pcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-uds.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = void 0;\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nclass UdsResolver {\r\n    constructor(target, listener, channelOptions) {\r\n        this.listener = listener;\r\n        this.addresses = [];\r\n        this.hasReturnedResult = false;\r\n        let path;\r\n        if (target.authority === '') {\r\n            path = '/' + target.path;\r\n        }\r\n        else {\r\n            path = target.path;\r\n        }\r\n        this.addresses = [{ path }];\r\n    }\r\n    updateResolution() {\r\n        if (!this.hasReturnedResult) {\r\n            this.hasReturnedResult = true;\r\n            process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});\r\n        }\r\n    }\r\n    destroy() {\r\n        // This resolver owns no resources, so we do nothing here.\r\n    }\r\n    static getDefaultAuthority(target) {\r\n        return 'localhost';\r\n    }\r\n}\r\nfunction setup() {\r\n    (0, resolver_1.registerResolver)('unix', UdsResolver);\r\n}\r\nexports.setup = setup;\r\n//# sourceMappingURL=resolver-uds.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItdWRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixtQkFBbUIsbUJBQU8sQ0FBQyw0RUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsTUFBTTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHVHQUF1RztBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9yZXNvbHZlci11ZHMuanM/NGY2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cCA9IHZvaWQgMDtcclxuY29uc3QgcmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVyXCIpO1xyXG5jbGFzcyBVZHNSZXNvbHZlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIGxpc3RlbmVyLCBjaGFubmVsT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcclxuICAgICAgICB0aGlzLmFkZHJlc3NlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICBsZXQgcGF0aDtcclxuICAgICAgICBpZiAodGFyZ2V0LmF1dGhvcml0eSA9PT0gJycpIHtcclxuICAgICAgICAgICAgcGF0aCA9ICcvJyArIHRhcmdldC5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0aCA9IHRhcmdldC5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFkZHJlc3NlcyA9IFt7IHBhdGggfV07XHJcbiAgICB9XHJcbiAgICB1cGRhdGVSZXNvbHV0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5oYXNSZXR1cm5lZFJlc3VsdCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayh0aGlzLmxpc3RlbmVyLm9uU3VjY2Vzc2Z1bFJlc29sdXRpb24sIHRoaXMuYWRkcmVzc2VzLCBudWxsLCBudWxsLCBudWxsLCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICAvLyBUaGlzIHJlc29sdmVyIG93bnMgbm8gcmVzb3VyY2VzLCBzbyB3ZSBkbyBub3RoaW5nIGhlcmUuXHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0RGVmYXVsdEF1dGhvcml0eSh0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gJ2xvY2FsaG9zdCc7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0dXAoKSB7XHJcbiAgICAoMCwgcmVzb2x2ZXJfMS5yZWdpc3RlclJlc29sdmVyKSgndW5peCcsIFVkc1Jlc29sdmVyKTtcclxufVxyXG5leHBvcnRzLnNldHVwID0gc2V0dXA7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVyLXVkcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.mapUriDefaultScheme = exports.getDefaultAuthority = exports.createResolver = exports.registerDefaultScheme = exports.registerResolver = void 0;\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst registeredResolvers = {};\r\nlet defaultScheme = null;\r\n/**\r\n * Register a resolver class to handle target names prefixed with the `prefix`\r\n * string. This prefix should correspond to a URI scheme name listed in the\r\n * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)\r\n * @param prefix\r\n * @param resolverClass\r\n */\r\nfunction registerResolver(scheme, resolverClass) {\r\n    registeredResolvers[scheme] = resolverClass;\r\n}\r\nexports.registerResolver = registerResolver;\r\n/**\r\n * Register a default resolver to handle target names that do not start with\r\n * any registered prefix.\r\n * @param resolverClass\r\n */\r\nfunction registerDefaultScheme(scheme) {\r\n    defaultScheme = scheme;\r\n}\r\nexports.registerDefaultScheme = registerDefaultScheme;\r\n/**\r\n * Create a name resolver for the specified target, if possible. Throws an\r\n * error if no such name resolver can be created.\r\n * @param target\r\n * @param listener\r\n */\r\nfunction createResolver(target, listener, options) {\r\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\r\n        return new registeredResolvers[target.scheme](target, listener, options);\r\n    }\r\n    else {\r\n        throw new Error(`No resolver could be created for target ${(0, uri_parser_1.uriToString)(target)}`);\r\n    }\r\n}\r\nexports.createResolver = createResolver;\r\n/**\r\n * Get the default authority for the specified target, if possible. Throws an\r\n * error if no registered name resolver can parse that target string.\r\n * @param target\r\n */\r\nfunction getDefaultAuthority(target) {\r\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\r\n        return registeredResolvers[target.scheme].getDefaultAuthority(target);\r\n    }\r\n    else {\r\n        throw new Error(`Invalid target ${(0, uri_parser_1.uriToString)(target)}`);\r\n    }\r\n}\r\nexports.getDefaultAuthority = getDefaultAuthority;\r\nfunction mapUriDefaultScheme(target) {\r\n    if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {\r\n        if (defaultScheme !== null) {\r\n            return {\r\n                scheme: defaultScheme,\r\n                authority: undefined,\r\n                path: (0, uri_parser_1.uriToString)(target),\r\n            };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexports.mapUriDefaultScheme = mapUriDefaultScheme;\r\n//# sourceMappingURL=resolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRywyQkFBMkIsR0FBRyxzQkFBc0IsR0FBRyw2QkFBNkIsR0FBRyx3QkFBd0I7QUFDN0kscUJBQXFCLG1CQUFPLENBQUMsZ0ZBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxzQ0FBc0M7QUFDekc7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxzQ0FBc0M7QUFDaEY7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9yZXNvbHZlci5qcz85OThkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLm1hcFVyaURlZmF1bHRTY2hlbWUgPSBleHBvcnRzLmdldERlZmF1bHRBdXRob3JpdHkgPSBleHBvcnRzLmNyZWF0ZVJlc29sdmVyID0gZXhwb3J0cy5yZWdpc3RlckRlZmF1bHRTY2hlbWUgPSBleHBvcnRzLnJlZ2lzdGVyUmVzb2x2ZXIgPSB2b2lkIDA7XHJcbmNvbnN0IHVyaV9wYXJzZXJfMSA9IHJlcXVpcmUoXCIuL3VyaS1wYXJzZXJcIik7XHJcbmNvbnN0IHJlZ2lzdGVyZWRSZXNvbHZlcnMgPSB7fTtcclxubGV0IGRlZmF1bHRTY2hlbWUgPSBudWxsO1xyXG4vKipcclxuICogUmVnaXN0ZXIgYSByZXNvbHZlciBjbGFzcyB0byBoYW5kbGUgdGFyZ2V0IG5hbWVzIHByZWZpeGVkIHdpdGggdGhlIGBwcmVmaXhgXHJcbiAqIHN0cmluZy4gVGhpcyBwcmVmaXggc2hvdWxkIGNvcnJlc3BvbmQgdG8gYSBVUkkgc2NoZW1lIG5hbWUgbGlzdGVkIGluIHRoZVxyXG4gKiBbZ1JQQyBOYW1lIFJlc29sdXRpb24gZG9jdW1lbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9tYXN0ZXIvZG9jL25hbWluZy5tZClcclxuICogQHBhcmFtIHByZWZpeFxyXG4gKiBAcGFyYW0gcmVzb2x2ZXJDbGFzc1xyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJSZXNvbHZlcihzY2hlbWUsIHJlc29sdmVyQ2xhc3MpIHtcclxuICAgIHJlZ2lzdGVyZWRSZXNvbHZlcnNbc2NoZW1lXSA9IHJlc29sdmVyQ2xhc3M7XHJcbn1cclxuZXhwb3J0cy5yZWdpc3RlclJlc29sdmVyID0gcmVnaXN0ZXJSZXNvbHZlcjtcclxuLyoqXHJcbiAqIFJlZ2lzdGVyIGEgZGVmYXVsdCByZXNvbHZlciB0byBoYW5kbGUgdGFyZ2V0IG5hbWVzIHRoYXQgZG8gbm90IHN0YXJ0IHdpdGhcclxuICogYW55IHJlZ2lzdGVyZWQgcHJlZml4LlxyXG4gKiBAcGFyYW0gcmVzb2x2ZXJDbGFzc1xyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0U2NoZW1lKHNjaGVtZSkge1xyXG4gICAgZGVmYXVsdFNjaGVtZSA9IHNjaGVtZTtcclxufVxyXG5leHBvcnRzLnJlZ2lzdGVyRGVmYXVsdFNjaGVtZSA9IHJlZ2lzdGVyRGVmYXVsdFNjaGVtZTtcclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5hbWUgcmVzb2x2ZXIgZm9yIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LCBpZiBwb3NzaWJsZS4gVGhyb3dzIGFuXHJcbiAqIGVycm9yIGlmIG5vIHN1Y2ggbmFtZSByZXNvbHZlciBjYW4gYmUgY3JlYXRlZC5cclxuICogQHBhcmFtIHRhcmdldFxyXG4gKiBAcGFyYW0gbGlzdGVuZXJcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc29sdmVyKHRhcmdldCwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcclxuICAgIGlmICh0YXJnZXQuc2NoZW1lICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0LnNjaGVtZSBpbiByZWdpc3RlcmVkUmVzb2x2ZXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyByZWdpc3RlcmVkUmVzb2x2ZXJzW3RhcmdldC5zY2hlbWVdKHRhcmdldCwgbGlzdGVuZXIsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByZXNvbHZlciBjb3VsZCBiZSBjcmVhdGVkIGZvciB0YXJnZXQgJHsoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpfWApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuY3JlYXRlUmVzb2x2ZXIgPSBjcmVhdGVSZXNvbHZlcjtcclxuLyoqXHJcbiAqIEdldCB0aGUgZGVmYXVsdCBhdXRob3JpdHkgZm9yIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LCBpZiBwb3NzaWJsZS4gVGhyb3dzIGFuXHJcbiAqIGVycm9yIGlmIG5vIHJlZ2lzdGVyZWQgbmFtZSByZXNvbHZlciBjYW4gcGFyc2UgdGhhdCB0YXJnZXQgc3RyaW5nLlxyXG4gKiBAcGFyYW0gdGFyZ2V0XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCkge1xyXG4gICAgaWYgKHRhcmdldC5zY2hlbWUgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQuc2NoZW1lIGluIHJlZ2lzdGVyZWRSZXNvbHZlcnMpIHtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZFJlc29sdmVyc1t0YXJnZXQuc2NoZW1lXS5nZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdGFyZ2V0ICR7KDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykodGFyZ2V0KX1gKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdldERlZmF1bHRBdXRob3JpdHkgPSBnZXREZWZhdWx0QXV0aG9yaXR5O1xyXG5mdW5jdGlvbiBtYXBVcmlEZWZhdWx0U2NoZW1lKHRhcmdldCkge1xyXG4gICAgaWYgKHRhcmdldC5zY2hlbWUgPT09IHVuZGVmaW5lZCB8fCAhKHRhcmdldC5zY2hlbWUgaW4gcmVnaXN0ZXJlZFJlc29sdmVycykpIHtcclxuICAgICAgICBpZiAoZGVmYXVsdFNjaGVtZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2NoZW1lOiBkZWZhdWx0U2NoZW1lLFxyXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBwYXRoOiAoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG5leHBvcnRzLm1hcFVyaURlZmF1bHRTY2hlbWUgPSBtYXBVcmlEZWZhdWx0U2NoZW1lO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolving-call.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ResolvingCall = void 0;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\r\nconst TRACER_NAME = 'resolving_call';\r\nclass ResolvingCall {\r\n    constructor(channel, method, options, filterStackFactory, credentials, callNumber) {\r\n        this.channel = channel;\r\n        this.method = method;\r\n        this.filterStackFactory = filterStackFactory;\r\n        this.credentials = credentials;\r\n        this.callNumber = callNumber;\r\n        this.child = null;\r\n        this.readPending = false;\r\n        this.pendingMessage = null;\r\n        this.pendingHalfClose = false;\r\n        this.ended = false;\r\n        this.readFilterPending = false;\r\n        this.writeFilterPending = false;\r\n        this.pendingChildStatus = null;\r\n        this.metadata = null;\r\n        this.listener = null;\r\n        this.statusWatchers = [];\r\n        this.deadlineTimer = setTimeout(() => { }, 0);\r\n        this.filterStack = null;\r\n        this.deadline = options.deadline;\r\n        this.host = options.host;\r\n        if (options.parentCall) {\r\n            if (options.flags & constants_1.Propagate.CANCELLATION) {\r\n                options.parentCall.on('cancelled', () => {\r\n                    this.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled by parent call');\r\n                });\r\n            }\r\n            if (options.flags & constants_1.Propagate.DEADLINE) {\r\n                this.trace('Propagating deadline from parent: ' +\r\n                    options.parentCall.getDeadline());\r\n                this.deadline = (0, deadline_1.minDeadline)(this.deadline, options.parentCall.getDeadline());\r\n            }\r\n        }\r\n        this.trace('Created');\r\n        this.runDeadlineTimer();\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\r\n    }\r\n    runDeadlineTimer() {\r\n        clearTimeout(this.deadlineTimer);\r\n        this.trace('Deadline: ' + (0, deadline_1.deadlineToString)(this.deadline));\r\n        const timeout = (0, deadline_1.getRelativeTimeout)(this.deadline);\r\n        if (timeout !== Infinity) {\r\n            this.trace('Deadline will be reached in ' + timeout + 'ms');\r\n            const handleDeadline = () => {\r\n                this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\r\n            };\r\n            if (timeout <= 0) {\r\n                process.nextTick(handleDeadline);\r\n            }\r\n            else {\r\n                this.deadlineTimer = setTimeout(handleDeadline, timeout);\r\n            }\r\n        }\r\n    }\r\n    outputStatus(status) {\r\n        if (!this.ended) {\r\n            this.ended = true;\r\n            if (!this.filterStack) {\r\n                this.filterStack = this.filterStackFactory.createFilter();\r\n            }\r\n            clearTimeout(this.deadlineTimer);\r\n            const filteredStatus = this.filterStack.receiveTrailers(status);\r\n            this.trace('ended with status: code=' +\r\n                filteredStatus.code +\r\n                ' details=\"' +\r\n                filteredStatus.details +\r\n                '\"');\r\n            this.statusWatchers.forEach(watcher => watcher(filteredStatus));\r\n            process.nextTick(() => {\r\n                var _a;\r\n                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\r\n            });\r\n        }\r\n    }\r\n    sendMessageOnChild(context, message) {\r\n        if (!this.child) {\r\n            throw new Error('sendMessageonChild called with child not populated');\r\n        }\r\n        const child = this.child;\r\n        this.writeFilterPending = true;\r\n        this.filterStack.sendMessage(Promise.resolve({ message: message, flags: context.flags })).then(filteredMessage => {\r\n            this.writeFilterPending = false;\r\n            child.sendMessageWithContext(context, filteredMessage.message);\r\n            if (this.pendingHalfClose) {\r\n                child.halfClose();\r\n            }\r\n        }, (status) => {\r\n            this.cancelWithStatus(status.code, status.details);\r\n        });\r\n    }\r\n    getConfig() {\r\n        if (this.ended) {\r\n            return;\r\n        }\r\n        if (!this.metadata || !this.listener) {\r\n            throw new Error('getConfig called before start');\r\n        }\r\n        const configResult = this.channel.getConfig(this.method, this.metadata);\r\n        if (configResult.type === 'NONE') {\r\n            this.channel.queueCallForConfig(this);\r\n            return;\r\n        }\r\n        else if (configResult.type === 'ERROR') {\r\n            if (this.metadata.getOptions().waitForReady) {\r\n                this.channel.queueCallForConfig(this);\r\n            }\r\n            else {\r\n                this.outputStatus(configResult.error);\r\n            }\r\n            return;\r\n        }\r\n        // configResult.type === 'SUCCESS'\r\n        const config = configResult.config;\r\n        if (config.status !== constants_1.Status.OK) {\r\n            const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(config.status, 'Failed to route call to method ' + this.method);\r\n            this.outputStatus({\r\n                code: code,\r\n                details: details,\r\n                metadata: new metadata_1.Metadata(),\r\n            });\r\n            return;\r\n        }\r\n        if (config.methodConfig.timeout) {\r\n            const configDeadline = new Date();\r\n            configDeadline.setSeconds(configDeadline.getSeconds() + config.methodConfig.timeout.seconds);\r\n            configDeadline.setMilliseconds(configDeadline.getMilliseconds() +\r\n                config.methodConfig.timeout.nanos / 1000000);\r\n            this.deadline = (0, deadline_1.minDeadline)(this.deadline, configDeadline);\r\n            this.runDeadlineTimer();\r\n        }\r\n        this.filterStackFactory.push(config.dynamicFilterFactories);\r\n        this.filterStack = this.filterStackFactory.createFilter();\r\n        this.filterStack.sendMetadata(Promise.resolve(this.metadata)).then(filteredMetadata => {\r\n            this.child = this.channel.createInnerCall(config, this.method, this.host, this.credentials, this.deadline);\r\n            this.trace('Created child [' + this.child.getCallNumber() + ']');\r\n            this.child.start(filteredMetadata, {\r\n                onReceiveMetadata: metadata => {\r\n                    this.trace('Received metadata');\r\n                    this.listener.onReceiveMetadata(this.filterStack.receiveMetadata(metadata));\r\n                },\r\n                onReceiveMessage: message => {\r\n                    this.trace('Received message');\r\n                    this.readFilterPending = true;\r\n                    this.filterStack.receiveMessage(message).then(filteredMesssage => {\r\n                        this.trace('Finished filtering received message');\r\n                        this.readFilterPending = false;\r\n                        this.listener.onReceiveMessage(filteredMesssage);\r\n                        if (this.pendingChildStatus) {\r\n                            this.outputStatus(this.pendingChildStatus);\r\n                        }\r\n                    }, (status) => {\r\n                        this.cancelWithStatus(status.code, status.details);\r\n                    });\r\n                },\r\n                onReceiveStatus: status => {\r\n                    this.trace('Received status');\r\n                    if (this.readFilterPending) {\r\n                        this.pendingChildStatus = status;\r\n                    }\r\n                    else {\r\n                        this.outputStatus(status);\r\n                    }\r\n                },\r\n            });\r\n            if (this.readPending) {\r\n                this.child.startRead();\r\n            }\r\n            if (this.pendingMessage) {\r\n                this.sendMessageOnChild(this.pendingMessage.context, this.pendingMessage.message);\r\n            }\r\n            else if (this.pendingHalfClose) {\r\n                this.child.halfClose();\r\n            }\r\n        }, (status) => {\r\n            this.outputStatus(status);\r\n        });\r\n    }\r\n    reportResolverError(status) {\r\n        var _a;\r\n        if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\r\n            this.channel.queueCallForConfig(this);\r\n        }\r\n        else {\r\n            this.outputStatus(status);\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        var _a;\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\r\n        this.outputStatus({\r\n            code: status,\r\n            details: details,\r\n            metadata: new metadata_1.Metadata(),\r\n        });\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\r\n    }\r\n    start(metadata, listener) {\r\n        this.trace('start called');\r\n        this.metadata = metadata.clone();\r\n        this.listener = listener;\r\n        this.getConfig();\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        this.trace('write() called with message of length ' + message.length);\r\n        if (this.child) {\r\n            this.sendMessageOnChild(context, message);\r\n        }\r\n        else {\r\n            this.pendingMessage = { context, message };\r\n        }\r\n    }\r\n    startRead() {\r\n        this.trace('startRead called');\r\n        if (this.child) {\r\n            this.child.startRead();\r\n        }\r\n        else {\r\n            this.readPending = true;\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('halfClose called');\r\n        if (this.child && !this.writeFilterPending) {\r\n            this.child.halfClose();\r\n        }\r\n        else {\r\n            this.pendingHalfClose = true;\r\n        }\r\n    }\r\n    setCredentials(credentials) {\r\n        this.credentials = this.credentials.compose(credentials);\r\n    }\r\n    addStatusWatcher(watcher) {\r\n        this.statusWatchers.push(watcher);\r\n    }\r\n    getCallNumber() {\r\n        return this.callNumber;\r\n    }\r\n}\r\nexports.ResolvingCall = ResolvingCall;\r\n//# sourceMappingURL=resolving-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ResolvingLoadBalancer = void 0;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\r\nconst TRACER_NAME = 'resolving_load_balancer';\r\nfunction trace(text) {\r\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\n/**\r\n * Name match levels in order from most to least specific. This is the order in\r\n * which searches will be performed.\r\n */\r\nconst NAME_MATCH_LEVEL_ORDER = [\r\n    'SERVICE_AND_METHOD',\r\n    'SERVICE',\r\n    'EMPTY',\r\n];\r\nfunction hasMatchingName(service, method, methodConfig, matchLevel) {\r\n    for (const name of methodConfig.name) {\r\n        switch (matchLevel) {\r\n            case 'EMPTY':\r\n                if (!name.service && !name.method) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'SERVICE':\r\n                if (name.service === service && !name.method) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'SERVICE_AND_METHOD':\r\n                if (name.service === service && name.method === method) {\r\n                    return true;\r\n                }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction findMatchingConfig(service, method, methodConfigs, matchLevel) {\r\n    for (const config of methodConfigs) {\r\n        if (hasMatchingName(service, method, config, matchLevel)) {\r\n            return config;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction getDefaultConfigSelector(serviceConfig) {\r\n    return function defaultConfigSelector(methodName, metadata) {\r\n        var _a, _b;\r\n        const splitName = methodName.split('/').filter(x => x.length > 0);\r\n        const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : '';\r\n        const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : '';\r\n        if (serviceConfig && serviceConfig.methodConfig) {\r\n            /* Check for the following in order, and return the first method\r\n             * config that matches:\r\n             * 1. A name that exactly matches the service and method\r\n             * 2. A name with no method set that matches the service\r\n             * 3. An empty name\r\n             */\r\n            for (const matchLevel of NAME_MATCH_LEVEL_ORDER) {\r\n                const matchingConfig = findMatchingConfig(service, method, serviceConfig.methodConfig, matchLevel);\r\n                if (matchingConfig) {\r\n                    return {\r\n                        methodConfig: matchingConfig,\r\n                        pickInformation: {},\r\n                        status: constants_1.Status.OK,\r\n                        dynamicFilterFactories: [],\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            methodConfig: { name: [] },\r\n            pickInformation: {},\r\n            status: constants_1.Status.OK,\r\n            dynamicFilterFactories: [],\r\n        };\r\n    };\r\n}\r\nclass ResolvingLoadBalancer {\r\n    /**\r\n     * Wrapper class that behaves like a `LoadBalancer` and also handles name\r\n     * resolution internally.\r\n     * @param target The address of the backend to connect to.\r\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\r\n     *     this load balancer's owner.\r\n     * @param defaultServiceConfig The default service configuration to be used\r\n     *     if none is provided by the name resolver. A `null` value indicates\r\n     *     that the default behavior should be the default unconfigured behavior.\r\n     *     In practice, that means using the \"pick first\" load balancer\r\n     *     implmentation\r\n     */\r\n    constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {\r\n        this.target = target;\r\n        this.channelControlHelper = channelControlHelper;\r\n        this.onSuccessfulResolution = onSuccessfulResolution;\r\n        this.onFailedResolution = onFailedResolution;\r\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.latestChildPicker = new picker_1.QueuePicker(this);\r\n        /**\r\n         * This resolving load balancer's current connectivity state.\r\n         */\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        /**\r\n         * The service config object from the last successful resolution, if\r\n         * available. A value of null indicates that we have not yet received a valid\r\n         * service config from the resolver.\r\n         */\r\n        this.previousServiceConfig = null;\r\n        /**\r\n         * Indicates whether we should attempt to resolve again after the backoff\r\n         * timer runs out.\r\n         */\r\n        this.continueResolving = false;\r\n        if (channelOptions['grpc.service_config']) {\r\n            this.defaultServiceConfig = (0, service_config_1.validateServiceConfig)(JSON.parse(channelOptions['grpc.service_config']));\r\n        }\r\n        else {\r\n            this.defaultServiceConfig = {\r\n                loadBalancingConfig: [],\r\n                methodConfig: [],\r\n            };\r\n        }\r\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\r\n        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({\r\n            createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),\r\n            requestReresolution: () => {\r\n                /* If the backoffTimeout is running, we're still backing off from\r\n                 * making resolve requests, so we shouldn't make another one here.\r\n                 * In that case, the backoff timer callback will call\r\n                 * updateResolution */\r\n                if (this.backoffTimeout.isRunning()) {\r\n                    trace('requestReresolution delayed by backoff timer until ' + this.backoffTimeout.getEndTime().toISOString());\r\n                    this.continueResolving = true;\r\n                }\r\n                else {\r\n                    this.updateResolution();\r\n                }\r\n            },\r\n            updateState: (newState, picker) => {\r\n                this.latestChildState = newState;\r\n                this.latestChildPicker = picker;\r\n                this.updateState(newState, picker);\r\n            },\r\n            addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),\r\n            removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper),\r\n        });\r\n        this.innerResolver = (0, resolver_1.createResolver)(target, {\r\n            onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError, configSelector, attributes) => {\r\n                var _a;\r\n                this.backoffTimeout.stop();\r\n                this.backoffTimeout.reset();\r\n                let workingServiceConfig = null;\r\n                /* This first group of conditionals implements the algorithm described\r\n                 * in https://github.com/grpc/proposal/blob/master/A21-service-config-error-handling.md\r\n                 * in the section called \"Behavior on receiving a new gRPC Config\".\r\n                 */\r\n                if (serviceConfig === null) {\r\n                    // Step 4 and 5\r\n                    if (serviceConfigError === null) {\r\n                        // Step 5\r\n                        this.previousServiceConfig = null;\r\n                        workingServiceConfig = this.defaultServiceConfig;\r\n                    }\r\n                    else {\r\n                        // Step 4\r\n                        if (this.previousServiceConfig === null) {\r\n                            // Step 4.ii\r\n                            this.handleResolutionFailure(serviceConfigError);\r\n                        }\r\n                        else {\r\n                            // Step 4.i\r\n                            workingServiceConfig = this.previousServiceConfig;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Step 3\r\n                    workingServiceConfig = serviceConfig;\r\n                    this.previousServiceConfig = serviceConfig;\r\n                }\r\n                const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];\r\n                const loadBalancingConfig = (0, load_balancer_1.getFirstUsableConfig)(workingConfigList, true);\r\n                if (loadBalancingConfig === null) {\r\n                    // There were load balancing configs but none are supported. This counts as a resolution failure\r\n                    this.handleResolutionFailure({\r\n                        code: constants_1.Status.UNAVAILABLE,\r\n                        details: 'All load balancer options in service config are not compatible',\r\n                        metadata: new metadata_1.Metadata(),\r\n                    });\r\n                    return;\r\n                }\r\n                this.childLoadBalancer.updateAddressList(addressList, loadBalancingConfig, attributes);\r\n                const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;\r\n                this.onSuccessfulResolution(finalServiceConfig, configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));\r\n            },\r\n            onError: (error) => {\r\n                this.handleResolutionFailure(error);\r\n            },\r\n        }, channelOptions);\r\n        const backoffOptions = {\r\n            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\r\n            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\r\n        };\r\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\r\n            if (this.continueResolving) {\r\n                this.updateResolution();\r\n                this.continueResolving = false;\r\n            }\r\n            else {\r\n                this.updateState(this.latestChildState, this.latestChildPicker);\r\n            }\r\n        }, backoffOptions);\r\n        this.backoffTimeout.unref();\r\n    }\r\n    updateResolution() {\r\n        this.innerResolver.updateResolution();\r\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\r\n        }\r\n        this.backoffTimeout.runOnce();\r\n    }\r\n    updateState(connectivityState, picker) {\r\n        trace((0, uri_parser_1.uriToString)(this.target) +\r\n            ' ' +\r\n            connectivity_state_1.ConnectivityState[this.currentState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[connectivityState]);\r\n        // Ensure that this.exitIdle() is called by the picker\r\n        if (connectivityState === connectivity_state_1.ConnectivityState.IDLE) {\r\n            picker = new picker_1.QueuePicker(this);\r\n        }\r\n        this.currentState = connectivityState;\r\n        this.channelControlHelper.updateState(connectivityState, picker);\r\n    }\r\n    handleResolutionFailure(error) {\r\n        if (this.latestChildState === connectivity_state_1.ConnectivityState.IDLE) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error));\r\n            this.onFailedResolution(error);\r\n        }\r\n    }\r\n    exitIdle() {\r\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE ||\r\n            this.currentState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n            if (this.backoffTimeout.isRunning()) {\r\n                this.continueResolving = true;\r\n            }\r\n            else {\r\n                this.updateResolution();\r\n            }\r\n        }\r\n        this.childLoadBalancer.exitIdle();\r\n    }\r\n    updateAddressList(addressList, lbConfig) {\r\n        throw new Error('updateAddressList not supported on ResolvingLoadBalancer');\r\n    }\r\n    resetBackoff() {\r\n        this.backoffTimeout.reset();\r\n        this.childLoadBalancer.resetBackoff();\r\n    }\r\n    destroy() {\r\n        this.childLoadBalancer.destroy();\r\n        this.innerResolver.destroy();\r\n        this.backoffTimeout.reset();\r\n        this.backoffTimeout.stop();\r\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.latestChildPicker = new picker_1.QueuePicker(this);\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.previousServiceConfig = null;\r\n        this.continueResolving = false;\r\n    }\r\n    getTypeName() {\r\n        return 'resolving_load_balancer';\r\n    }\r\n}\r\nexports.ResolvingLoadBalancer = ResolvingLoadBalancer;\r\n//# sourceMappingURL=resolving-load-balancer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js":
/*!***************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/retrying-call.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RetryingCall = exports.MessageBufferTracker = exports.RetryThrottler = void 0;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'retrying_call';\r\nclass RetryThrottler {\r\n    constructor(maxTokens, tokenRatio, previousRetryThrottler) {\r\n        this.maxTokens = maxTokens;\r\n        this.tokenRatio = tokenRatio;\r\n        if (previousRetryThrottler) {\r\n            /* When carrying over tokens from a previous config, rescale them to the\r\n             * new max value */\r\n            this.tokens =\r\n                previousRetryThrottler.tokens *\r\n                    (maxTokens / previousRetryThrottler.maxTokens);\r\n        }\r\n        else {\r\n            this.tokens = maxTokens;\r\n        }\r\n    }\r\n    addCallSucceeded() {\r\n        this.tokens = Math.max(this.tokens + this.tokenRatio, this.maxTokens);\r\n    }\r\n    addCallFailed() {\r\n        this.tokens = Math.min(this.tokens - 1, 0);\r\n    }\r\n    canRetryCall() {\r\n        return this.tokens > this.maxTokens / 2;\r\n    }\r\n}\r\nexports.RetryThrottler = RetryThrottler;\r\nclass MessageBufferTracker {\r\n    constructor(totalLimit, limitPerCall) {\r\n        this.totalLimit = totalLimit;\r\n        this.limitPerCall = limitPerCall;\r\n        this.totalAllocated = 0;\r\n        this.allocatedPerCall = new Map();\r\n    }\r\n    allocate(size, callId) {\r\n        var _a;\r\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\r\n        if (this.limitPerCall - currentPerCall < size ||\r\n            this.totalLimit - this.totalAllocated < size) {\r\n            return false;\r\n        }\r\n        this.allocatedPerCall.set(callId, currentPerCall + size);\r\n        this.totalAllocated += size;\r\n        return true;\r\n    }\r\n    free(size, callId) {\r\n        var _a;\r\n        if (this.totalAllocated < size) {\r\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > total allocated ${this.totalAllocated}`);\r\n        }\r\n        this.totalAllocated -= size;\r\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\r\n        if (currentPerCall < size) {\r\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > allocated for call ${currentPerCall}`);\r\n        }\r\n        this.allocatedPerCall.set(callId, currentPerCall - size);\r\n    }\r\n    freeAll(callId) {\r\n        var _a;\r\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\r\n        if (this.totalAllocated < currentPerCall) {\r\n            throw new Error(`Invalid buffer allocation state: call ${callId} allocated ${currentPerCall} > total allocated ${this.totalAllocated}`);\r\n        }\r\n        this.totalAllocated -= currentPerCall;\r\n        this.allocatedPerCall.delete(callId);\r\n    }\r\n}\r\nexports.MessageBufferTracker = MessageBufferTracker;\r\nconst PREVIONS_RPC_ATTEMPTS_METADATA_KEY = 'grpc-previous-rpc-attempts';\r\nclass RetryingCall {\r\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber, bufferTracker, retryThrottler) {\r\n        this.channel = channel;\r\n        this.callConfig = callConfig;\r\n        this.methodName = methodName;\r\n        this.host = host;\r\n        this.credentials = credentials;\r\n        this.deadline = deadline;\r\n        this.callNumber = callNumber;\r\n        this.bufferTracker = bufferTracker;\r\n        this.retryThrottler = retryThrottler;\r\n        this.listener = null;\r\n        this.initialMetadata = null;\r\n        this.underlyingCalls = [];\r\n        this.writeBuffer = [];\r\n        /**\r\n         * The offset of message indices in the writeBuffer. For example, if\r\n         * writeBufferOffset is 10, message 10 is in writeBuffer[0] and message 15\r\n         * is in writeBuffer[5].\r\n         */\r\n        this.writeBufferOffset = 0;\r\n        /**\r\n         * Tracks whether a read has been started, so that we know whether to start\r\n         * reads on new child calls. This only matters for the first read, because\r\n         * once a message comes in the child call becomes committed and there will\r\n         * be no new child calls.\r\n         */\r\n        this.readStarted = false;\r\n        this.transparentRetryUsed = false;\r\n        /**\r\n         * Number of attempts so far\r\n         */\r\n        this.attempts = 0;\r\n        this.hedgingTimer = null;\r\n        this.committedCallIndex = null;\r\n        this.initialRetryBackoffSec = 0;\r\n        this.nextRetryBackoffSec = 0;\r\n        if (callConfig.methodConfig.retryPolicy) {\r\n            this.state = 'RETRY';\r\n            const retryPolicy = callConfig.methodConfig.retryPolicy;\r\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec = Number(retryPolicy.initialBackoff.substring(0, retryPolicy.initialBackoff.length - 1));\r\n        }\r\n        else if (callConfig.methodConfig.hedgingPolicy) {\r\n            this.state = 'HEDGING';\r\n        }\r\n        else {\r\n            this.state = 'TRANSPARENT_ONLY';\r\n        }\r\n    }\r\n    getCallNumber() {\r\n        return this.callNumber;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\r\n    }\r\n    reportStatus(statusObject) {\r\n        this.trace('ended with status: code=' +\r\n            statusObject.code +\r\n            ' details=\"' +\r\n            statusObject.details +\r\n            '\"');\r\n        this.bufferTracker.freeAll(this.callNumber);\r\n        this.writeBufferOffset = this.writeBufferOffset + this.writeBuffer.length;\r\n        this.writeBuffer = [];\r\n        process.nextTick(() => {\r\n            var _a;\r\n            // Explicitly construct status object to remove progress field\r\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus({\r\n                code: statusObject.code,\r\n                details: statusObject.details,\r\n                metadata: statusObject.metadata,\r\n            });\r\n        });\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        this.reportStatus({ code: status, details, metadata: new metadata_1.Metadata() });\r\n        for (const { call } of this.underlyingCalls) {\r\n            call.cancelWithStatus(status, details);\r\n        }\r\n    }\r\n    getPeer() {\r\n        if (this.committedCallIndex !== null) {\r\n            return this.underlyingCalls[this.committedCallIndex].call.getPeer();\r\n        }\r\n        else {\r\n            return 'unknown';\r\n        }\r\n    }\r\n    getBufferEntry(messageIndex) {\r\n        var _a;\r\n        return ((_a = this.writeBuffer[messageIndex - this.writeBufferOffset]) !== null && _a !== void 0 ? _a : {\r\n            entryType: 'FREED',\r\n            allocated: false,\r\n        });\r\n    }\r\n    getNextBufferIndex() {\r\n        return this.writeBufferOffset + this.writeBuffer.length;\r\n    }\r\n    clearSentMessages() {\r\n        if (this.state !== 'COMMITTED') {\r\n            return;\r\n        }\r\n        const earliestNeededMessageIndex = this.underlyingCalls[this.committedCallIndex].nextMessageToSend;\r\n        for (let messageIndex = this.writeBufferOffset; messageIndex < earliestNeededMessageIndex; messageIndex++) {\r\n            const bufferEntry = this.getBufferEntry(messageIndex);\r\n            if (bufferEntry.allocated) {\r\n                this.bufferTracker.free(bufferEntry.message.message.length, this.callNumber);\r\n            }\r\n        }\r\n        this.writeBuffer = this.writeBuffer.slice(earliestNeededMessageIndex - this.writeBufferOffset);\r\n        this.writeBufferOffset = earliestNeededMessageIndex;\r\n    }\r\n    commitCall(index) {\r\n        if (this.state === 'COMMITTED') {\r\n            return;\r\n        }\r\n        if (this.underlyingCalls[index].state === 'COMPLETED') {\r\n            return;\r\n        }\r\n        this.trace('Committing call [' +\r\n            this.underlyingCalls[index].call.getCallNumber() +\r\n            '] at index ' +\r\n            index);\r\n        this.state = 'COMMITTED';\r\n        this.committedCallIndex = index;\r\n        for (let i = 0; i < this.underlyingCalls.length; i++) {\r\n            if (i === index) {\r\n                continue;\r\n            }\r\n            if (this.underlyingCalls[i].state === 'COMPLETED') {\r\n                continue;\r\n            }\r\n            this.underlyingCalls[i].state = 'COMPLETED';\r\n            this.underlyingCalls[i].call.cancelWithStatus(constants_1.Status.CANCELLED, 'Discarded in favor of other hedged attempt');\r\n        }\r\n        this.clearSentMessages();\r\n    }\r\n    commitCallWithMostMessages() {\r\n        if (this.state === 'COMMITTED') {\r\n            return;\r\n        }\r\n        let mostMessages = -1;\r\n        let callWithMostMessages = -1;\r\n        for (const [index, childCall] of this.underlyingCalls.entries()) {\r\n            if (childCall.state === 'ACTIVE' &&\r\n                childCall.nextMessageToSend > mostMessages) {\r\n                mostMessages = childCall.nextMessageToSend;\r\n                callWithMostMessages = index;\r\n            }\r\n        }\r\n        if (callWithMostMessages === -1) {\r\n            /* There are no active calls, disable retries to force the next call that\r\n             * is started to be committed. */\r\n            this.state = 'TRANSPARENT_ONLY';\r\n        }\r\n        else {\r\n            this.commitCall(callWithMostMessages);\r\n        }\r\n    }\r\n    isStatusCodeInList(list, code) {\r\n        return list.some(value => value === code ||\r\n            value.toString().toLowerCase() === constants_1.Status[code].toLowerCase());\r\n    }\r\n    getNextRetryBackoffMs() {\r\n        var _a;\r\n        const retryPolicy = (_a = this.callConfig) === null || _a === void 0 ? void 0 : _a.methodConfig.retryPolicy;\r\n        if (!retryPolicy) {\r\n            return 0;\r\n        }\r\n        const nextBackoffMs = Math.random() * this.nextRetryBackoffSec * 1000;\r\n        const maxBackoffSec = Number(retryPolicy.maxBackoff.substring(0, retryPolicy.maxBackoff.length - 1));\r\n        this.nextRetryBackoffSec = Math.min(this.nextRetryBackoffSec * retryPolicy.backoffMultiplier, maxBackoffSec);\r\n        return nextBackoffMs;\r\n    }\r\n    maybeRetryCall(pushback, callback) {\r\n        if (this.state !== 'RETRY') {\r\n            callback(false);\r\n            return;\r\n        }\r\n        const retryPolicy = this.callConfig.methodConfig.retryPolicy;\r\n        if (this.attempts >= Math.min(retryPolicy.maxAttempts, 5)) {\r\n            callback(false);\r\n            return;\r\n        }\r\n        let retryDelayMs;\r\n        if (pushback === null) {\r\n            retryDelayMs = this.getNextRetryBackoffMs();\r\n        }\r\n        else if (pushback < 0) {\r\n            this.state = 'TRANSPARENT_ONLY';\r\n            callback(false);\r\n            return;\r\n        }\r\n        else {\r\n            retryDelayMs = pushback;\r\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec;\r\n        }\r\n        setTimeout(() => {\r\n            var _a, _b;\r\n            if (this.state !== 'RETRY') {\r\n                callback(false);\r\n                return;\r\n            }\r\n            if ((_b = (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.canRetryCall()) !== null && _b !== void 0 ? _b : true) {\r\n                callback(true);\r\n                this.attempts += 1;\r\n                this.startNewAttempt();\r\n            }\r\n        }, retryDelayMs);\r\n    }\r\n    countActiveCalls() {\r\n        let count = 0;\r\n        for (const call of this.underlyingCalls) {\r\n            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE') {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    handleProcessedStatus(status, callIndex, pushback) {\r\n        var _a, _b, _c;\r\n        switch (this.state) {\r\n            case 'COMMITTED':\r\n            case 'TRANSPARENT_ONLY':\r\n                this.commitCall(callIndex);\r\n                this.reportStatus(status);\r\n                break;\r\n            case 'HEDGING':\r\n                if (this.isStatusCodeInList((_a = this.callConfig.methodConfig.hedgingPolicy.nonFatalStatusCodes) !== null && _a !== void 0 ? _a : [], status.code)) {\r\n                    (_b = this.retryThrottler) === null || _b === void 0 ? void 0 : _b.addCallFailed();\r\n                    let delayMs;\r\n                    if (pushback === null) {\r\n                        delayMs = 0;\r\n                    }\r\n                    else if (pushback < 0) {\r\n                        this.state = 'TRANSPARENT_ONLY';\r\n                        this.commitCall(callIndex);\r\n                        this.reportStatus(status);\r\n                        return;\r\n                    }\r\n                    else {\r\n                        delayMs = pushback;\r\n                    }\r\n                    setTimeout(() => {\r\n                        this.maybeStartHedgingAttempt();\r\n                        // If after trying to start a call there are no active calls, this was the last one\r\n                        if (this.countActiveCalls() === 0) {\r\n                            this.commitCall(callIndex);\r\n                            this.reportStatus(status);\r\n                        }\r\n                    }, delayMs);\r\n                }\r\n                else {\r\n                    this.commitCall(callIndex);\r\n                    this.reportStatus(status);\r\n                }\r\n                break;\r\n            case 'RETRY':\r\n                if (this.isStatusCodeInList(this.callConfig.methodConfig.retryPolicy.retryableStatusCodes, status.code)) {\r\n                    (_c = this.retryThrottler) === null || _c === void 0 ? void 0 : _c.addCallFailed();\r\n                    this.maybeRetryCall(pushback, retried => {\r\n                        if (!retried) {\r\n                            this.commitCall(callIndex);\r\n                            this.reportStatus(status);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    this.commitCall(callIndex);\r\n                    this.reportStatus(status);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    getPushback(metadata) {\r\n        const mdValue = metadata.get('grpc-retry-pushback-ms');\r\n        if (mdValue.length === 0) {\r\n            return null;\r\n        }\r\n        try {\r\n            return parseInt(mdValue[0]);\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    handleChildStatus(status, callIndex) {\r\n        var _a;\r\n        if (this.underlyingCalls[callIndex].state === 'COMPLETED') {\r\n            return;\r\n        }\r\n        this.trace('state=' +\r\n            this.state +\r\n            ' handling status with progress ' +\r\n            status.progress +\r\n            ' from child [' +\r\n            this.underlyingCalls[callIndex].call.getCallNumber() +\r\n            '] in state ' +\r\n            this.underlyingCalls[callIndex].state);\r\n        this.underlyingCalls[callIndex].state = 'COMPLETED';\r\n        if (status.code === constants_1.Status.OK) {\r\n            (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.addCallSucceeded();\r\n            this.commitCall(callIndex);\r\n            this.reportStatus(status);\r\n            return;\r\n        }\r\n        if (this.state === 'COMMITTED') {\r\n            this.reportStatus(status);\r\n            return;\r\n        }\r\n        const pushback = this.getPushback(status.metadata);\r\n        switch (status.progress) {\r\n            case 'NOT_STARTED':\r\n                // RPC never leaves the client, always safe to retry\r\n                this.startNewAttempt();\r\n                break;\r\n            case 'REFUSED':\r\n                // RPC reaches the server library, but not the server application logic\r\n                if (this.transparentRetryUsed) {\r\n                    this.handleProcessedStatus(status, callIndex, pushback);\r\n                }\r\n                else {\r\n                    this.transparentRetryUsed = true;\r\n                    this.startNewAttempt();\r\n                }\r\n                break;\r\n            case 'DROP':\r\n                this.commitCall(callIndex);\r\n                this.reportStatus(status);\r\n                break;\r\n            case 'PROCESSED':\r\n                this.handleProcessedStatus(status, callIndex, pushback);\r\n                break;\r\n        }\r\n    }\r\n    maybeStartHedgingAttempt() {\r\n        if (this.state !== 'HEDGING') {\r\n            return;\r\n        }\r\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\r\n            return;\r\n        }\r\n        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;\r\n        if (this.attempts >= Math.min(hedgingPolicy.maxAttempts, 5)) {\r\n            return;\r\n        }\r\n        this.attempts += 1;\r\n        this.startNewAttempt();\r\n        this.maybeStartHedgingTimer();\r\n    }\r\n    maybeStartHedgingTimer() {\r\n        var _a, _b, _c;\r\n        if (this.hedgingTimer) {\r\n            clearTimeout(this.hedgingTimer);\r\n        }\r\n        if (this.state !== 'HEDGING') {\r\n            return;\r\n        }\r\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\r\n            return;\r\n        }\r\n        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;\r\n        if (this.attempts >= Math.min(hedgingPolicy.maxAttempts, 5)) {\r\n            return;\r\n        }\r\n        const hedgingDelayString = (_a = hedgingPolicy.hedgingDelay) !== null && _a !== void 0 ? _a : '0s';\r\n        const hedgingDelaySec = Number(hedgingDelayString.substring(0, hedgingDelayString.length - 1));\r\n        this.hedgingTimer = setTimeout(() => {\r\n            this.maybeStartHedgingAttempt();\r\n        }, hedgingDelaySec * 1000);\r\n        (_c = (_b = this.hedgingTimer).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\r\n    }\r\n    startNewAttempt() {\r\n        const child = this.channel.createLoadBalancingCall(this.callConfig, this.methodName, this.host, this.credentials, this.deadline);\r\n        this.trace('Created child call [' +\r\n            child.getCallNumber() +\r\n            '] for attempt ' +\r\n            this.attempts);\r\n        const index = this.underlyingCalls.length;\r\n        this.underlyingCalls.push({\r\n            state: 'ACTIVE',\r\n            call: child,\r\n            nextMessageToSend: 0,\r\n        });\r\n        const previousAttempts = this.attempts - 1;\r\n        const initialMetadata = this.initialMetadata.clone();\r\n        if (previousAttempts > 0) {\r\n            initialMetadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\r\n        }\r\n        let receivedMetadata = false;\r\n        child.start(initialMetadata, {\r\n            onReceiveMetadata: metadata => {\r\n                this.trace('Received metadata from child [' + child.getCallNumber() + ']');\r\n                this.commitCall(index);\r\n                receivedMetadata = true;\r\n                if (previousAttempts > 0) {\r\n                    metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\r\n                }\r\n                if (this.underlyingCalls[index].state === 'ACTIVE') {\r\n                    this.listener.onReceiveMetadata(metadata);\r\n                }\r\n            },\r\n            onReceiveMessage: message => {\r\n                this.trace('Received message from child [' + child.getCallNumber() + ']');\r\n                this.commitCall(index);\r\n                if (this.underlyingCalls[index].state === 'ACTIVE') {\r\n                    this.listener.onReceiveMessage(message);\r\n                }\r\n            },\r\n            onReceiveStatus: status => {\r\n                this.trace('Received status from child [' + child.getCallNumber() + ']');\r\n                if (!receivedMetadata && previousAttempts > 0) {\r\n                    status.metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\r\n                }\r\n                this.handleChildStatus(status, index);\r\n            },\r\n        });\r\n        this.sendNextChildMessage(index);\r\n        if (this.readStarted) {\r\n            child.startRead();\r\n        }\r\n    }\r\n    start(metadata, listener) {\r\n        this.trace('start called');\r\n        this.listener = listener;\r\n        this.initialMetadata = metadata;\r\n        this.attempts += 1;\r\n        this.startNewAttempt();\r\n        this.maybeStartHedgingTimer();\r\n    }\r\n    handleChildWriteCompleted(childIndex) {\r\n        var _a, _b;\r\n        const childCall = this.underlyingCalls[childIndex];\r\n        const messageIndex = childCall.nextMessageToSend;\r\n        (_b = (_a = this.getBufferEntry(messageIndex)).callback) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        this.clearSentMessages();\r\n        childCall.nextMessageToSend += 1;\r\n        this.sendNextChildMessage(childIndex);\r\n    }\r\n    sendNextChildMessage(childIndex) {\r\n        const childCall = this.underlyingCalls[childIndex];\r\n        if (childCall.state === 'COMPLETED') {\r\n            return;\r\n        }\r\n        if (this.getBufferEntry(childCall.nextMessageToSend)) {\r\n            const bufferEntry = this.getBufferEntry(childCall.nextMessageToSend);\r\n            switch (bufferEntry.entryType) {\r\n                case 'MESSAGE':\r\n                    childCall.call.sendMessageWithContext({\r\n                        callback: error => {\r\n                            // Ignore error\r\n                            this.handleChildWriteCompleted(childIndex);\r\n                        },\r\n                    }, bufferEntry.message.message);\r\n                    break;\r\n                case 'HALF_CLOSE':\r\n                    childCall.nextMessageToSend += 1;\r\n                    childCall.call.halfClose();\r\n                    break;\r\n                case 'FREED':\r\n                    // Should not be possible\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        var _a;\r\n        this.trace('write() called with message of length ' + message.length);\r\n        const writeObj = {\r\n            message,\r\n            flags: context.flags,\r\n        };\r\n        const messageIndex = this.getNextBufferIndex();\r\n        const bufferEntry = {\r\n            entryType: 'MESSAGE',\r\n            message: writeObj,\r\n            allocated: this.bufferTracker.allocate(message.length, this.callNumber),\r\n        };\r\n        this.writeBuffer.push(bufferEntry);\r\n        if (bufferEntry.allocated) {\r\n            (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\r\n            for (const [callIndex, call] of this.underlyingCalls.entries()) {\r\n                if (call.state === 'ACTIVE' &&\r\n                    call.nextMessageToSend === messageIndex) {\r\n                    call.call.sendMessageWithContext({\r\n                        callback: error => {\r\n                            // Ignore error\r\n                            this.handleChildWriteCompleted(callIndex);\r\n                        },\r\n                    }, message);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.commitCallWithMostMessages();\r\n            // commitCallWithMostMessages can fail if we are between ping attempts\r\n            if (this.committedCallIndex === null) {\r\n                return;\r\n            }\r\n            const call = this.underlyingCalls[this.committedCallIndex];\r\n            bufferEntry.callback = context.callback;\r\n            if (call.state === 'ACTIVE' && call.nextMessageToSend === messageIndex) {\r\n                call.call.sendMessageWithContext({\r\n                    callback: error => {\r\n                        // Ignore error\r\n                        this.handleChildWriteCompleted(this.committedCallIndex);\r\n                    },\r\n                }, message);\r\n            }\r\n        }\r\n    }\r\n    startRead() {\r\n        this.trace('startRead called');\r\n        this.readStarted = true;\r\n        for (const underlyingCall of this.underlyingCalls) {\r\n            if ((underlyingCall === null || underlyingCall === void 0 ? void 0 : underlyingCall.state) === 'ACTIVE') {\r\n                underlyingCall.call.startRead();\r\n            }\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('halfClose called');\r\n        const halfCloseIndex = this.getNextBufferIndex();\r\n        this.writeBuffer.push({\r\n            entryType: 'HALF_CLOSE',\r\n            allocated: false,\r\n        });\r\n        for (const call of this.underlyingCalls) {\r\n            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE' &&\r\n                call.nextMessageToSend === halfCloseIndex) {\r\n                call.nextMessageToSend += 1;\r\n                call.call.halfClose();\r\n            }\r\n        }\r\n    }\r\n    setCredentials(newCredentials) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    getMethod() {\r\n        return this.methodName;\r\n    }\r\n    getHost() {\r\n        return this.host;\r\n    }\r\n}\r\nexports.RetryingCall = RetryingCall;\r\n//# sourceMappingURL=retrying-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/server-call.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-call.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Http2ServerCallStream = exports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/error.js\");\r\nconst TRACER_NAME = 'server_call';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';\r\nconst GRPC_ENCODING_HEADER = 'grpc-encoding';\r\nconst GRPC_MESSAGE_HEADER = 'grpc-message';\r\nconst GRPC_STATUS_HEADER = 'grpc-status';\r\nconst GRPC_TIMEOUT_HEADER = 'grpc-timeout';\r\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\r\nconst deadlineUnitsToMs = {\r\n    H: 3600000,\r\n    M: 60000,\r\n    S: 1000,\r\n    m: 1,\r\n    u: 0.001,\r\n    n: 0.000001,\r\n};\r\nconst defaultCompressionHeaders = {\r\n    // TODO(cjihrig): Remove these encoding headers from the default response\r\n    // once compression is integrated.\r\n    [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',\r\n    [GRPC_ENCODING_HEADER]: 'identity',\r\n};\r\nconst defaultResponseHeaders = {\r\n    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\r\n    [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto',\r\n};\r\nconst defaultResponseOptions = {\r\n    waitForTrailers: true,\r\n};\r\nclass ServerUnaryCallImpl extends events_1.EventEmitter {\r\n    constructor(call, metadata, request) {\r\n        super();\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.request = request;\r\n        this.cancelled = false;\r\n        this.call.setupSurfaceCall(this);\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.call.getPath();\r\n    }\r\n}\r\nexports.ServerUnaryCallImpl = ServerUnaryCallImpl;\r\nclass ServerReadableStreamImpl extends stream_1.Readable {\r\n    constructor(call, metadata, deserialize, encoding) {\r\n        super({ objectMode: true });\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.deserialize = deserialize;\r\n        this.cancelled = false;\r\n        this.call.setupSurfaceCall(this);\r\n        this.call.setupReadable(this, encoding);\r\n    }\r\n    _read(size) {\r\n        if (!this.call.consumeUnpushedMessages(this)) {\r\n            return;\r\n        }\r\n        this.call.resume();\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.call.getPath();\r\n    }\r\n}\r\nexports.ServerReadableStreamImpl = ServerReadableStreamImpl;\r\nclass ServerWritableStreamImpl extends stream_1.Writable {\r\n    constructor(call, metadata, serialize, request) {\r\n        super({ objectMode: true });\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.serialize = serialize;\r\n        this.request = request;\r\n        this.cancelled = false;\r\n        this.trailingMetadata = new metadata_1.Metadata();\r\n        this.call.setupSurfaceCall(this);\r\n        this.on('error', err => {\r\n            this.call.sendError(err);\r\n            this.end();\r\n        });\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.call.getPath();\r\n    }\r\n    _write(chunk, encoding, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    callback) {\r\n        try {\r\n            const response = this.call.serializeMessage(chunk);\r\n            if (!this.call.write(response)) {\r\n                this.call.once('drain', callback);\r\n                return;\r\n            }\r\n        }\r\n        catch (err) {\r\n            this.emit('error', {\r\n                details: (0, error_1.getErrorMessage)(err),\r\n                code: constants_1.Status.INTERNAL,\r\n            });\r\n        }\r\n        callback();\r\n    }\r\n    _final(callback) {\r\n        this.call.sendStatus({\r\n            code: constants_1.Status.OK,\r\n            details: 'OK',\r\n            metadata: this.trailingMetadata,\r\n        });\r\n        callback(null);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    end(metadata) {\r\n        if (metadata) {\r\n            this.trailingMetadata = metadata;\r\n        }\r\n        return super.end();\r\n    }\r\n}\r\nexports.ServerWritableStreamImpl = ServerWritableStreamImpl;\r\nclass ServerDuplexStreamImpl extends stream_1.Duplex {\r\n    constructor(call, metadata, serialize, deserialize, encoding) {\r\n        super({ objectMode: true });\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.serialize = serialize;\r\n        this.deserialize = deserialize;\r\n        this.cancelled = false;\r\n        this.trailingMetadata = new metadata_1.Metadata();\r\n        this.call.setupSurfaceCall(this);\r\n        this.call.setupReadable(this, encoding);\r\n        this.on('error', err => {\r\n            this.call.sendError(err);\r\n            this.end();\r\n        });\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.call.getPath();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    end(metadata) {\r\n        if (metadata) {\r\n            this.trailingMetadata = metadata;\r\n        }\r\n        return super.end();\r\n    }\r\n}\r\nexports.ServerDuplexStreamImpl = ServerDuplexStreamImpl;\r\nServerDuplexStreamImpl.prototype._read =\r\n    ServerReadableStreamImpl.prototype._read;\r\nServerDuplexStreamImpl.prototype._write =\r\n    ServerWritableStreamImpl.prototype._write;\r\nServerDuplexStreamImpl.prototype._final =\r\n    ServerWritableStreamImpl.prototype._final;\r\n// Internal class that wraps the HTTP2 request.\r\nclass Http2ServerCallStream extends events_1.EventEmitter {\r\n    constructor(stream, handler, options) {\r\n        super();\r\n        this.stream = stream;\r\n        this.handler = handler;\r\n        this.cancelled = false;\r\n        this.deadlineTimer = null;\r\n        this.statusSent = false;\r\n        this.deadline = Infinity;\r\n        this.wantTrailers = false;\r\n        this.metadataSent = false;\r\n        this.canPush = false;\r\n        this.isPushPending = false;\r\n        this.bufferedMessages = [];\r\n        this.messagesToPush = [];\r\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\r\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\r\n        this.stream.once('error', (err) => {\r\n            /* We need an error handler to avoid uncaught error event exceptions, but\r\n             * there is nothing we can reasonably do here. Any error event should\r\n             * have a corresponding close event, which handles emitting the cancelled\r\n             * event. And the stream is now in a bad state, so we can't reasonably\r\n             * expect to be able to send an error over it. */\r\n        });\r\n        this.stream.once('close', () => {\r\n            var _a;\r\n            trace('Request to method ' +\r\n                ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +\r\n                ' stream closed with rstCode ' +\r\n                this.stream.rstCode);\r\n            if (!this.statusSent) {\r\n                this.cancelled = true;\r\n                this.emit('cancelled', 'cancelled');\r\n                this.emit('streamEnd', false);\r\n                this.sendStatus({\r\n                    code: constants_1.Status.CANCELLED,\r\n                    details: 'Cancelled by client',\r\n                    metadata: null,\r\n                });\r\n                if (this.deadlineTimer)\r\n                    clearTimeout(this.deadlineTimer);\r\n            }\r\n        });\r\n        this.stream.on('drain', () => {\r\n            this.emit('drain');\r\n        });\r\n        if ('grpc.max_send_message_length' in options) {\r\n            this.maxSendMessageSize = options['grpc.max_send_message_length'];\r\n        }\r\n        if ('grpc.max_receive_message_length' in options) {\r\n            this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\r\n        }\r\n    }\r\n    checkCancelled() {\r\n        /* In some cases the stream can become destroyed before the close event\r\n         * fires. That creates a race condition that this check works around */\r\n        if (this.stream.destroyed || this.stream.closed) {\r\n            this.cancelled = true;\r\n        }\r\n        return this.cancelled;\r\n    }\r\n    getDecompressedMessage(message, encoding) {\r\n        const messageContents = message.subarray(5);\r\n        if (encoding === 'identity') {\r\n            return messageContents;\r\n        }\r\n        else if (encoding === 'deflate' || encoding === 'gzip') {\r\n            let decompresser;\r\n            if (encoding === 'deflate') {\r\n                decompresser = zlib.createInflate();\r\n            }\r\n            else {\r\n                decompresser = zlib.createGunzip();\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                let totalLength = 0;\r\n                const messageParts = [];\r\n                decompresser.on('data', (chunk) => {\r\n                    messageParts.push(chunk);\r\n                    totalLength += chunk.byteLength;\r\n                    if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {\r\n                        decompresser.destroy();\r\n                        reject({\r\n                            code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                            details: `Received message that decompresses to a size larger than ${this.maxReceiveMessageSize}`\r\n                        });\r\n                    }\r\n                });\r\n                decompresser.on('end', () => {\r\n                    resolve(Buffer.concat(messageParts));\r\n                });\r\n                decompresser.write(messageContents);\r\n                decompresser.end();\r\n            });\r\n        }\r\n        else {\r\n            return Promise.reject({\r\n                code: constants_1.Status.UNIMPLEMENTED,\r\n                details: `Received message compressed with unsupported encoding \"${encoding}\"`,\r\n            });\r\n        }\r\n    }\r\n    sendMetadata(customMetadata) {\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        if (this.metadataSent) {\r\n            return;\r\n        }\r\n        this.metadataSent = true;\r\n        const custom = customMetadata ? customMetadata.toHttp2Headers() : null;\r\n        // TODO(cjihrig): Include compression headers.\r\n        const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);\r\n        this.stream.respond(headers, defaultResponseOptions);\r\n    }\r\n    receiveMetadata(headers) {\r\n        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);\r\n        if (logging.isTracerEnabled(TRACER_NAME)) {\r\n            trace('Request to ' +\r\n                this.handler.path +\r\n                ' received headers ' +\r\n                JSON.stringify(metadata.toJSON()));\r\n        }\r\n        // TODO(cjihrig): Receive compression metadata.\r\n        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\r\n        if (timeoutHeader.length > 0) {\r\n            const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);\r\n            if (match === null) {\r\n                const err = new Error('Invalid deadline');\r\n                err.code = constants_1.Status.OUT_OF_RANGE;\r\n                this.sendError(err);\r\n                return metadata;\r\n            }\r\n            const timeout = (+match[1] * deadlineUnitsToMs[match[2]]) | 0;\r\n            const now = new Date();\r\n            this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\r\n            this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);\r\n            metadata.remove(GRPC_TIMEOUT_HEADER);\r\n        }\r\n        // Remove several headers that should not be propagated to the application\r\n        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\r\n        metadata.remove(http2.constants.HTTP2_HEADER_TE);\r\n        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\r\n        metadata.remove('grpc-accept-encoding');\r\n        return metadata;\r\n    }\r\n    receiveUnaryMessage(encoding) {\r\n        return new Promise((resolve, reject) => {\r\n            const { stream } = this;\r\n            let receivedLength = 0;\r\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n            const call = this;\r\n            const body = [];\r\n            const limit = this.maxReceiveMessageSize;\r\n            this.stream.on('data', onData);\r\n            this.stream.on('end', onEnd);\r\n            this.stream.on('error', onEnd);\r\n            function onData(chunk) {\r\n                receivedLength += chunk.byteLength;\r\n                if (limit !== -1 && receivedLength > limit) {\r\n                    stream.removeListener('data', onData);\r\n                    stream.removeListener('end', onEnd);\r\n                    stream.removeListener('error', onEnd);\r\n                    reject({\r\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                        details: `Received message larger than max (${receivedLength} vs. ${limit})`,\r\n                    });\r\n                    return;\r\n                }\r\n                body.push(chunk);\r\n            }\r\n            function onEnd(err) {\r\n                stream.removeListener('data', onData);\r\n                stream.removeListener('end', onEnd);\r\n                stream.removeListener('error', onEnd);\r\n                if (err !== undefined) {\r\n                    reject({ code: constants_1.Status.INTERNAL, details: err.message });\r\n                    return;\r\n                }\r\n                if (receivedLength === 0) {\r\n                    reject({\r\n                        code: constants_1.Status.INTERNAL,\r\n                        details: 'received empty unary message',\r\n                    });\r\n                    return;\r\n                }\r\n                call.emit('receiveMessage');\r\n                const requestBytes = Buffer.concat(body, receivedLength);\r\n                const compressed = requestBytes.readUInt8(0) === 1;\r\n                const compressedMessageEncoding = compressed ? encoding : 'identity';\r\n                const decompressedMessage = call.getDecompressedMessage(requestBytes, compressedMessageEncoding);\r\n                if (Buffer.isBuffer(decompressedMessage)) {\r\n                    resolve(call.deserializeMessageWithInternalError(decompressedMessage));\r\n                    return;\r\n                }\r\n                decompressedMessage.then(decompressed => resolve(call.deserializeMessageWithInternalError(decompressed)), (err) => reject(err.code\r\n                    ? err\r\n                    : {\r\n                        code: constants_1.Status.INTERNAL,\r\n                        details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`,\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n    async deserializeMessageWithInternalError(buffer) {\r\n        try {\r\n            return this.deserializeMessage(buffer);\r\n        }\r\n        catch (err) {\r\n            throw {\r\n                details: (0, error_1.getErrorMessage)(err),\r\n                code: constants_1.Status.INTERNAL,\r\n            };\r\n        }\r\n    }\r\n    serializeMessage(value) {\r\n        const messageBuffer = this.handler.serialize(value);\r\n        // TODO(cjihrig): Call compression aware serializeMessage().\r\n        const byteLength = messageBuffer.byteLength;\r\n        const output = Buffer.allocUnsafe(byteLength + 5);\r\n        output.writeUInt8(0, 0);\r\n        output.writeUInt32BE(byteLength, 1);\r\n        messageBuffer.copy(output, 5);\r\n        return output;\r\n    }\r\n    deserializeMessage(bytes) {\r\n        return this.handler.deserialize(bytes);\r\n    }\r\n    async sendUnaryMessage(err, value, metadata, flags) {\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        if (metadata === undefined) {\r\n            metadata = null;\r\n        }\r\n        if (err) {\r\n            if (!Object.prototype.hasOwnProperty.call(err, 'metadata') && metadata) {\r\n                err.metadata = metadata;\r\n            }\r\n            this.sendError(err);\r\n            return;\r\n        }\r\n        try {\r\n            const response = this.serializeMessage(value);\r\n            this.write(response);\r\n            this.sendStatus({ code: constants_1.Status.OK, details: 'OK', metadata });\r\n        }\r\n        catch (err) {\r\n            this.sendError({\r\n                details: (0, error_1.getErrorMessage)(err),\r\n                code: constants_1.Status.INTERNAL,\r\n            });\r\n        }\r\n    }\r\n    sendStatus(statusObj) {\r\n        var _a, _b;\r\n        this.emit('callEnd', statusObj.code);\r\n        this.emit('streamEnd', statusObj.code === constants_1.Status.OK);\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        trace('Request to method ' +\r\n            ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +\r\n            ' ended with status code: ' +\r\n            constants_1.Status[statusObj.code] +\r\n            ' details: ' +\r\n            statusObj.details);\r\n        if (this.deadlineTimer)\r\n            clearTimeout(this.deadlineTimer);\r\n        if (this.stream.headersSent) {\r\n            if (!this.wantTrailers) {\r\n                this.wantTrailers = true;\r\n                this.stream.once('wantTrailers', () => {\r\n                    var _a;\r\n                    const trailersToSend = Object.assign({ [GRPC_STATUS_HEADER]: statusObj.code, [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details) }, (_a = statusObj.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());\r\n                    this.stream.sendTrailers(trailersToSend);\r\n                    this.statusSent = true;\r\n                });\r\n                this.stream.end();\r\n            }\r\n        }\r\n        else {\r\n            // Trailers-only response\r\n            const trailersToSend = Object.assign(Object.assign({ [GRPC_STATUS_HEADER]: statusObj.code, [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details) }, defaultResponseHeaders), (_b = statusObj.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());\r\n            this.stream.respond(trailersToSend, { endStream: true });\r\n            this.statusSent = true;\r\n        }\r\n    }\r\n    sendError(error) {\r\n        const status = {\r\n            code: constants_1.Status.UNKNOWN,\r\n            details: 'message' in error ? error.message : 'Unknown Error',\r\n            metadata: 'metadata' in error && error.metadata !== undefined\r\n                ? error.metadata\r\n                : null,\r\n        };\r\n        if ('code' in error &&\r\n            typeof error.code === 'number' &&\r\n            Number.isInteger(error.code)) {\r\n            status.code = error.code;\r\n            if ('details' in error && typeof error.details === 'string') {\r\n                status.details = error.details;\r\n            }\r\n        }\r\n        this.sendStatus(status);\r\n    }\r\n    write(chunk) {\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        if (this.maxSendMessageSize !== -1 &&\r\n            chunk.length > this.maxSendMessageSize) {\r\n            this.sendError({\r\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`,\r\n            });\r\n            return;\r\n        }\r\n        this.sendMetadata();\r\n        this.emit('sendMessage');\r\n        return this.stream.write(chunk);\r\n    }\r\n    resume() {\r\n        this.stream.resume();\r\n    }\r\n    setupSurfaceCall(call) {\r\n        this.once('cancelled', reason => {\r\n            call.cancelled = true;\r\n            call.emit('cancelled', reason);\r\n        });\r\n        this.once('callEnd', status => call.emit('callEnd', status));\r\n    }\r\n    setupReadable(readable, encoding) {\r\n        const decoder = new stream_decoder_1.StreamDecoder(this.maxReceiveMessageSize);\r\n        let readsDone = false;\r\n        let pendingMessageProcessing = false;\r\n        let pushedEnd = false;\r\n        const maybePushEnd = async () => {\r\n            if (!pushedEnd && readsDone && !pendingMessageProcessing) {\r\n                pushedEnd = true;\r\n                await this.pushOrBufferMessage(readable, null);\r\n            }\r\n        };\r\n        this.stream.on('data', async (data) => {\r\n            let messages;\r\n            try {\r\n                messages = decoder.write(data);\r\n            }\r\n            catch (e) {\r\n                this.sendError({\r\n                    code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                    details: e.message\r\n                });\r\n                return;\r\n            }\r\n            pendingMessageProcessing = true;\r\n            this.stream.pause();\r\n            for (const message of messages) {\r\n                this.emit('receiveMessage');\r\n                const compressed = message.readUInt8(0) === 1;\r\n                const compressedMessageEncoding = compressed ? encoding : 'identity';\r\n                let decompressedMessage;\r\n                try {\r\n                    decompressedMessage = await this.getDecompressedMessage(message, compressedMessageEncoding);\r\n                }\r\n                catch (e) {\r\n                    this.sendError(e);\r\n                    return;\r\n                }\r\n                // Encountered an error with decompression; it'll already have been propogated back\r\n                // Just return early\r\n                if (!decompressedMessage)\r\n                    return;\r\n                await this.pushOrBufferMessage(readable, decompressedMessage);\r\n            }\r\n            pendingMessageProcessing = false;\r\n            this.stream.resume();\r\n            await maybePushEnd();\r\n        });\r\n        this.stream.once('end', async () => {\r\n            readsDone = true;\r\n            await maybePushEnd();\r\n        });\r\n    }\r\n    consumeUnpushedMessages(readable) {\r\n        this.canPush = true;\r\n        while (this.messagesToPush.length > 0) {\r\n            const nextMessage = this.messagesToPush.shift();\r\n            const canPush = readable.push(nextMessage);\r\n            if (nextMessage === null || canPush === false) {\r\n                this.canPush = false;\r\n                break;\r\n            }\r\n        }\r\n        return this.canPush;\r\n    }\r\n    async pushOrBufferMessage(readable, messageBytes) {\r\n        if (this.isPushPending) {\r\n            this.bufferedMessages.push(messageBytes);\r\n        }\r\n        else {\r\n            await this.pushMessage(readable, messageBytes);\r\n        }\r\n    }\r\n    async pushMessage(readable, messageBytes) {\r\n        if (messageBytes === null) {\r\n            trace('Received end of stream');\r\n            if (this.canPush) {\r\n                readable.push(null);\r\n            }\r\n            else {\r\n                this.messagesToPush.push(null);\r\n            }\r\n            return;\r\n        }\r\n        trace('Received message of length ' + messageBytes.length);\r\n        this.isPushPending = true;\r\n        try {\r\n            const deserialized = await this.deserializeMessage(messageBytes);\r\n            if (this.canPush) {\r\n                if (!readable.push(deserialized)) {\r\n                    this.canPush = false;\r\n                    this.stream.pause();\r\n                }\r\n            }\r\n            else {\r\n                this.messagesToPush.push(deserialized);\r\n            }\r\n        }\r\n        catch (error) {\r\n            // Ignore any remaining messages when errors occur.\r\n            this.bufferedMessages.length = 0;\r\n            let code = (0, error_1.getErrorCode)(error);\r\n            if (code === null || code < constants_1.Status.OK || code > constants_1.Status.UNAUTHENTICATED) {\r\n                code = constants_1.Status.INTERNAL;\r\n            }\r\n            readable.emit('error', {\r\n                details: (0, error_1.getErrorMessage)(error),\r\n                code: code,\r\n            });\r\n        }\r\n        this.isPushPending = false;\r\n        if (this.bufferedMessages.length > 0) {\r\n            await this.pushMessage(readable, this.bufferedMessages.shift());\r\n        }\r\n    }\r\n    getPeer() {\r\n        var _a;\r\n        const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;\r\n        if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {\r\n            if (socket.remotePort) {\r\n                return `${socket.remoteAddress}:${socket.remotePort}`;\r\n            }\r\n            else {\r\n                return socket.remoteAddress;\r\n            }\r\n        }\r\n        else {\r\n            return 'unknown';\r\n        }\r\n    }\r\n    getDeadline() {\r\n        return this.deadline;\r\n    }\r\n    getPath() {\r\n        return this.handler.path;\r\n    }\r\n}\r\nexports.Http2ServerCallStream = Http2ServerCallStream;\r\nfunction handleExpiredDeadline(call) {\r\n    const err = new Error('Deadline exceeded');\r\n    err.code = constants_1.Status.DEADLINE_EXCEEDED;\r\n    call.sendError(err);\r\n    call.cancelled = true;\r\n    call.emit('cancelled', 'deadline');\r\n}\r\n//# sourceMappingURL=server-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/server-call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-credentials.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ServerCredentials = void 0;\r\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\r\nclass ServerCredentials {\r\n    static createInsecure() {\r\n        return new InsecureServerCredentials();\r\n    }\r\n    static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\r\n        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\r\n            throw new TypeError('rootCerts must be null or a Buffer');\r\n        }\r\n        if (!Array.isArray(keyCertPairs)) {\r\n            throw new TypeError('keyCertPairs must be an array');\r\n        }\r\n        if (typeof checkClientCertificate !== 'boolean') {\r\n            throw new TypeError('checkClientCertificate must be a boolean');\r\n        }\r\n        const cert = [];\r\n        const key = [];\r\n        for (let i = 0; i < keyCertPairs.length; i++) {\r\n            const pair = keyCertPairs[i];\r\n            if (pair === null || typeof pair !== 'object') {\r\n                throw new TypeError(`keyCertPair[${i}] must be an object`);\r\n            }\r\n            if (!Buffer.isBuffer(pair.private_key)) {\r\n                throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\r\n            }\r\n            if (!Buffer.isBuffer(pair.cert_chain)) {\r\n                throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\r\n            }\r\n            cert.push(pair.cert_chain);\r\n            key.push(pair.private_key);\r\n        }\r\n        return new SecureServerCredentials({\r\n            ca: rootCerts || (0, tls_helpers_1.getDefaultRootsData)() || undefined,\r\n            cert,\r\n            key,\r\n            requestCert: checkClientCertificate,\r\n            ciphers: tls_helpers_1.CIPHER_SUITES,\r\n        });\r\n    }\r\n}\r\nexports.ServerCredentials = ServerCredentials;\r\nclass InsecureServerCredentials extends ServerCredentials {\r\n    _isSecure() {\r\n        return false;\r\n    }\r\n    _getSettings() {\r\n        return null;\r\n    }\r\n}\r\nclass SecureServerCredentials extends ServerCredentials {\r\n    constructor(options) {\r\n        super();\r\n        this.options = options;\r\n    }\r\n    _isSecure() {\r\n        return true;\r\n    }\r\n    _getSettings() {\r\n        return this.options;\r\n    }\r\n}\r\n//# sourceMappingURL=server-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc2VydmVyLWNyZWRlbnRpYWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLHNCQUFzQixtQkFBTyxDQUFDLGtGQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0EsbURBQW1ELEVBQUU7QUFDckQ7QUFDQTtBQUNBLG1EQUFtRCxFQUFFO0FBQ3JEO0FBQ0E7QUFDQSxtREFBbUQsRUFBRTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3NlcnZlci1jcmVkZW50aWFscy5qcz85ZmFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlNlcnZlckNyZWRlbnRpYWxzID0gdm9pZCAwO1xyXG5jb25zdCB0bHNfaGVscGVyc18xID0gcmVxdWlyZShcIi4vdGxzLWhlbHBlcnNcIik7XHJcbmNsYXNzIFNlcnZlckNyZWRlbnRpYWxzIHtcclxuICAgIHN0YXRpYyBjcmVhdGVJbnNlY3VyZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEluc2VjdXJlU2VydmVyQ3JlZGVudGlhbHMoKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVhdGVTc2wocm9vdENlcnRzLCBrZXlDZXJ0UGFpcnMsIGNoZWNrQ2xpZW50Q2VydGlmaWNhdGUgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChyb290Q2VydHMgIT09IG51bGwgJiYgIUJ1ZmZlci5pc0J1ZmZlcihyb290Q2VydHMpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Jvb3RDZXJ0cyBtdXN0IGJlIG51bGwgb3IgYSBCdWZmZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGtleUNlcnRQYWlycykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigna2V5Q2VydFBhaXJzIG11c3QgYmUgYW4gYXJyYXknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjaGVja0NsaWVudENlcnRpZmljYXRlICE9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2hlY2tDbGllbnRDZXJ0aWZpY2F0ZSBtdXN0IGJlIGEgYm9vbGVhbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjZXJ0ID0gW107XHJcbiAgICAgICAgY29uc3Qga2V5ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlDZXJ0UGFpcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcGFpciA9IGtleUNlcnRQYWlyc1tpXTtcclxuICAgICAgICAgICAgaWYgKHBhaXIgPT09IG51bGwgfHwgdHlwZW9mIHBhaXIgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBrZXlDZXJ0UGFpclske2l9XSBtdXN0IGJlIGFuIG9iamVjdGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhaXIucHJpdmF0ZV9rZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBrZXlDZXJ0UGFpclske2l9XS5wcml2YXRlX2tleSBtdXN0IGJlIGEgQnVmZmVyYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFpci5jZXJ0X2NoYWluKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihga2V5Q2VydFBhaXJbJHtpfV0uY2VydF9jaGFpbiBtdXN0IGJlIGEgQnVmZmVyYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2VydC5wdXNoKHBhaXIuY2VydF9jaGFpbik7XHJcbiAgICAgICAgICAgIGtleS5wdXNoKHBhaXIucHJpdmF0ZV9rZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFNlY3VyZVNlcnZlckNyZWRlbnRpYWxzKHtcclxuICAgICAgICAgICAgY2E6IHJvb3RDZXJ0cyB8fCAoMCwgdGxzX2hlbHBlcnNfMS5nZXREZWZhdWx0Um9vdHNEYXRhKSgpIHx8IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgY2VydCxcclxuICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICByZXF1ZXN0Q2VydDogY2hlY2tDbGllbnRDZXJ0aWZpY2F0ZSxcclxuICAgICAgICAgICAgY2lwaGVyczogdGxzX2hlbHBlcnNfMS5DSVBIRVJfU1VJVEVTLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU2VydmVyQ3JlZGVudGlhbHMgPSBTZXJ2ZXJDcmVkZW50aWFscztcclxuY2xhc3MgSW5zZWN1cmVTZXJ2ZXJDcmVkZW50aWFscyBleHRlbmRzIFNlcnZlckNyZWRlbnRpYWxzIHtcclxuICAgIF9pc1NlY3VyZSgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBfZ2V0U2V0dGluZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgU2VjdXJlU2VydmVyQ3JlZGVudGlhbHMgZXh0ZW5kcyBTZXJ2ZXJDcmVkZW50aWFscyB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG4gICAgX2lzU2VjdXJlKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgX2dldFNldHRpbmdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmVyLWNyZWRlbnRpYWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/server.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Server = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\nconst server_call_1 = __webpack_require__(/*! ./server-call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server-call.js\");\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\nconst UNLIMITED_CONNECTION_AGE_MS = ~(1 << 31);\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst { HTTP2_HEADER_PATH } = http2.constants;\nconst TRACER_NAME = \"server\";\nfunction noop() {}\nfunction getUnimplementedStatusResponse(methodName) {\n    return {\n        code: constants_1.Status.UNIMPLEMENTED,\n        details: `The server does not implement the method ${methodName}`\n    };\n}\nfunction getDefaultHandler(handlerType, methodName) {\n    const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\n    switch(handlerType){\n        case \"unary\":\n            return (call, callback)=>{\n                callback(unimplementedStatusResponse, null);\n            };\n        case \"clientStream\":\n            return (call, callback)=>{\n                callback(unimplementedStatusResponse, null);\n            };\n        case \"serverStream\":\n            return (call)=>{\n                call.emit(\"error\", unimplementedStatusResponse);\n            };\n        case \"bidi\":\n            return (call)=>{\n                call.emit(\"error\", unimplementedStatusResponse);\n            };\n        default:\n            throw new Error(`Invalid handlerType ${handlerType}`);\n    }\n}\nclass Server {\n    constructor(options){\n        var _a, _b, _c, _d;\n        this.http2ServerList = [];\n        this.handlers = new Map();\n        this.sessions = new Map();\n        this.started = false;\n        this.shutdown = false;\n        this.serverAddressString = \"null\";\n        // Channelz Info\n        this.channelzEnabled = true;\n        this.channelzTrace = new channelz_1.ChannelzTrace();\n        this.callTracker = new channelz_1.ChannelzCallTracker();\n        this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n        this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n        this.options = options !== null && options !== void 0 ? options : {};\n        if (this.options[\"grpc.enable_channelz\"] === 0) {\n            this.channelzEnabled = false;\n        }\n        this.channelzRef = (0, channelz_1.registerChannelzServer)(()=>this.getChannelzInfo(), this.channelzEnabled);\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Server created\");\n        }\n        this.maxConnectionAgeMs = (_a = this.options[\"grpc.max_connection_age_ms\"]) !== null && _a !== void 0 ? _a : UNLIMITED_CONNECTION_AGE_MS;\n        this.maxConnectionAgeGraceMs = (_b = this.options[\"grpc.max_connection_age_grace_ms\"]) !== null && _b !== void 0 ? _b : UNLIMITED_CONNECTION_AGE_MS;\n        this.keepaliveTimeMs = (_c = this.options[\"grpc.keepalive_time_ms\"]) !== null && _c !== void 0 ? _c : KEEPALIVE_MAX_TIME_MS;\n        this.keepaliveTimeoutMs = (_d = this.options[\"grpc.keepalive_timeout_ms\"]) !== null && _d !== void 0 ? _d : KEEPALIVE_TIMEOUT_MS;\n        this.trace(\"Server constructed\");\n    }\n    getChannelzInfo() {\n        return {\n            trace: this.channelzTrace,\n            callTracker: this.callTracker,\n            listenerChildren: this.listenerChildrenTracker.getChildLists(),\n            sessionChildren: this.sessionChildrenTracker.getChildLists()\n        };\n    }\n    getChannelzSessionInfoGetter(session) {\n        return ()=>{\n            var _a, _b, _c;\n            const sessionInfo = this.sessions.get(session);\n            const sessionSocket = session.socket;\n            const remoteAddress = sessionSocket.remoteAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n            const localAddress = sessionSocket.localAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort) : null;\n            let tlsInfo;\n            if (session.encrypted) {\n                const tlsSocket = sessionSocket;\n                const cipherInfo = tlsSocket.getCipher();\n                const certificate = tlsSocket.getCertificate();\n                const peerCertificate = tlsSocket.getPeerCertificate();\n                tlsInfo = {\n                    cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n                    cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n                    localCertificate: certificate && \"raw\" in certificate ? certificate.raw : null,\n                    remoteCertificate: peerCertificate && \"raw\" in peerCertificate ? peerCertificate.raw : null\n                };\n            } else {\n                tlsInfo = null;\n            }\n            const socketInfo = {\n                remoteAddress: remoteAddress,\n                localAddress: localAddress,\n                security: tlsInfo,\n                remoteName: null,\n                streamsStarted: sessionInfo.streamTracker.callsStarted,\n                streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n                streamsFailed: sessionInfo.streamTracker.callsFailed,\n                messagesSent: sessionInfo.messagesSent,\n                messagesReceived: sessionInfo.messagesReceived,\n                keepAlivesSent: 0,\n                lastLocalStreamCreatedTimestamp: null,\n                lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n                lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n                lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n                localFlowControlWindow: (_b = session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n                remoteFlowControlWindow: (_c = session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n            };\n            return socketInfo;\n        };\n    }\n    trace(text) {\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, \"(\" + this.channelzRef.id + \") \" + text);\n    }\n    addProtoService() {\n        throw new Error(\"Not implemented. Use addService() instead\");\n    }\n    addService(service, implementation) {\n        if (service === null || typeof service !== \"object\" || implementation === null || typeof implementation !== \"object\") {\n            throw new Error(\"addService() requires two objects as arguments\");\n        }\n        const serviceKeys = Object.keys(service);\n        if (serviceKeys.length === 0) {\n            throw new Error(\"Cannot add an empty service to a server\");\n        }\n        serviceKeys.forEach((name)=>{\n            const attrs = service[name];\n            let methodType;\n            if (attrs.requestStream) {\n                if (attrs.responseStream) {\n                    methodType = \"bidi\";\n                } else {\n                    methodType = \"clientStream\";\n                }\n            } else {\n                if (attrs.responseStream) {\n                    methodType = \"serverStream\";\n                } else {\n                    methodType = \"unary\";\n                }\n            }\n            let implFn = implementation[name];\n            let impl;\n            if (implFn === undefined && typeof attrs.originalName === \"string\") {\n                implFn = implementation[attrs.originalName];\n            }\n            if (implFn !== undefined) {\n                impl = implFn.bind(implementation);\n            } else {\n                impl = getDefaultHandler(methodType, name);\n            }\n            const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\n            if (success === false) {\n                throw new Error(`Method handler for ${attrs.path} already provided.`);\n            }\n        });\n    }\n    removeService(service) {\n        if (service === null || typeof service !== \"object\") {\n            throw new Error(\"removeService() requires object as argument\");\n        }\n        const serviceKeys = Object.keys(service);\n        serviceKeys.forEach((name)=>{\n            const attrs = service[name];\n            this.unregister(attrs.path);\n        });\n    }\n    bind(port, creds) {\n        throw new Error(\"Not implemented. Use bindAsync() instead\");\n    }\n    bindAsync(port, creds, callback) {\n        if (this.started === true) {\n            throw new Error(\"server is already started\");\n        }\n        if (this.shutdown) {\n            throw new Error(\"bindAsync called after shutdown\");\n        }\n        if (typeof port !== \"string\") {\n            throw new TypeError(\"port must be a string\");\n        }\n        if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\n            throw new TypeError(\"creds must be a ServerCredentials object\");\n        }\n        if (typeof callback !== \"function\") {\n            throw new TypeError(\"callback must be a function\");\n        }\n        const initialPortUri = (0, uri_parser_1.parseUri)(port);\n        if (initialPortUri === null) {\n            throw new Error(`Could not parse port \"${port}\"`);\n        }\n        const portUri = (0, resolver_1.mapUriDefaultScheme)(initialPortUri);\n        if (portUri === null) {\n            throw new Error(`Could not get a default scheme for port \"${port}\"`);\n        }\n        const serverOptions = {\n            maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER\n        };\n        if (\"grpc-node.max_session_memory\" in this.options) {\n            serverOptions.maxSessionMemory = this.options[\"grpc-node.max_session_memory\"];\n        } else {\n            /* By default, set a very large max session memory limit, to effectively\r\n             * disable enforcement of the limit. Some testing indicates that Node's\r\n             * behavior degrades badly when this limit is reached, so we solve that\r\n             * by disabling the check entirely. */ serverOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n        }\n        if (\"grpc.max_concurrent_streams\" in this.options) {\n            serverOptions.settings = {\n                maxConcurrentStreams: this.options[\"grpc.max_concurrent_streams\"]\n            };\n        }\n        const deferredCallback = (error, port)=>{\n            process.nextTick(()=>callback(error, port));\n        };\n        const setupServer = ()=>{\n            let http2Server;\n            if (creds._isSecure()) {\n                const secureServerOptions = Object.assign(serverOptions, creds._getSettings());\n                secureServerOptions.enableTrace = this.options[\"grpc-node.tls_enable_trace\"] === 1;\n                http2Server = http2.createSecureServer(secureServerOptions);\n                http2Server.on(\"secureConnection\", (socket)=>{\n                    /* These errors need to be handled by the user of Http2SecureServer,\r\n                     * according to https://github.com/nodejs/node/issues/35824 */ socket.on(\"error\", (e)=>{\n                        this.trace(\"An incoming TLS connection closed with error: \" + e.message);\n                    });\n                });\n            } else {\n                http2Server = http2.createServer(serverOptions);\n            }\n            http2Server.setTimeout(0, noop);\n            this._setupHandlers(http2Server);\n            return http2Server;\n        };\n        const bindSpecificPort = (addressList, portNum, previousCount)=>{\n            if (addressList.length === 0) {\n                return Promise.resolve({\n                    port: portNum,\n                    count: previousCount\n                });\n            }\n            return Promise.all(addressList.map((address)=>{\n                this.trace(\"Attempting to bind \" + (0, subchannel_address_1.subchannelAddressToString)(address));\n                let addr;\n                if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {\n                    addr = {\n                        host: address.host,\n                        port: portNum\n                    };\n                } else {\n                    addr = address;\n                }\n                const http2Server = setupServer();\n                return new Promise((resolve, reject)=>{\n                    const onError = (err)=>{\n                        this.trace(\"Failed to bind \" + (0, subchannel_address_1.subchannelAddressToString)(address) + \" with error \" + err.message);\n                        resolve(err);\n                    };\n                    http2Server.once(\"error\", onError);\n                    http2Server.listen(addr, ()=>{\n                        if (this.shutdown) {\n                            http2Server.close();\n                            resolve(new Error(\"bindAsync failed because server is shutdown\"));\n                            return;\n                        }\n                        const boundAddress = http2Server.address();\n                        let boundSubchannelAddress;\n                        if (typeof boundAddress === \"string\") {\n                            boundSubchannelAddress = {\n                                path: boundAddress\n                            };\n                        } else {\n                            boundSubchannelAddress = {\n                                host: boundAddress.address,\n                                port: boundAddress.port\n                            };\n                        }\n                        const channelzRef = (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress), ()=>{\n                            return {\n                                localAddress: boundSubchannelAddress,\n                                remoteAddress: null,\n                                security: null,\n                                remoteName: null,\n                                streamsStarted: 0,\n                                streamsSucceeded: 0,\n                                streamsFailed: 0,\n                                messagesSent: 0,\n                                messagesReceived: 0,\n                                keepAlivesSent: 0,\n                                lastLocalStreamCreatedTimestamp: null,\n                                lastRemoteStreamCreatedTimestamp: null,\n                                lastMessageSentTimestamp: null,\n                                lastMessageReceivedTimestamp: null,\n                                localFlowControlWindow: null,\n                                remoteFlowControlWindow: null\n                            };\n                        }, this.channelzEnabled);\n                        if (this.channelzEnabled) {\n                            this.listenerChildrenTracker.refChild(channelzRef);\n                        }\n                        this.http2ServerList.push({\n                            server: http2Server,\n                            channelzRef: channelzRef\n                        });\n                        this.trace(\"Successfully bound \" + (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));\n                        resolve(\"port\" in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);\n                        http2Server.removeListener(\"error\", onError);\n                    });\n                });\n            })).then((results)=>{\n                let count = 0;\n                for (const result of results){\n                    if (typeof result === \"number\") {\n                        count += 1;\n                        if (result !== portNum) {\n                            throw new Error(\"Invalid state: multiple port numbers added from single address\");\n                        }\n                    }\n                }\n                return {\n                    port: portNum,\n                    count: count + previousCount\n                };\n            });\n        };\n        const bindWildcardPort = (addressList)=>{\n            if (addressList.length === 0) {\n                return Promise.resolve({\n                    port: 0,\n                    count: 0\n                });\n            }\n            const address = addressList[0];\n            const http2Server = setupServer();\n            return new Promise((resolve, reject)=>{\n                const onError = (err)=>{\n                    this.trace(\"Failed to bind \" + (0, subchannel_address_1.subchannelAddressToString)(address) + \" with error \" + err.message);\n                    resolve(bindWildcardPort(addressList.slice(1)));\n                };\n                http2Server.once(\"error\", onError);\n                http2Server.listen(address, ()=>{\n                    if (this.shutdown) {\n                        http2Server.close();\n                        resolve({\n                            port: 0,\n                            count: 0\n                        });\n                        return;\n                    }\n                    const boundAddress = http2Server.address();\n                    const boundSubchannelAddress = {\n                        host: boundAddress.address,\n                        port: boundAddress.port\n                    };\n                    const channelzRef = (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress), ()=>{\n                        return {\n                            localAddress: boundSubchannelAddress,\n                            remoteAddress: null,\n                            security: null,\n                            remoteName: null,\n                            streamsStarted: 0,\n                            streamsSucceeded: 0,\n                            streamsFailed: 0,\n                            messagesSent: 0,\n                            messagesReceived: 0,\n                            keepAlivesSent: 0,\n                            lastLocalStreamCreatedTimestamp: null,\n                            lastRemoteStreamCreatedTimestamp: null,\n                            lastMessageSentTimestamp: null,\n                            lastMessageReceivedTimestamp: null,\n                            localFlowControlWindow: null,\n                            remoteFlowControlWindow: null\n                        };\n                    }, this.channelzEnabled);\n                    if (this.channelzEnabled) {\n                        this.listenerChildrenTracker.refChild(channelzRef);\n                    }\n                    this.http2ServerList.push({\n                        server: http2Server,\n                        channelzRef: channelzRef\n                    });\n                    this.trace(\"Successfully bound \" + (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));\n                    resolve(bindSpecificPort(addressList.slice(1), boundAddress.port, 1));\n                    http2Server.removeListener(\"error\", onError);\n                });\n            });\n        };\n        const resolverListener = {\n            onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError)=>{\n                // We only want one resolution result. Discard all future results\n                resolverListener.onSuccessfulResolution = ()=>{};\n                if (this.shutdown) {\n                    deferredCallback(new Error(`bindAsync failed because server is shutdown`), 0);\n                }\n                if (addressList.length === 0) {\n                    deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);\n                    return;\n                }\n                let bindResultPromise;\n                if ((0, subchannel_address_1.isTcpSubchannelAddress)(addressList[0])) {\n                    if (addressList[0].port === 0) {\n                        bindResultPromise = bindWildcardPort(addressList);\n                    } else {\n                        bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);\n                    }\n                } else {\n                    // Use an arbitrary non-zero port for non-TCP addresses\n                    bindResultPromise = bindSpecificPort(addressList, 1, 0);\n                }\n                bindResultPromise.then((bindResult)=>{\n                    if (bindResult.count === 0) {\n                        const errorString = `No address added out of total ${addressList.length} resolved`;\n                        logging.log(constants_1.LogVerbosity.ERROR, errorString);\n                        deferredCallback(new Error(errorString), 0);\n                    } else {\n                        if (bindResult.count < addressList.length) {\n                            logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\n                        }\n                        deferredCallback(null, bindResult.port);\n                    }\n                }, (error)=>{\n                    const errorString = `No address added out of total ${addressList.length} resolved`;\n                    logging.log(constants_1.LogVerbosity.ERROR, errorString);\n                    deferredCallback(new Error(errorString), 0);\n                });\n            },\n            onError: (error)=>{\n                deferredCallback(new Error(error.details), 0);\n            }\n        };\n        const resolver = (0, resolver_1.createResolver)(portUri, resolverListener, this.options);\n        resolver.updateResolution();\n    }\n    forceShutdown() {\n        // Close the server if it is still running.\n        for (const { server: http2Server, channelzRef: ref } of this.http2ServerList){\n            if (http2Server.listening) {\n                http2Server.close(()=>{\n                    if (this.channelzEnabled) {\n                        this.listenerChildrenTracker.unrefChild(ref);\n                        (0, channelz_1.unregisterChannelzRef)(ref);\n                    }\n                });\n            }\n        }\n        this.started = false;\n        this.shutdown = true;\n        // Always destroy any available sessions. It's possible that one or more\n        // tryShutdown() calls are in progress. Don't wait on them to finish.\n        this.sessions.forEach((channelzInfo, session)=>{\n            // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n            // recognize destroy(code) as a valid signature.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            session.destroy(http2.constants.NGHTTP2_CANCEL);\n        });\n        this.sessions.clear();\n        if (this.channelzEnabled) {\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n        }\n    }\n    register(name, handler, serialize, deserialize, type) {\n        if (this.handlers.has(name)) {\n            return false;\n        }\n        this.handlers.set(name, {\n            func: handler,\n            serialize,\n            deserialize,\n            type,\n            path: name\n        });\n        return true;\n    }\n    unregister(name) {\n        return this.handlers.delete(name);\n    }\n    start() {\n        if (this.http2ServerList.length === 0 || this.http2ServerList.every(({ server: http2Server })=>http2Server.listening !== true)) {\n            throw new Error(\"server must be bound in order to start\");\n        }\n        if (this.started === true) {\n            throw new Error(\"server is already started\");\n        }\n        if (this.channelzEnabled) {\n            this.channelzTrace.addTrace(\"CT_INFO\", \"Starting\");\n        }\n        this.started = true;\n    }\n    tryShutdown(callback) {\n        const wrappedCallback = (error)=>{\n            if (this.channelzEnabled) {\n                (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n            }\n            callback(error);\n        };\n        let pendingChecks = 0;\n        function maybeCallback() {\n            pendingChecks--;\n            if (pendingChecks === 0) {\n                wrappedCallback();\n            }\n        }\n        // Close the server if necessary.\n        this.started = false;\n        this.shutdown = true;\n        for (const { server: http2Server, channelzRef: ref } of this.http2ServerList){\n            if (http2Server.listening) {\n                pendingChecks++;\n                http2Server.close(()=>{\n                    if (this.channelzEnabled) {\n                        this.listenerChildrenTracker.unrefChild(ref);\n                        (0, channelz_1.unregisterChannelzRef)(ref);\n                    }\n                    maybeCallback();\n                });\n            }\n        }\n        this.sessions.forEach((channelzInfo, session)=>{\n            if (!session.closed) {\n                pendingChecks += 1;\n                session.close(maybeCallback);\n            }\n        });\n        if (pendingChecks === 0) {\n            wrappedCallback();\n        }\n    }\n    addHttp2Port() {\n        throw new Error(\"Not yet implemented\");\n    }\n    /**\r\n     * Get the channelz reference object for this server. The returned value is\r\n     * garbage if channelz is disabled for this server.\r\n     * @returns\r\n     */ getChannelzRef() {\n        return this.channelzRef;\n    }\n    _verifyContentType(stream, headers) {\n        const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n        if (typeof contentType !== \"string\" || !contentType.startsWith(\"application/grpc\")) {\n            stream.respond({\n                [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE\n            }, {\n                endStream: true\n            });\n            return false;\n        }\n        return true;\n    }\n    _retrieveHandler(path) {\n        this.trace(\"Received call to method \" + path + \" at address \" + this.serverAddressString);\n        const handler = this.handlers.get(path);\n        if (handler === undefined) {\n            this.trace(\"No handler registered for method \" + path + \". Sending UNIMPLEMENTED status.\");\n            return null;\n        }\n        return handler;\n    }\n    _respondWithError(err, stream, channelzSessionInfo = null) {\n        const call = new server_call_1.Http2ServerCallStream(stream, null, this.options);\n        if (err.code === undefined) {\n            err.code = constants_1.Status.INTERNAL;\n        }\n        if (this.channelzEnabled) {\n            this.callTracker.addCallFailed();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n        }\n        call.sendError(err);\n    }\n    _channelzHandler(stream, headers) {\n        const channelzSessionInfo = this.sessions.get(stream.session);\n        this.callTracker.addCallStarted();\n        channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\n        if (!this._verifyContentType(stream, headers)) {\n            this.callTracker.addCallFailed();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n            return;\n        }\n        const path = headers[HTTP2_HEADER_PATH];\n        const handler = this._retrieveHandler(path);\n        if (!handler) {\n            this._respondWithError(getUnimplementedStatusResponse(path), stream, channelzSessionInfo);\n            return;\n        }\n        const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n        call.once(\"callEnd\", (code)=>{\n            if (code === constants_1.Status.OK) {\n                this.callTracker.addCallSucceeded();\n            } else {\n                this.callTracker.addCallFailed();\n            }\n        });\n        if (channelzSessionInfo) {\n            call.once(\"streamEnd\", (success)=>{\n                if (success) {\n                    channelzSessionInfo.streamTracker.addCallSucceeded();\n                } else {\n                    channelzSessionInfo.streamTracker.addCallFailed();\n                }\n            });\n            call.on(\"sendMessage\", ()=>{\n                channelzSessionInfo.messagesSent += 1;\n                channelzSessionInfo.lastMessageSentTimestamp = new Date();\n            });\n            call.on(\"receiveMessage\", ()=>{\n                channelzSessionInfo.messagesReceived += 1;\n                channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n            });\n        }\n        if (!this._runHandlerForCall(call, handler, headers)) {\n            this.callTracker.addCallFailed();\n            channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n            call.sendError({\n                code: constants_1.Status.INTERNAL,\n                details: `Unknown handler type: ${handler.type}`\n            });\n        }\n    }\n    _streamHandler(stream, headers) {\n        if (this._verifyContentType(stream, headers) !== true) {\n            return;\n        }\n        const path = headers[HTTP2_HEADER_PATH];\n        const handler = this._retrieveHandler(path);\n        if (!handler) {\n            this._respondWithError(getUnimplementedStatusResponse(path), stream, null);\n            return;\n        }\n        const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n        if (!this._runHandlerForCall(call, handler, headers)) {\n            call.sendError({\n                code: constants_1.Status.INTERNAL,\n                details: `Unknown handler type: ${handler.type}`\n            });\n        }\n    }\n    _runHandlerForCall(call, handler, headers) {\n        var _a;\n        const metadata = call.receiveMetadata(headers);\n        const encoding = (_a = metadata.get(\"grpc-encoding\")[0]) !== null && _a !== void 0 ? _a : \"identity\";\n        metadata.remove(\"grpc-encoding\");\n        const { type } = handler;\n        if (type === \"unary\") {\n            handleUnary(call, handler, metadata, encoding);\n        } else if (type === \"clientStream\") {\n            handleClientStreaming(call, handler, metadata, encoding);\n        } else if (type === \"serverStream\") {\n            handleServerStreaming(call, handler, metadata, encoding);\n        } else if (type === \"bidi\") {\n            handleBidiStreaming(call, handler, metadata, encoding);\n        } else {\n            return false;\n        }\n        return true;\n    }\n    _setupHandlers(http2Server) {\n        if (http2Server === null) {\n            return;\n        }\n        const serverAddress = http2Server.address();\n        let serverAddressString = \"null\";\n        if (serverAddress) {\n            if (typeof serverAddress === \"string\") {\n                serverAddressString = serverAddress;\n            } else {\n                serverAddressString = serverAddress.address + \":\" + serverAddress.port;\n            }\n        }\n        this.serverAddressString = serverAddressString;\n        const handler = this.channelzEnabled ? this._channelzHandler : this._streamHandler;\n        http2Server.on(\"stream\", handler.bind(this));\n        http2Server.on(\"session\", (session)=>{\n            var _a, _b, _c, _d, _e;\n            if (!this.started) {\n                session.destroy();\n                return;\n            }\n            const channelzRef = (0, channelz_1.registerChannelzSocket)((_a = session.socket.remoteAddress) !== null && _a !== void 0 ? _a : \"unknown\", this.getChannelzSessionInfoGetter(session), this.channelzEnabled);\n            const channelzSessionInfo = {\n                ref: channelzRef,\n                streamTracker: new channelz_1.ChannelzCallTracker(),\n                messagesSent: 0,\n                messagesReceived: 0,\n                lastMessageSentTimestamp: null,\n                lastMessageReceivedTimestamp: null\n            };\n            this.sessions.set(session, channelzSessionInfo);\n            const clientAddress = session.socket.remoteAddress;\n            if (this.channelzEnabled) {\n                this.channelzTrace.addTrace(\"CT_INFO\", \"Connection established by client \" + clientAddress);\n                this.sessionChildrenTracker.refChild(channelzRef);\n            }\n            let connectionAgeTimer = null;\n            let connectionAgeGraceTimer = null;\n            let sessionClosedByServer = false;\n            if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                // Apply a random jitter within a +/-10% range\n                const jitterMagnitude = this.maxConnectionAgeMs / 10;\n                const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\n                connectionAgeTimer = (_c = (_b = setTimeout(()=>{\n                    var _a, _b;\n                    sessionClosedByServer = true;\n                    if (this.channelzEnabled) {\n                        this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped by max connection age from \" + clientAddress);\n                    }\n                    try {\n                        session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), Buffer.from(\"max_age\"));\n                    } catch (e) {\n                        // The goaway can't be sent because the session is already closed\n                        session.destroy();\n                        return;\n                    }\n                    session.close();\n                    /* Allow a grace period after sending the GOAWAY before forcibly\r\n                     * closing the connection. */ if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\n                        connectionAgeGraceTimer = (_b = (_a = setTimeout(()=>{\n                            session.destroy();\n                        }, this.maxConnectionAgeGraceMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    }\n                }, this.maxConnectionAgeMs + jitter)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n            }\n            const keeapliveTimeTimer = (_e = (_d = setInterval(()=>{\n                var _a, _b;\n                const timeoutTImer = (_b = (_a = setTimeout(()=>{\n                    sessionClosedByServer = true;\n                    if (this.channelzEnabled) {\n                        this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped by keepalive timeout from \" + clientAddress);\n                    }\n                    session.close();\n                }, this.keepaliveTimeoutMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n                try {\n                    session.ping((err, duration, payload)=>{\n                        clearTimeout(timeoutTImer);\n                    });\n                } catch (e) {\n                    // The ping can't be sent because the session is already closed\n                    session.destroy();\n                }\n            }, this.keepaliveTimeMs)).unref) === null || _e === void 0 ? void 0 : _e.call(_d);\n            session.on(\"close\", ()=>{\n                if (this.channelzEnabled) {\n                    if (!sessionClosedByServer) {\n                        this.channelzTrace.addTrace(\"CT_INFO\", \"Connection dropped by client \" + clientAddress);\n                    }\n                    this.sessionChildrenTracker.unrefChild(channelzRef);\n                    (0, channelz_1.unregisterChannelzRef)(channelzRef);\n                }\n                if (connectionAgeTimer) {\n                    clearTimeout(connectionAgeTimer);\n                }\n                if (connectionAgeGraceTimer) {\n                    clearTimeout(connectionAgeGraceTimer);\n                }\n                if (keeapliveTimeTimer) {\n                    clearTimeout(keeapliveTimeTimer);\n                }\n                this.sessions.delete(session);\n            });\n        });\n    }\n}\nexports.Server = Server;\nasync function handleUnary(call, handler, metadata, encoding) {\n    try {\n        const request = await call.receiveUnaryMessage(encoding);\n        if (request === undefined || call.cancelled) {\n            return;\n        }\n        const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);\n        handler.func(emitter, (err, value, trailer, flags)=>{\n            call.sendUnaryMessage(err, value, trailer, flags);\n        });\n    } catch (err) {\n        call.sendError(err);\n    }\n}\nfunction handleClientStreaming(call, handler, metadata, encoding) {\n    const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize, encoding);\n    function respond(err, value, trailer, flags) {\n        stream.destroy();\n        call.sendUnaryMessage(err, value, trailer, flags);\n    }\n    if (call.cancelled) {\n        return;\n    }\n    stream.on(\"error\", respond);\n    handler.func(stream, respond);\n}\nasync function handleServerStreaming(call, handler, metadata, encoding) {\n    try {\n        const request = await call.receiveUnaryMessage(encoding);\n        if (request === undefined || call.cancelled) {\n            return;\n        }\n        const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);\n        handler.func(stream);\n    } catch (err) {\n        call.sendError(err);\n    }\n}\nfunction handleBidiStreaming(call, handler, metadata, encoding) {\n    const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize, encoding);\n    if (call.cancelled) {\n        return;\n    }\n    handler.func(stream);\n} //# sourceMappingURL=server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/service-config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.extractAndSelectServiceConfig = exports.validateServiceConfig = exports.validateRetryThrottling = void 0;\r\n/* This file implements gRFC A2 and the service config spec:\r\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\r\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\r\n * function here takes an object with unknown structure and returns its\r\n * specific object type if the input has the right structure, and throws an\r\n * error otherwise. */\r\n/* The any type is purposely used here. All functions validate their input at\r\n * runtime */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\n/**\r\n * Recognizes a number with up to 9 digits after the decimal point, followed by\r\n * an \"s\", representing a number of seconds.\r\n */\r\nconst DURATION_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\r\n/**\r\n * Client language name used for determining whether this client matches a\r\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\r\n */\r\nconst CLIENT_LANGUAGE_STRING = 'node';\r\nfunction validateName(obj) {\r\n    // In this context, and unset field and '' are considered the same\r\n    if ('service' in obj && obj.service !== '') {\r\n        if (typeof obj.service !== 'string') {\r\n            throw new Error(`Invalid method config name: invalid service: expected type string, got ${typeof obj.service}`);\r\n        }\r\n        if ('method' in obj && obj.method !== '') {\r\n            if (typeof obj.method !== 'string') {\r\n                throw new Error(`Invalid method config name: invalid method: expected type string, got ${typeof obj.service}`);\r\n            }\r\n            return {\r\n                service: obj.service,\r\n                method: obj.method,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                service: obj.service,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        if ('method' in obj && obj.method !== undefined) {\r\n            throw new Error(`Invalid method config name: method set with empty or unset service`);\r\n        }\r\n        return {};\r\n    }\r\n}\r\nfunction validateRetryPolicy(obj) {\r\n    if (!('maxAttempts' in obj) ||\r\n        !Number.isInteger(obj.maxAttempts) ||\r\n        obj.maxAttempts < 2) {\r\n        throw new Error('Invalid method config retry policy: maxAttempts must be an integer at least 2');\r\n    }\r\n    if (!('initialBackoff' in obj) ||\r\n        typeof obj.initialBackoff !== 'string' ||\r\n        !DURATION_REGEX.test(obj.initialBackoff)) {\r\n        throw new Error('Invalid method config retry policy: initialBackoff must be a string consisting of a positive integer followed by s');\r\n    }\r\n    if (!('maxBackoff' in obj) ||\r\n        typeof obj.maxBackoff !== 'string' ||\r\n        !DURATION_REGEX.test(obj.maxBackoff)) {\r\n        throw new Error('Invalid method config retry policy: maxBackoff must be a string consisting of a positive integer followed by s');\r\n    }\r\n    if (!('backoffMultiplier' in obj) ||\r\n        typeof obj.backoffMultiplier !== 'number' ||\r\n        obj.backoffMultiplier <= 0) {\r\n        throw new Error('Invalid method config retry policy: backoffMultiplier must be a number greater than 0');\r\n    }\r\n    if (!('retryableStatusCodes' in obj && Array.isArray(obj.retryableStatusCodes))) {\r\n        throw new Error('Invalid method config retry policy: retryableStatusCodes is required');\r\n    }\r\n    if (obj.retryableStatusCodes.length === 0) {\r\n        throw new Error('Invalid method config retry policy: retryableStatusCodes must be non-empty');\r\n    }\r\n    for (const value of obj.retryableStatusCodes) {\r\n        if (typeof value === 'number') {\r\n            if (!Object.values(constants_1.Status).includes(value)) {\r\n                throw new Error('Invalid method config retry policy: retryableStatusCodes value not in status code range');\r\n            }\r\n        }\r\n        else if (typeof value === 'string') {\r\n            if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\r\n                throw new Error('Invalid method config retry policy: retryableStatusCodes value not a status code name');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid method config retry policy: retryableStatusCodes value must be a string or number');\r\n        }\r\n    }\r\n    return {\r\n        maxAttempts: obj.maxAttempts,\r\n        initialBackoff: obj.initialBackoff,\r\n        maxBackoff: obj.maxBackoff,\r\n        backoffMultiplier: obj.backoffMultiplier,\r\n        retryableStatusCodes: obj.retryableStatusCodes,\r\n    };\r\n}\r\nfunction validateHedgingPolicy(obj) {\r\n    if (!('maxAttempts' in obj) ||\r\n        !Number.isInteger(obj.maxAttempts) ||\r\n        obj.maxAttempts < 2) {\r\n        throw new Error('Invalid method config hedging policy: maxAttempts must be an integer at least 2');\r\n    }\r\n    if ('hedgingDelay' in obj &&\r\n        (typeof obj.hedgingDelay !== 'string' ||\r\n            !DURATION_REGEX.test(obj.hedgingDelay))) {\r\n        throw new Error('Invalid method config hedging policy: hedgingDelay must be a string consisting of a positive integer followed by s');\r\n    }\r\n    if ('nonFatalStatusCodes' in obj && Array.isArray(obj.nonFatalStatusCodes)) {\r\n        for (const value of obj.nonFatalStatusCodes) {\r\n            if (typeof value === 'number') {\r\n                if (!Object.values(constants_1.Status).includes(value)) {\r\n                    throw new Error('Invlid method config hedging policy: nonFatalStatusCodes value not in status code range');\r\n                }\r\n            }\r\n            else if (typeof value === 'string') {\r\n                if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\r\n                    throw new Error('Invlid method config hedging policy: nonFatalStatusCodes value not a status code name');\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('Invlid method config hedging policy: nonFatalStatusCodes value must be a string or number');\r\n            }\r\n        }\r\n    }\r\n    const result = {\r\n        maxAttempts: obj.maxAttempts,\r\n    };\r\n    if (obj.hedgingDelay) {\r\n        result.hedgingDelay = obj.hedgingDelay;\r\n    }\r\n    if (obj.nonFatalStatusCodes) {\r\n        result.nonFatalStatusCodes = obj.nonFatalStatusCodes;\r\n    }\r\n    return result;\r\n}\r\nfunction validateMethodConfig(obj) {\r\n    var _a;\r\n    const result = {\r\n        name: [],\r\n    };\r\n    if (!('name' in obj) || !Array.isArray(obj.name)) {\r\n        throw new Error('Invalid method config: invalid name array');\r\n    }\r\n    for (const name of obj.name) {\r\n        result.name.push(validateName(name));\r\n    }\r\n    if ('waitForReady' in obj) {\r\n        if (typeof obj.waitForReady !== 'boolean') {\r\n            throw new Error('Invalid method config: invalid waitForReady');\r\n        }\r\n        result.waitForReady = obj.waitForReady;\r\n    }\r\n    if ('timeout' in obj) {\r\n        if (typeof obj.timeout === 'object') {\r\n            if (!('seconds' in obj.timeout) ||\r\n                !(typeof obj.timeout.seconds === 'number')) {\r\n                throw new Error('Invalid method config: invalid timeout.seconds');\r\n            }\r\n            if (!('nanos' in obj.timeout) ||\r\n                !(typeof obj.timeout.nanos === 'number')) {\r\n                throw new Error('Invalid method config: invalid timeout.nanos');\r\n            }\r\n            result.timeout = obj.timeout;\r\n        }\r\n        else if (typeof obj.timeout === 'string' &&\r\n            DURATION_REGEX.test(obj.timeout)) {\r\n            const timeoutParts = obj.timeout\r\n                .substring(0, obj.timeout.length - 1)\r\n                .split('.');\r\n            result.timeout = {\r\n                seconds: timeoutParts[0] | 0,\r\n                nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0,\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('Invalid method config: invalid timeout');\r\n        }\r\n    }\r\n    if ('maxRequestBytes' in obj) {\r\n        if (typeof obj.maxRequestBytes !== 'number') {\r\n            throw new Error('Invalid method config: invalid maxRequestBytes');\r\n        }\r\n        result.maxRequestBytes = obj.maxRequestBytes;\r\n    }\r\n    if ('maxResponseBytes' in obj) {\r\n        if (typeof obj.maxResponseBytes !== 'number') {\r\n            throw new Error('Invalid method config: invalid maxRequestBytes');\r\n        }\r\n        result.maxResponseBytes = obj.maxResponseBytes;\r\n    }\r\n    if ('retryPolicy' in obj) {\r\n        if ('hedgingPolicy' in obj) {\r\n            throw new Error('Invalid method config: retryPolicy and hedgingPolicy cannot both be specified');\r\n        }\r\n        else {\r\n            result.retryPolicy = validateRetryPolicy(obj.retryPolicy);\r\n        }\r\n    }\r\n    else if ('hedgingPolicy' in obj) {\r\n        result.hedgingPolicy = validateHedgingPolicy(obj.hedgingPolicy);\r\n    }\r\n    return result;\r\n}\r\nfunction validateRetryThrottling(obj) {\r\n    if (!('maxTokens' in obj) ||\r\n        typeof obj.maxTokens !== 'number' ||\r\n        obj.maxTokens <= 0 ||\r\n        obj.maxTokens > 1000) {\r\n        throw new Error('Invalid retryThrottling: maxTokens must be a number in (0, 1000]');\r\n    }\r\n    if (!('tokenRatio' in obj) ||\r\n        typeof obj.tokenRatio !== 'number' ||\r\n        obj.tokenRatio <= 0) {\r\n        throw new Error('Invalid retryThrottling: tokenRatio must be a number greater than 0');\r\n    }\r\n    return {\r\n        maxTokens: +obj.maxTokens.toFixed(3),\r\n        tokenRatio: +obj.tokenRatio.toFixed(3),\r\n    };\r\n}\r\nexports.validateRetryThrottling = validateRetryThrottling;\r\nfunction validateServiceConfig(obj) {\r\n    const result = {\r\n        loadBalancingConfig: [],\r\n        methodConfig: [],\r\n    };\r\n    if ('loadBalancingPolicy' in obj) {\r\n        if (typeof obj.loadBalancingPolicy === 'string') {\r\n            result.loadBalancingPolicy = obj.loadBalancingPolicy;\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config: invalid loadBalancingPolicy');\r\n        }\r\n    }\r\n    if ('loadBalancingConfig' in obj) {\r\n        if (Array.isArray(obj.loadBalancingConfig)) {\r\n            for (const config of obj.loadBalancingConfig) {\r\n                result.loadBalancingConfig.push((0, load_balancer_1.validateLoadBalancingConfig)(config));\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config: invalid loadBalancingConfig');\r\n        }\r\n    }\r\n    if ('methodConfig' in obj) {\r\n        if (Array.isArray(obj.methodConfig)) {\r\n            for (const methodConfig of obj.methodConfig) {\r\n                result.methodConfig.push(validateMethodConfig(methodConfig));\r\n            }\r\n        }\r\n    }\r\n    if ('retryThrottling' in obj) {\r\n        result.retryThrottling = validateRetryThrottling(obj.retryThrottling);\r\n    }\r\n    // Validate method name uniqueness\r\n    const seenMethodNames = [];\r\n    for (const methodConfig of result.methodConfig) {\r\n        for (const name of methodConfig.name) {\r\n            for (const seenName of seenMethodNames) {\r\n                if (name.service === seenName.service &&\r\n                    name.method === seenName.method) {\r\n                    throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\r\n                }\r\n            }\r\n            seenMethodNames.push(name);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.validateServiceConfig = validateServiceConfig;\r\nfunction validateCanaryConfig(obj) {\r\n    if (!('serviceConfig' in obj)) {\r\n        throw new Error('Invalid service config choice: missing service config');\r\n    }\r\n    const result = {\r\n        serviceConfig: validateServiceConfig(obj.serviceConfig),\r\n    };\r\n    if ('clientLanguage' in obj) {\r\n        if (Array.isArray(obj.clientLanguage)) {\r\n            result.clientLanguage = [];\r\n            for (const lang of obj.clientLanguage) {\r\n                if (typeof lang === 'string') {\r\n                    result.clientLanguage.push(lang);\r\n                }\r\n                else {\r\n                    throw new Error('Invalid service config choice: invalid clientLanguage');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config choice: invalid clientLanguage');\r\n        }\r\n    }\r\n    if ('clientHostname' in obj) {\r\n        if (Array.isArray(obj.clientHostname)) {\r\n            result.clientHostname = [];\r\n            for (const lang of obj.clientHostname) {\r\n                if (typeof lang === 'string') {\r\n                    result.clientHostname.push(lang);\r\n                }\r\n                else {\r\n                    throw new Error('Invalid service config choice: invalid clientHostname');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config choice: invalid clientHostname');\r\n        }\r\n    }\r\n    if ('percentage' in obj) {\r\n        if (typeof obj.percentage === 'number' &&\r\n            0 <= obj.percentage &&\r\n            obj.percentage <= 100) {\r\n            result.percentage = obj.percentage;\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config choice: invalid percentage');\r\n        }\r\n    }\r\n    // Validate that no unexpected fields are present\r\n    const allowedFields = [\r\n        'clientLanguage',\r\n        'percentage',\r\n        'clientHostname',\r\n        'serviceConfig',\r\n    ];\r\n    for (const field in obj) {\r\n        if (!allowedFields.includes(field)) {\r\n            throw new Error(`Invalid service config choice: unexpected field ${field}`);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction validateAndSelectCanaryConfig(obj, percentage) {\r\n    if (!Array.isArray(obj)) {\r\n        throw new Error('Invalid service config list');\r\n    }\r\n    for (const config of obj) {\r\n        const validatedConfig = validateCanaryConfig(config);\r\n        /* For each field, we check if it is present, then only discard the\r\n         * config if the field value does not match the current client */\r\n        if (typeof validatedConfig.percentage === 'number' &&\r\n            percentage > validatedConfig.percentage) {\r\n            continue;\r\n        }\r\n        if (Array.isArray(validatedConfig.clientHostname)) {\r\n            let hostnameMatched = false;\r\n            for (const hostname of validatedConfig.clientHostname) {\r\n                if (hostname === os.hostname()) {\r\n                    hostnameMatched = true;\r\n                }\r\n            }\r\n            if (!hostnameMatched) {\r\n                continue;\r\n            }\r\n        }\r\n        if (Array.isArray(validatedConfig.clientLanguage)) {\r\n            let languageMatched = false;\r\n            for (const language of validatedConfig.clientLanguage) {\r\n                if (language === CLIENT_LANGUAGE_STRING) {\r\n                    languageMatched = true;\r\n                }\r\n            }\r\n            if (!languageMatched) {\r\n                continue;\r\n            }\r\n        }\r\n        return validatedConfig.serviceConfig;\r\n    }\r\n    throw new Error('No matching service config found');\r\n}\r\n/**\r\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\r\n * and select a service config with selection fields that all match this client. Most of these steps\r\n * can fail with an error; the caller must handle any errors thrown this way.\r\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\r\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\r\n * @return The service configuration to use, given the percentage value, or null if the service config\r\n *     data has a valid format but none of the options match the current client.\r\n */\r\nfunction extractAndSelectServiceConfig(txtRecord, percentage) {\r\n    for (const record of txtRecord) {\r\n        if (record.length > 0 && record[0].startsWith('grpc_config=')) {\r\n            /* Treat the list of strings in this record as a single string and remove\r\n             * \"grpc_config=\" from the beginning. The rest should be a JSON string */\r\n            const recordString = record.join('').substring('grpc_config='.length);\r\n            const recordJson = JSON.parse(recordString);\r\n            return validateAndSelectCanaryConfig(recordJson, percentage);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;\r\n//# sourceMappingURL=service-config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc2VydmljZS1jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQ0FBcUMsR0FBRyw2QkFBNkIsR0FBRywrQkFBK0I7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsb0JBQW9CLG1CQUFPLENBQUMsOEVBQWE7QUFDekMsd0JBQXdCLG1CQUFPLENBQUMsc0ZBQWlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0dBQXNHLG1CQUFtQjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSx5R0FBeUcsbUJBQW1CO0FBQzVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLGFBQWEsR0FBRyxZQUFZO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLE1BQU07QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9zZXJ2aWNlLWNvbmZpZy5qcz8xZGQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmV4dHJhY3RBbmRTZWxlY3RTZXJ2aWNlQ29uZmlnID0gZXhwb3J0cy52YWxpZGF0ZVNlcnZpY2VDb25maWcgPSBleHBvcnRzLnZhbGlkYXRlUmV0cnlUaHJvdHRsaW5nID0gdm9pZCAwO1xyXG4vKiBUaGlzIGZpbGUgaW1wbGVtZW50cyBnUkZDIEEyIGFuZCB0aGUgc2VydmljZSBjb25maWcgc3BlYzpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2dycGMvcHJvcG9zYWwvYmxvYi9tYXN0ZXIvQTItc2VydmljZS1jb25maWdzLWluLWRucy5tZFxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvbWFzdGVyL2RvYy9zZXJ2aWNlX2NvbmZpZy5tZC4gRWFjaFxyXG4gKiBmdW5jdGlvbiBoZXJlIHRha2VzIGFuIG9iamVjdCB3aXRoIHVua25vd24gc3RydWN0dXJlIGFuZCByZXR1cm5zIGl0c1xyXG4gKiBzcGVjaWZpYyBvYmplY3QgdHlwZSBpZiB0aGUgaW5wdXQgaGFzIHRoZSByaWdodCBzdHJ1Y3R1cmUsIGFuZCB0aHJvd3MgYW5cclxuICogZXJyb3Igb3RoZXJ3aXNlLiAqL1xyXG4vKiBUaGUgYW55IHR5cGUgaXMgcHVycG9zZWx5IHVzZWQgaGVyZS4gQWxsIGZ1bmN0aW9ucyB2YWxpZGF0ZSB0aGVpciBpbnB1dCBhdFxyXG4gKiBydW50aW1lICovXHJcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cclxuY29uc3Qgb3MgPSByZXF1aXJlKFwib3NcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xyXG5jb25zdCBsb2FkX2JhbGFuY2VyXzEgPSByZXF1aXJlKFwiLi9sb2FkLWJhbGFuY2VyXCIpO1xyXG4vKipcclxuICogUmVjb2duaXplcyBhIG51bWJlciB3aXRoIHVwIHRvIDkgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50LCBmb2xsb3dlZCBieVxyXG4gKiBhbiBcInNcIiwgcmVwcmVzZW50aW5nIGEgbnVtYmVyIG9mIHNlY29uZHMuXHJcbiAqL1xyXG5jb25zdCBEVVJBVElPTl9SRUdFWCA9IC9eXFxkKyhcXC5cXGR7MSw5fSk/cyQvO1xyXG4vKipcclxuICogQ2xpZW50IGxhbmd1YWdlIG5hbWUgdXNlZCBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0aGlzIGNsaWVudCBtYXRjaGVzIGFcclxuICogYFNlcnZpY2VDb25maWdDYW5hcnlDb25maWdgJ3MgYGNsaWVudExhbmd1YWdlYCBsaXN0LlxyXG4gKi9cclxuY29uc3QgQ0xJRU5UX0xBTkdVQUdFX1NUUklORyA9ICdub2RlJztcclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lKG9iaikge1xyXG4gICAgLy8gSW4gdGhpcyBjb250ZXh0LCBhbmQgdW5zZXQgZmllbGQgYW5kICcnIGFyZSBjb25zaWRlcmVkIHRoZSBzYW1lXHJcbiAgICBpZiAoJ3NlcnZpY2UnIGluIG9iaiAmJiBvYmouc2VydmljZSAhPT0gJycpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9iai5zZXJ2aWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbWV0aG9kIGNvbmZpZyBuYW1lOiBpbnZhbGlkIHNlcnZpY2U6IGV4cGVjdGVkIHR5cGUgc3RyaW5nLCBnb3QgJHt0eXBlb2Ygb2JqLnNlcnZpY2V9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgnbWV0aG9kJyBpbiBvYmogJiYgb2JqLm1ldGhvZCAhPT0gJycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmoubWV0aG9kICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1ldGhvZCBjb25maWcgbmFtZTogaW52YWxpZCBtZXRob2Q6IGV4cGVjdGVkIHR5cGUgc3RyaW5nLCBnb3QgJHt0eXBlb2Ygb2JqLnNlcnZpY2V9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2U6IG9iai5zZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBvYmoubWV0aG9kLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2U6IG9iai5zZXJ2aWNlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICgnbWV0aG9kJyBpbiBvYmogJiYgb2JqLm1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtZXRob2QgY29uZmlnIG5hbWU6IG1ldGhvZCBzZXQgd2l0aCBlbXB0eSBvciB1bnNldCBzZXJ2aWNlYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZVJldHJ5UG9saWN5KG9iaikge1xyXG4gICAgaWYgKCEoJ21heEF0dGVtcHRzJyBpbiBvYmopIHx8XHJcbiAgICAgICAgIU51bWJlci5pc0ludGVnZXIob2JqLm1heEF0dGVtcHRzKSB8fFxyXG4gICAgICAgIG9iai5tYXhBdHRlbXB0cyA8IDIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWV0aG9kIGNvbmZpZyByZXRyeSBwb2xpY3k6IG1heEF0dGVtcHRzIG11c3QgYmUgYW4gaW50ZWdlciBhdCBsZWFzdCAyJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoISgnaW5pdGlhbEJhY2tvZmYnIGluIG9iaikgfHxcclxuICAgICAgICB0eXBlb2Ygb2JqLmluaXRpYWxCYWNrb2ZmICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICFEVVJBVElPTl9SRUdFWC50ZXN0KG9iai5pbml0aWFsQmFja29mZikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWV0aG9kIGNvbmZpZyByZXRyeSBwb2xpY3k6IGluaXRpYWxCYWNrb2ZmIG11c3QgYmUgYSBzdHJpbmcgY29uc2lzdGluZyBvZiBhIHBvc2l0aXZlIGludGVnZXIgZm9sbG93ZWQgYnkgcycpO1xyXG4gICAgfVxyXG4gICAgaWYgKCEoJ21heEJhY2tvZmYnIGluIG9iaikgfHxcclxuICAgICAgICB0eXBlb2Ygb2JqLm1heEJhY2tvZmYgIT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgIURVUkFUSU9OX1JFR0VYLnRlc3Qob2JqLm1heEJhY2tvZmYpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWcgcmV0cnkgcG9saWN5OiBtYXhCYWNrb2ZmIG11c3QgYmUgYSBzdHJpbmcgY29uc2lzdGluZyBvZiBhIHBvc2l0aXZlIGludGVnZXIgZm9sbG93ZWQgYnkgcycpO1xyXG4gICAgfVxyXG4gICAgaWYgKCEoJ2JhY2tvZmZNdWx0aXBsaWVyJyBpbiBvYmopIHx8XHJcbiAgICAgICAgdHlwZW9mIG9iai5iYWNrb2ZmTXVsdGlwbGllciAhPT0gJ251bWJlcicgfHxcclxuICAgICAgICBvYmouYmFja29mZk11bHRpcGxpZXIgPD0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2QgY29uZmlnIHJldHJ5IHBvbGljeTogYmFja29mZk11bHRpcGxpZXIgbXVzdCBiZSBhIG51bWJlciBncmVhdGVyIHRoYW4gMCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKCEoJ3JldHJ5YWJsZVN0YXR1c0NvZGVzJyBpbiBvYmogJiYgQXJyYXkuaXNBcnJheShvYmoucmV0cnlhYmxlU3RhdHVzQ29kZXMpKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2QgY29uZmlnIHJldHJ5IHBvbGljeTogcmV0cnlhYmxlU3RhdHVzQ29kZXMgaXMgcmVxdWlyZWQnKTtcclxuICAgIH1cclxuICAgIGlmIChvYmoucmV0cnlhYmxlU3RhdHVzQ29kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWcgcmV0cnkgcG9saWN5OiByZXRyeWFibGVTdGF0dXNDb2RlcyBtdXN0IGJlIG5vbi1lbXB0eScpO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBvYmoucmV0cnlhYmxlU3RhdHVzQ29kZXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC52YWx1ZXMoY29uc3RhbnRzXzEuU3RhdHVzKS5pbmNsdWRlcyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2QgY29uZmlnIHJldHJ5IHBvbGljeTogcmV0cnlhYmxlU3RhdHVzQ29kZXMgdmFsdWUgbm90IGluIHN0YXR1cyBjb2RlIHJhbmdlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC52YWx1ZXMoY29uc3RhbnRzXzEuU3RhdHVzKS5pbmNsdWRlcyh2YWx1ZS50b1VwcGVyQ2FzZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWcgcmV0cnkgcG9saWN5OiByZXRyeWFibGVTdGF0dXNDb2RlcyB2YWx1ZSBub3QgYSBzdGF0dXMgY29kZSBuYW1lJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2QgY29uZmlnIHJldHJ5IHBvbGljeTogcmV0cnlhYmxlU3RhdHVzQ29kZXMgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyBvciBudW1iZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1heEF0dGVtcHRzOiBvYmoubWF4QXR0ZW1wdHMsXHJcbiAgICAgICAgaW5pdGlhbEJhY2tvZmY6IG9iai5pbml0aWFsQmFja29mZixcclxuICAgICAgICBtYXhCYWNrb2ZmOiBvYmoubWF4QmFja29mZixcclxuICAgICAgICBiYWNrb2ZmTXVsdGlwbGllcjogb2JqLmJhY2tvZmZNdWx0aXBsaWVyLFxyXG4gICAgICAgIHJldHJ5YWJsZVN0YXR1c0NvZGVzOiBvYmoucmV0cnlhYmxlU3RhdHVzQ29kZXMsXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlSGVkZ2luZ1BvbGljeShvYmopIHtcclxuICAgIGlmICghKCdtYXhBdHRlbXB0cycgaW4gb2JqKSB8fFxyXG4gICAgICAgICFOdW1iZXIuaXNJbnRlZ2VyKG9iai5tYXhBdHRlbXB0cykgfHxcclxuICAgICAgICBvYmoubWF4QXR0ZW1wdHMgPCAyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWcgaGVkZ2luZyBwb2xpY3k6IG1heEF0dGVtcHRzIG11c3QgYmUgYW4gaW50ZWdlciBhdCBsZWFzdCAyJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoJ2hlZGdpbmdEZWxheScgaW4gb2JqICYmXHJcbiAgICAgICAgKHR5cGVvZiBvYmouaGVkZ2luZ0RlbGF5ICE9PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAhRFVSQVRJT05fUkVHRVgudGVzdChvYmouaGVkZ2luZ0RlbGF5KSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWV0aG9kIGNvbmZpZyBoZWRnaW5nIHBvbGljeTogaGVkZ2luZ0RlbGF5IG11c3QgYmUgYSBzdHJpbmcgY29uc2lzdGluZyBvZiBhIHBvc2l0aXZlIGludGVnZXIgZm9sbG93ZWQgYnkgcycpO1xyXG4gICAgfVxyXG4gICAgaWYgKCdub25GYXRhbFN0YXR1c0NvZGVzJyBpbiBvYmogJiYgQXJyYXkuaXNBcnJheShvYmoubm9uRmF0YWxTdGF0dXNDb2RlcykpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIG9iai5ub25GYXRhbFN0YXR1c0NvZGVzKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC52YWx1ZXMoY29uc3RhbnRzXzEuU3RhdHVzKS5pbmNsdWRlcyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmxpZCBtZXRob2QgY29uZmlnIGhlZGdpbmcgcG9saWN5OiBub25GYXRhbFN0YXR1c0NvZGVzIHZhbHVlIG5vdCBpbiBzdGF0dXMgY29kZSByYW5nZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LnZhbHVlcyhjb25zdGFudHNfMS5TdGF0dXMpLmluY2x1ZGVzKHZhbHVlLnRvVXBwZXJDYXNlKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZsaWQgbWV0aG9kIGNvbmZpZyBoZWRnaW5nIHBvbGljeTogbm9uRmF0YWxTdGF0dXNDb2RlcyB2YWx1ZSBub3QgYSBzdGF0dXMgY29kZSBuYW1lJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmxpZCBtZXRob2QgY29uZmlnIGhlZGdpbmcgcG9saWN5OiBub25GYXRhbFN0YXR1c0NvZGVzIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgb3IgbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgbWF4QXR0ZW1wdHM6IG9iai5tYXhBdHRlbXB0cyxcclxuICAgIH07XHJcbiAgICBpZiAob2JqLmhlZGdpbmdEZWxheSkge1xyXG4gICAgICAgIHJlc3VsdC5oZWRnaW5nRGVsYXkgPSBvYmouaGVkZ2luZ0RlbGF5O1xyXG4gICAgfVxyXG4gICAgaWYgKG9iai5ub25GYXRhbFN0YXR1c0NvZGVzKSB7XHJcbiAgICAgICAgcmVzdWx0Lm5vbkZhdGFsU3RhdHVzQ29kZXMgPSBvYmoubm9uRmF0YWxTdGF0dXNDb2RlcztcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RDb25maWcob2JqKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCByZXN1bHQgPSB7XHJcbiAgICAgICAgbmFtZTogW10sXHJcbiAgICB9O1xyXG4gICAgaWYgKCEoJ25hbWUnIGluIG9iaikgfHwgIUFycmF5LmlzQXJyYXkob2JqLm5hbWUpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWc6IGludmFsaWQgbmFtZSBhcnJheScpO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIG9iai5uYW1lKSB7XHJcbiAgICAgICAgcmVzdWx0Lm5hbWUucHVzaCh2YWxpZGF0ZU5hbWUobmFtZSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKCd3YWl0Rm9yUmVhZHknIGluIG9iaikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqLndhaXRGb3JSZWFkeSAhPT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2QgY29uZmlnOiBpbnZhbGlkIHdhaXRGb3JSZWFkeScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQud2FpdEZvclJlYWR5ID0gb2JqLndhaXRGb3JSZWFkeTtcclxuICAgIH1cclxuICAgIGlmICgndGltZW91dCcgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmoudGltZW91dCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKCEoJ3NlY29uZHMnIGluIG9iai50aW1lb3V0KSB8fFxyXG4gICAgICAgICAgICAgICAgISh0eXBlb2Ygb2JqLnRpbWVvdXQuc2Vjb25kcyA9PT0gJ251bWJlcicpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWV0aG9kIGNvbmZpZzogaW52YWxpZCB0aW1lb3V0LnNlY29uZHMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoISgnbmFub3MnIGluIG9iai50aW1lb3V0KSB8fFxyXG4gICAgICAgICAgICAgICAgISh0eXBlb2Ygb2JqLnRpbWVvdXQubmFub3MgPT09ICdudW1iZXInKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWc6IGludmFsaWQgdGltZW91dC5uYW5vcycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC50aW1lb3V0ID0gb2JqLnRpbWVvdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvYmoudGltZW91dCA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICAgICAgRFVSQVRJT05fUkVHRVgudGVzdChvYmoudGltZW91dCkpIHtcclxuICAgICAgICAgICAgY29uc3QgdGltZW91dFBhcnRzID0gb2JqLnRpbWVvdXRcclxuICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoMCwgb2JqLnRpbWVvdXQubGVuZ3RoIC0gMSlcclxuICAgICAgICAgICAgICAgIC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICByZXN1bHQudGltZW91dCA9IHtcclxuICAgICAgICAgICAgICAgIHNlY29uZHM6IHRpbWVvdXRQYXJ0c1swXSB8IDAsXHJcbiAgICAgICAgICAgICAgICBuYW5vczogKChfYSA9IHRpbWVvdXRQYXJ0c1sxXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMCkgfCAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWc6IGludmFsaWQgdGltZW91dCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgnbWF4UmVxdWVzdEJ5dGVzJyBpbiBvYmopIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9iai5tYXhSZXF1ZXN0Qnl0ZXMgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2QgY29uZmlnOiBpbnZhbGlkIG1heFJlcXVlc3RCeXRlcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHQubWF4UmVxdWVzdEJ5dGVzID0gb2JqLm1heFJlcXVlc3RCeXRlcztcclxuICAgIH1cclxuICAgIGlmICgnbWF4UmVzcG9uc2VCeXRlcycgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmoubWF4UmVzcG9uc2VCeXRlcyAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1ldGhvZCBjb25maWc6IGludmFsaWQgbWF4UmVxdWVzdEJ5dGVzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3VsdC5tYXhSZXNwb25zZUJ5dGVzID0gb2JqLm1heFJlc3BvbnNlQnl0ZXM7XHJcbiAgICB9XHJcbiAgICBpZiAoJ3JldHJ5UG9saWN5JyBpbiBvYmopIHtcclxuICAgICAgICBpZiAoJ2hlZGdpbmdQb2xpY3knIGluIG9iaikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWV0aG9kIGNvbmZpZzogcmV0cnlQb2xpY3kgYW5kIGhlZGdpbmdQb2xpY3kgY2Fubm90IGJvdGggYmUgc3BlY2lmaWVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQucmV0cnlQb2xpY3kgPSB2YWxpZGF0ZVJldHJ5UG9saWN5KG9iai5yZXRyeVBvbGljeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoJ2hlZGdpbmdQb2xpY3knIGluIG9iaikge1xyXG4gICAgICAgIHJlc3VsdC5oZWRnaW5nUG9saWN5ID0gdmFsaWRhdGVIZWRnaW5nUG9saWN5KG9iai5oZWRnaW5nUG9saWN5KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVSZXRyeVRocm90dGxpbmcob2JqKSB7XHJcbiAgICBpZiAoISgnbWF4VG9rZW5zJyBpbiBvYmopIHx8XHJcbiAgICAgICAgdHlwZW9mIG9iai5tYXhUb2tlbnMgIT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgb2JqLm1heFRva2VucyA8PSAwIHx8XHJcbiAgICAgICAgb2JqLm1heFRva2VucyA+IDEwMDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmV0cnlUaHJvdHRsaW5nOiBtYXhUb2tlbnMgbXVzdCBiZSBhIG51bWJlciBpbiAoMCwgMTAwMF0nKTtcclxuICAgIH1cclxuICAgIGlmICghKCd0b2tlblJhdGlvJyBpbiBvYmopIHx8XHJcbiAgICAgICAgdHlwZW9mIG9iai50b2tlblJhdGlvICE9PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgIG9iai50b2tlblJhdGlvIDw9IDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmV0cnlUaHJvdHRsaW5nOiB0b2tlblJhdGlvIG11c3QgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDAnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWF4VG9rZW5zOiArb2JqLm1heFRva2Vucy50b0ZpeGVkKDMpLFxyXG4gICAgICAgIHRva2VuUmF0aW86ICtvYmoudG9rZW5SYXRpby50b0ZpeGVkKDMpLFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnZhbGlkYXRlUmV0cnlUaHJvdHRsaW5nID0gdmFsaWRhdGVSZXRyeVRocm90dGxpbmc7XHJcbmZ1bmN0aW9uIHZhbGlkYXRlU2VydmljZUNvbmZpZyhvYmopIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgICBsb2FkQmFsYW5jaW5nQ29uZmlnOiBbXSxcclxuICAgICAgICBtZXRob2RDb25maWc6IFtdLFxyXG4gICAgfTtcclxuICAgIGlmICgnbG9hZEJhbGFuY2luZ1BvbGljeScgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmoubG9hZEJhbGFuY2luZ1BvbGljeSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmxvYWRCYWxhbmNpbmdQb2xpY3kgPSBvYmoubG9hZEJhbGFuY2luZ1BvbGljeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJ2aWNlIGNvbmZpZzogaW52YWxpZCBsb2FkQmFsYW5jaW5nUG9saWN5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCdsb2FkQmFsYW5jaW5nQ29uZmlnJyBpbiBvYmopIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmoubG9hZEJhbGFuY2luZ0NvbmZpZykpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjb25maWcgb2Ygb2JqLmxvYWRCYWxhbmNpbmdDb25maWcpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5sb2FkQmFsYW5jaW5nQ29uZmlnLnB1c2goKDAsIGxvYWRfYmFsYW5jZXJfMS52YWxpZGF0ZUxvYWRCYWxhbmNpbmdDb25maWcpKGNvbmZpZykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2VydmljZSBjb25maWc6IGludmFsaWQgbG9hZEJhbGFuY2luZ0NvbmZpZycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgnbWV0aG9kQ29uZmlnJyBpbiBvYmopIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmoubWV0aG9kQ29uZmlnKSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1ldGhvZENvbmZpZyBvZiBvYmoubWV0aG9kQ29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQubWV0aG9kQ29uZmlnLnB1c2godmFsaWRhdGVNZXRob2RDb25maWcobWV0aG9kQ29uZmlnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoJ3JldHJ5VGhyb3R0bGluZycgaW4gb2JqKSB7XHJcbiAgICAgICAgcmVzdWx0LnJldHJ5VGhyb3R0bGluZyA9IHZhbGlkYXRlUmV0cnlUaHJvdHRsaW5nKG9iai5yZXRyeVRocm90dGxpbmcpO1xyXG4gICAgfVxyXG4gICAgLy8gVmFsaWRhdGUgbWV0aG9kIG5hbWUgdW5pcXVlbmVzc1xyXG4gICAgY29uc3Qgc2Vlbk1ldGhvZE5hbWVzID0gW107XHJcbiAgICBmb3IgKGNvbnN0IG1ldGhvZENvbmZpZyBvZiByZXN1bHQubWV0aG9kQ29uZmlnKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG1ldGhvZENvbmZpZy5uYW1lKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2Vlbk5hbWUgb2Ygc2Vlbk1ldGhvZE5hbWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZS5zZXJ2aWNlID09PSBzZWVuTmFtZS5zZXJ2aWNlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZS5tZXRob2QgPT09IHNlZW5OYW1lLm1ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzZXJ2aWNlIGNvbmZpZzogZHVwbGljYXRlIG5hbWUgJHtuYW1lLnNlcnZpY2V9LyR7bmFtZS5tZXRob2R9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2Vlbk1ldGhvZE5hbWVzLnB1c2gobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5leHBvcnRzLnZhbGlkYXRlU2VydmljZUNvbmZpZyA9IHZhbGlkYXRlU2VydmljZUNvbmZpZztcclxuZnVuY3Rpb24gdmFsaWRhdGVDYW5hcnlDb25maWcob2JqKSB7XHJcbiAgICBpZiAoISgnc2VydmljZUNvbmZpZycgaW4gb2JqKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJ2aWNlIGNvbmZpZyBjaG9pY2U6IG1pc3Npbmcgc2VydmljZSBjb25maWcnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgICBzZXJ2aWNlQ29uZmlnOiB2YWxpZGF0ZVNlcnZpY2VDb25maWcob2JqLnNlcnZpY2VDb25maWcpLFxyXG4gICAgfTtcclxuICAgIGlmICgnY2xpZW50TGFuZ3VhZ2UnIGluIG9iaikge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iai5jbGllbnRMYW5ndWFnZSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNsaWVudExhbmd1YWdlID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGFuZyBvZiBvYmouY2xpZW50TGFuZ3VhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGFuZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuY2xpZW50TGFuZ3VhZ2UucHVzaChsYW5nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJ2aWNlIGNvbmZpZyBjaG9pY2U6IGludmFsaWQgY2xpZW50TGFuZ3VhZ2UnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNlcnZpY2UgY29uZmlnIGNob2ljZTogaW52YWxpZCBjbGllbnRMYW5ndWFnZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgnY2xpZW50SG9zdG5hbWUnIGluIG9iaikge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iai5jbGllbnRIb3N0bmFtZSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNsaWVudEhvc3RuYW1lID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGFuZyBvZiBvYmouY2xpZW50SG9zdG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGFuZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuY2xpZW50SG9zdG5hbWUucHVzaChsYW5nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJ2aWNlIGNvbmZpZyBjaG9pY2U6IGludmFsaWQgY2xpZW50SG9zdG5hbWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNlcnZpY2UgY29uZmlnIGNob2ljZTogaW52YWxpZCBjbGllbnRIb3N0bmFtZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgncGVyY2VudGFnZScgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvYmoucGVyY2VudGFnZSA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAgICAgMCA8PSBvYmoucGVyY2VudGFnZSAmJlxyXG4gICAgICAgICAgICBvYmoucGVyY2VudGFnZSA8PSAxMDApIHtcclxuICAgICAgICAgICAgcmVzdWx0LnBlcmNlbnRhZ2UgPSBvYmoucGVyY2VudGFnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJ2aWNlIGNvbmZpZyBjaG9pY2U6IGludmFsaWQgcGVyY2VudGFnZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIFZhbGlkYXRlIHRoYXQgbm8gdW5leHBlY3RlZCBmaWVsZHMgYXJlIHByZXNlbnRcclxuICAgIGNvbnN0IGFsbG93ZWRGaWVsZHMgPSBbXHJcbiAgICAgICAgJ2NsaWVudExhbmd1YWdlJyxcclxuICAgICAgICAncGVyY2VudGFnZScsXHJcbiAgICAgICAgJ2NsaWVudEhvc3RuYW1lJyxcclxuICAgICAgICAnc2VydmljZUNvbmZpZycsXHJcbiAgICBdO1xyXG4gICAgZm9yIChjb25zdCBmaWVsZCBpbiBvYmopIHtcclxuICAgICAgICBpZiAoIWFsbG93ZWRGaWVsZHMuaW5jbHVkZXMoZmllbGQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzZXJ2aWNlIGNvbmZpZyBjaG9pY2U6IHVuZXhwZWN0ZWQgZmllbGQgJHtmaWVsZH1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQW5kU2VsZWN0Q2FuYXJ5Q29uZmlnKG9iaiwgcGVyY2VudGFnZSkge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2VydmljZSBjb25maWcgbGlzdCcpO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBjb25maWcgb2Ygb2JqKSB7XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkQ29uZmlnID0gdmFsaWRhdGVDYW5hcnlDb25maWcoY29uZmlnKTtcclxuICAgICAgICAvKiBGb3IgZWFjaCBmaWVsZCwgd2UgY2hlY2sgaWYgaXQgaXMgcHJlc2VudCwgdGhlbiBvbmx5IGRpc2NhcmQgdGhlXHJcbiAgICAgICAgICogY29uZmlnIGlmIHRoZSBmaWVsZCB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGUgY3VycmVudCBjbGllbnQgKi9cclxuICAgICAgICBpZiAodHlwZW9mIHZhbGlkYXRlZENvbmZpZy5wZXJjZW50YWdlID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICAgICBwZXJjZW50YWdlID4gdmFsaWRhdGVkQ29uZmlnLnBlcmNlbnRhZ2UpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbGlkYXRlZENvbmZpZy5jbGllbnRIb3N0bmFtZSkpIHtcclxuICAgICAgICAgICAgbGV0IGhvc3RuYW1lTWF0Y2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhvc3RuYW1lIG9mIHZhbGlkYXRlZENvbmZpZy5jbGllbnRIb3N0bmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhvc3RuYW1lID09PSBvcy5ob3N0bmFtZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdG5hbWVNYXRjaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWhvc3RuYW1lTWF0Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsaWRhdGVkQ29uZmlnLmNsaWVudExhbmd1YWdlKSkge1xyXG4gICAgICAgICAgICBsZXQgbGFuZ3VhZ2VNYXRjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGFuZ3VhZ2Ugb2YgdmFsaWRhdGVkQ29uZmlnLmNsaWVudExhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2UgPT09IENMSUVOVF9MQU5HVUFHRV9TVFJJTkcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZU1hdGNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VNYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsaWRhdGVkQ29uZmlnLnNlcnZpY2VDb25maWc7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1hdGNoaW5nIHNlcnZpY2UgY29uZmlnIGZvdW5kJyk7XHJcbn1cclxuLyoqXHJcbiAqIEZpbmQgdGhlIFwiZ3JwY19jb25maWdcIiByZWNvcmQgYW1vbmcgdGhlIFRYVCByZWNvcmRzLCBwYXJzZSBpdHMgdmFsdWUgYXMgSlNPTiwgdmFsaWRhdGUgaXRzIGNvbnRlbnRzLFxyXG4gKiBhbmQgc2VsZWN0IGEgc2VydmljZSBjb25maWcgd2l0aCBzZWxlY3Rpb24gZmllbGRzIHRoYXQgYWxsIG1hdGNoIHRoaXMgY2xpZW50LiBNb3N0IG9mIHRoZXNlIHN0ZXBzXHJcbiAqIGNhbiBmYWlsIHdpdGggYW4gZXJyb3I7IHRoZSBjYWxsZXIgbXVzdCBoYW5kbGUgYW55IGVycm9ycyB0aHJvd24gdGhpcyB3YXkuXHJcbiAqIEBwYXJhbSB0eHRSZWNvcmQgVGhlIFRYVCByZWNvcmQgYXJyYXkgdGhhdCBpcyBvdXRwdXQgZnJvbSBhIHN1Y2Nlc3NmdWwgY2FsbCB0byBkbnMucmVzb2x2ZVR4dFxyXG4gKiBAcGFyYW0gcGVyY2VudGFnZSBBIG51bWJlciBjaG9zZW4gZnJvbSB0aGUgcmFuZ2UgWzAsIDEwMCkgdGhhdCBpcyB1c2VkIHRvIHNlbGVjdCB3aGljaCBjb25maWcgdG8gdXNlXHJcbiAqIEByZXR1cm4gVGhlIHNlcnZpY2UgY29uZmlndXJhdGlvbiB0byB1c2UsIGdpdmVuIHRoZSBwZXJjZW50YWdlIHZhbHVlLCBvciBudWxsIGlmIHRoZSBzZXJ2aWNlIGNvbmZpZ1xyXG4gKiAgICAgZGF0YSBoYXMgYSB2YWxpZCBmb3JtYXQgYnV0IG5vbmUgb2YgdGhlIG9wdGlvbnMgbWF0Y2ggdGhlIGN1cnJlbnQgY2xpZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdEFuZFNlbGVjdFNlcnZpY2VDb25maWcodHh0UmVjb3JkLCBwZXJjZW50YWdlKSB7XHJcbiAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiB0eHRSZWNvcmQpIHtcclxuICAgICAgICBpZiAocmVjb3JkLmxlbmd0aCA+IDAgJiYgcmVjb3JkWzBdLnN0YXJ0c1dpdGgoJ2dycGNfY29uZmlnPScpKSB7XHJcbiAgICAgICAgICAgIC8qIFRyZWF0IHRoZSBsaXN0IG9mIHN0cmluZ3MgaW4gdGhpcyByZWNvcmQgYXMgYSBzaW5nbGUgc3RyaW5nIGFuZCByZW1vdmVcclxuICAgICAgICAgICAgICogXCJncnBjX2NvbmZpZz1cIiBmcm9tIHRoZSBiZWdpbm5pbmcuIFRoZSByZXN0IHNob3VsZCBiZSBhIEpTT04gc3RyaW5nICovXHJcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZFN0cmluZyA9IHJlY29yZC5qb2luKCcnKS5zdWJzdHJpbmcoJ2dycGNfY29uZmlnPScubGVuZ3RoKTtcclxuICAgICAgICAgICAgY29uc3QgcmVjb3JkSnNvbiA9IEpTT04ucGFyc2UocmVjb3JkU3RyaW5nKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlQW5kU2VsZWN0Q2FuYXJ5Q29uZmlnKHJlY29yZEpzb24sIHBlcmNlbnRhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbmV4cG9ydHMuZXh0cmFjdEFuZFNlbGVjdFNlcnZpY2VDb25maWcgPSBleHRyYWN0QW5kU2VsZWN0U2VydmljZUNvbmZpZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmljZS1jb25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/service-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/status-builder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/status-builder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StatusBuilder = void 0;\r\n/**\r\n * A builder for gRPC status objects.\r\n */\r\nclass StatusBuilder {\r\n    constructor() {\r\n        this.code = null;\r\n        this.details = null;\r\n        this.metadata = null;\r\n    }\r\n    /**\r\n     * Adds a status code to the builder.\r\n     */\r\n    withCode(code) {\r\n        this.code = code;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds details to the builder.\r\n     */\r\n    withDetails(details) {\r\n        this.details = details;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds metadata to the builder.\r\n     */\r\n    withMetadata(metadata) {\r\n        this.metadata = metadata;\r\n        return this;\r\n    }\r\n    /**\r\n     * Builds the status object.\r\n     */\r\n    build() {\r\n        const status = {};\r\n        if (this.code !== null) {\r\n            status.code = this.code;\r\n        }\r\n        if (this.details !== null) {\r\n            status.details = this.details;\r\n        }\r\n        if (this.metadata !== null) {\r\n            status.metadata = this.metadata;\r\n        }\r\n        return status;\r\n    }\r\n}\r\nexports.StatusBuilder = StatusBuilder;\r\n//# sourceMappingURL=status-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RhdHVzLWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N0YXR1cy1idWlsZGVyLmpzPzg5MjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU3RhdHVzQnVpbGRlciA9IHZvaWQgMDtcclxuLyoqXHJcbiAqIEEgYnVpbGRlciBmb3IgZ1JQQyBzdGF0dXMgb2JqZWN0cy5cclxuICovXHJcbmNsYXNzIFN0YXR1c0J1aWxkZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRldGFpbHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgc3RhdHVzIGNvZGUgdG8gdGhlIGJ1aWxkZXIuXHJcbiAgICAgKi9cclxuICAgIHdpdGhDb2RlKGNvZGUpIHtcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGRldGFpbHMgdG8gdGhlIGJ1aWxkZXIuXHJcbiAgICAgKi9cclxuICAgIHdpdGhEZXRhaWxzKGRldGFpbHMpIHtcclxuICAgICAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIG1ldGFkYXRhIHRvIHRoZSBidWlsZGVyLlxyXG4gICAgICovXHJcbiAgICB3aXRoTWV0YWRhdGEobWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEJ1aWxkcyB0aGUgc3RhdHVzIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgYnVpbGQoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0ge307XHJcbiAgICAgICAgaWYgKHRoaXMuY29kZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzdGF0dXMuY29kZSA9IHRoaXMuY29kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGV0YWlscyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzdGF0dXMuZGV0YWlscyA9IHRoaXMuZGV0YWlscztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubWV0YWRhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgc3RhdHVzLm1ldGFkYXRhID0gdGhpcy5tZXRhZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0YXR1c0J1aWxkZXIgPSBTdGF0dXNCdWlsZGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMtYnVpbGRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/stream-decoder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamDecoder = void 0;\r\nvar ReadState;\r\n(function (ReadState) {\r\n    ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\r\n    ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\r\n    ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\r\n})(ReadState || (ReadState = {}));\r\nclass StreamDecoder {\r\n    constructor(maxReadMessageLength) {\r\n        this.maxReadMessageLength = maxReadMessageLength;\r\n        this.readState = ReadState.NO_DATA;\r\n        this.readCompressFlag = Buffer.alloc(1);\r\n        this.readPartialSize = Buffer.alloc(4);\r\n        this.readSizeRemaining = 4;\r\n        this.readMessageSize = 0;\r\n        this.readPartialMessage = [];\r\n        this.readMessageRemaining = 0;\r\n    }\r\n    write(data) {\r\n        let readHead = 0;\r\n        let toRead;\r\n        const result = [];\r\n        while (readHead < data.length) {\r\n            switch (this.readState) {\r\n                case ReadState.NO_DATA:\r\n                    this.readCompressFlag = data.slice(readHead, readHead + 1);\r\n                    readHead += 1;\r\n                    this.readState = ReadState.READING_SIZE;\r\n                    this.readPartialSize.fill(0);\r\n                    this.readSizeRemaining = 4;\r\n                    this.readMessageSize = 0;\r\n                    this.readMessageRemaining = 0;\r\n                    this.readPartialMessage = [];\r\n                    break;\r\n                case ReadState.READING_SIZE:\r\n                    toRead = Math.min(data.length - readHead, this.readSizeRemaining);\r\n                    data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\r\n                    this.readSizeRemaining -= toRead;\r\n                    readHead += toRead;\r\n                    // readSizeRemaining >=0 here\r\n                    if (this.readSizeRemaining === 0) {\r\n                        this.readMessageSize = this.readPartialSize.readUInt32BE(0);\r\n                        if (this.maxReadMessageLength !== -1 && this.readMessageSize > this.maxReadMessageLength) {\r\n                            throw new Error(`Received message larger than max (${this.readMessageSize} vs ${this.maxReadMessageLength})`);\r\n                        }\r\n                        this.readMessageRemaining = this.readMessageSize;\r\n                        if (this.readMessageRemaining > 0) {\r\n                            this.readState = ReadState.READING_MESSAGE;\r\n                        }\r\n                        else {\r\n                            const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);\r\n                            this.readState = ReadState.NO_DATA;\r\n                            result.push(message);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ReadState.READING_MESSAGE:\r\n                    toRead = Math.min(data.length - readHead, this.readMessageRemaining);\r\n                    this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\r\n                    this.readMessageRemaining -= toRead;\r\n                    readHead += toRead;\r\n                    // readMessageRemaining >=0 here\r\n                    if (this.readMessageRemaining === 0) {\r\n                        // At this point, we have read a full message\r\n                        const framedMessageBuffers = [\r\n                            this.readCompressFlag,\r\n                            this.readPartialSize,\r\n                        ].concat(this.readPartialMessage);\r\n                        const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\r\n                        this.readState = ReadState.NO_DATA;\r\n                        result.push(framedMessage);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error('Unexpected read state');\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexports.StreamDecoder = StreamDecoder;\r\n//# sourceMappingURL=stream-decoder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RyZWFtLWRlY29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOEJBQThCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixzQkFBc0IsS0FBSywwQkFBMEI7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdG9fcGgvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RyZWFtLWRlY29kZXIuanM/ZDM5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5TdHJlYW1EZWNvZGVyID0gdm9pZCAwO1xyXG52YXIgUmVhZFN0YXRlO1xyXG4oZnVuY3Rpb24gKFJlYWRTdGF0ZSkge1xyXG4gICAgUmVhZFN0YXRlW1JlYWRTdGF0ZVtcIk5PX0RBVEFcIl0gPSAwXSA9IFwiTk9fREFUQVwiO1xyXG4gICAgUmVhZFN0YXRlW1JlYWRTdGF0ZVtcIlJFQURJTkdfU0laRVwiXSA9IDFdID0gXCJSRUFESU5HX1NJWkVcIjtcclxuICAgIFJlYWRTdGF0ZVtSZWFkU3RhdGVbXCJSRUFESU5HX01FU1NBR0VcIl0gPSAyXSA9IFwiUkVBRElOR19NRVNTQUdFXCI7XHJcbn0pKFJlYWRTdGF0ZSB8fCAoUmVhZFN0YXRlID0ge30pKTtcclxuY2xhc3MgU3RyZWFtRGVjb2RlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtYXhSZWFkTWVzc2FnZUxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMubWF4UmVhZE1lc3NhZ2VMZW5ndGggPSBtYXhSZWFkTWVzc2FnZUxlbmd0aDtcclxuICAgICAgICB0aGlzLnJlYWRTdGF0ZSA9IFJlYWRTdGF0ZS5OT19EQVRBO1xyXG4gICAgICAgIHRoaXMucmVhZENvbXByZXNzRmxhZyA9IEJ1ZmZlci5hbGxvYygxKTtcclxuICAgICAgICB0aGlzLnJlYWRQYXJ0aWFsU2l6ZSA9IEJ1ZmZlci5hbGxvYyg0KTtcclxuICAgICAgICB0aGlzLnJlYWRTaXplUmVtYWluaW5nID0gNDtcclxuICAgICAgICB0aGlzLnJlYWRNZXNzYWdlU2l6ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5yZWFkUGFydGlhbE1lc3NhZ2UgPSBbXTtcclxuICAgICAgICB0aGlzLnJlYWRNZXNzYWdlUmVtYWluaW5nID0gMDtcclxuICAgIH1cclxuICAgIHdyaXRlKGRhdGEpIHtcclxuICAgICAgICBsZXQgcmVhZEhlYWQgPSAwO1xyXG4gICAgICAgIGxldCB0b1JlYWQ7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICAgICAgd2hpbGUgKHJlYWRIZWFkIDwgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnJlYWRTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBSZWFkU3RhdGUuTk9fREFUQTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRDb21wcmVzc0ZsYWcgPSBkYXRhLnNsaWNlKHJlYWRIZWFkLCByZWFkSGVhZCArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRIZWFkICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkU3RhdGUgPSBSZWFkU3RhdGUuUkVBRElOR19TSVpFO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFBhcnRpYWxTaXplLmZpbGwoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkU2l6ZVJlbWFpbmluZyA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVNpemUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZE1lc3NhZ2VSZW1haW5pbmcgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFBhcnRpYWxNZXNzYWdlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFJlYWRTdGF0ZS5SRUFESU5HX1NJWkU6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9SZWFkID0gTWF0aC5taW4oZGF0YS5sZW5ndGggLSByZWFkSGVhZCwgdGhpcy5yZWFkU2l6ZVJlbWFpbmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jb3B5KHRoaXMucmVhZFBhcnRpYWxTaXplLCA0IC0gdGhpcy5yZWFkU2l6ZVJlbWFpbmluZywgcmVhZEhlYWQsIHJlYWRIZWFkICsgdG9SZWFkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRTaXplUmVtYWluaW5nIC09IHRvUmVhZDtcclxuICAgICAgICAgICAgICAgICAgICByZWFkSGVhZCArPSB0b1JlYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVhZFNpemVSZW1haW5pbmcgPj0wIGhlcmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWFkU2l6ZVJlbWFpbmluZyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRNZXNzYWdlU2l6ZSA9IHRoaXMucmVhZFBhcnRpYWxTaXplLnJlYWRVSW50MzJCRSgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF4UmVhZE1lc3NhZ2VMZW5ndGggIT09IC0xICYmIHRoaXMucmVhZE1lc3NhZ2VTaXplID4gdGhpcy5tYXhSZWFkTWVzc2FnZUxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWNlaXZlZCBtZXNzYWdlIGxhcmdlciB0aGFuIG1heCAoJHt0aGlzLnJlYWRNZXNzYWdlU2l6ZX0gdnMgJHt0aGlzLm1heFJlYWRNZXNzYWdlTGVuZ3RofSlgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRNZXNzYWdlUmVtYWluaW5nID0gdGhpcy5yZWFkTWVzc2FnZVNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlYWRNZXNzYWdlUmVtYWluaW5nID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkU3RhdGUgPSBSZWFkU3RhdGUuUkVBRElOR19NRVNTQUdFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMucmVhZENvbXByZXNzRmxhZywgdGhpcy5yZWFkUGFydGlhbFNpemVdLCA1KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0YXRlID0gUmVhZFN0YXRlLk5PX0RBVEE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgUmVhZFN0YXRlLlJFQURJTkdfTUVTU0FHRTpcclxuICAgICAgICAgICAgICAgICAgICB0b1JlYWQgPSBNYXRoLm1pbihkYXRhLmxlbmd0aCAtIHJlYWRIZWFkLCB0aGlzLnJlYWRNZXNzYWdlUmVtYWluaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRQYXJ0aWFsTWVzc2FnZS5wdXNoKGRhdGEuc2xpY2UocmVhZEhlYWQsIHJlYWRIZWFkICsgdG9SZWFkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyAtPSB0b1JlYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZEhlYWQgKz0gdG9SZWFkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlYWRNZXNzYWdlUmVtYWluaW5nID49MCBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZE1lc3NhZ2VSZW1haW5pbmcgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgaGF2ZSByZWFkIGEgZnVsbCBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lZE1lc3NhZ2VCdWZmZXJzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkQ29tcHJlc3NGbGFnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkUGFydGlhbFNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0uY29uY2F0KHRoaXMucmVhZFBhcnRpYWxNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhbWVkTWVzc2FnZSA9IEJ1ZmZlci5jb25jYXQoZnJhbWVkTWVzc2FnZUJ1ZmZlcnMsIHRoaXMucmVhZE1lc3NhZ2VTaXplICsgNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0YXRlID0gUmVhZFN0YXRlLk5PX0RBVEE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZyYW1lZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHJlYWQgc3RhdGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3RyZWFtRGVjb2RlciA9IFN0cmVhbURlY29kZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbS1kZWNvZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-address.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nfunction isTcpSubchannelAddress(address) {\r\n    return 'port' in address;\r\n}\r\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\r\nfunction subchannelAddressEqual(address1, address2) {\r\n    if (!address1 && !address2) {\r\n        return true;\r\n    }\r\n    if (!address1 || !address2) {\r\n        return false;\r\n    }\r\n    if (isTcpSubchannelAddress(address1)) {\r\n        return (isTcpSubchannelAddress(address2) &&\r\n            address1.host === address2.host &&\r\n            address1.port === address2.port);\r\n    }\r\n    else {\r\n        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\r\n    }\r\n}\r\nexports.subchannelAddressEqual = subchannelAddressEqual;\r\nfunction subchannelAddressToString(address) {\r\n    if (isTcpSubchannelAddress(address)) {\r\n        return address.host + ':' + address.port;\r\n    }\r\n    else {\r\n        return address.path;\r\n    }\r\n}\r\nexports.subchannelAddressToString = subchannelAddressToString;\r\nconst DEFAULT_PORT = 443;\r\nfunction stringToSubchannelAddress(addressString, port) {\r\n    if ((0, net_1.isIP)(addressString)) {\r\n        return {\r\n            host: addressString,\r\n            port: port !== null && port !== void 0 ? port : DEFAULT_PORT,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            path: addressString,\r\n        };\r\n    }\r\n}\r\nexports.stringToSubchannelAddress = stringToSubchannelAddress;\r\n//# sourceMappingURL=subchannel-address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDLEdBQUcsaUNBQWlDLEdBQUcsOEJBQThCLEdBQUcsOEJBQThCO0FBQ3ZJLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdG9fcGgvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1hZGRyZXNzLmpzPzEzZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIxIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc3RyaW5nVG9TdWJjaGFubmVsQWRkcmVzcyA9IGV4cG9ydHMuc3ViY2hhbm5lbEFkZHJlc3NUb1N0cmluZyA9IGV4cG9ydHMuc3ViY2hhbm5lbEFkZHJlc3NFcXVhbCA9IGV4cG9ydHMuaXNUY3BTdWJjaGFubmVsQWRkcmVzcyA9IHZvaWQgMDtcclxuY29uc3QgbmV0XzEgPSByZXF1aXJlKFwibmV0XCIpO1xyXG5mdW5jdGlvbiBpc1RjcFN1YmNoYW5uZWxBZGRyZXNzKGFkZHJlc3MpIHtcclxuICAgIHJldHVybiAncG9ydCcgaW4gYWRkcmVzcztcclxufVxyXG5leHBvcnRzLmlzVGNwU3ViY2hhbm5lbEFkZHJlc3MgPSBpc1RjcFN1YmNoYW5uZWxBZGRyZXNzO1xyXG5mdW5jdGlvbiBzdWJjaGFubmVsQWRkcmVzc0VxdWFsKGFkZHJlc3MxLCBhZGRyZXNzMikge1xyXG4gICAgaWYgKCFhZGRyZXNzMSAmJiAhYWRkcmVzczIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICghYWRkcmVzczEgfHwgIWFkZHJlc3MyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzVGNwU3ViY2hhbm5lbEFkZHJlc3MoYWRkcmVzczEpKSB7XHJcbiAgICAgICAgcmV0dXJuIChpc1RjcFN1YmNoYW5uZWxBZGRyZXNzKGFkZHJlc3MyKSAmJlxyXG4gICAgICAgICAgICBhZGRyZXNzMS5ob3N0ID09PSBhZGRyZXNzMi5ob3N0ICYmXHJcbiAgICAgICAgICAgIGFkZHJlc3MxLnBvcnQgPT09IGFkZHJlc3MyLnBvcnQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICFpc1RjcFN1YmNoYW5uZWxBZGRyZXNzKGFkZHJlc3MyKSAmJiBhZGRyZXNzMS5wYXRoID09PSBhZGRyZXNzMi5wYXRoO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc3ViY2hhbm5lbEFkZHJlc3NFcXVhbCA9IHN1YmNoYW5uZWxBZGRyZXNzRXF1YWw7XHJcbmZ1bmN0aW9uIHN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmcoYWRkcmVzcykge1xyXG4gICAgaWYgKGlzVGNwU3ViY2hhbm5lbEFkZHJlc3MoYWRkcmVzcykpIHtcclxuICAgICAgICByZXR1cm4gYWRkcmVzcy5ob3N0ICsgJzonICsgYWRkcmVzcy5wb3J0O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGFkZHJlc3MucGF0aDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnN1YmNoYW5uZWxBZGRyZXNzVG9TdHJpbmcgPSBzdWJjaGFubmVsQWRkcmVzc1RvU3RyaW5nO1xyXG5jb25zdCBERUZBVUxUX1BPUlQgPSA0NDM7XHJcbmZ1bmN0aW9uIHN0cmluZ1RvU3ViY2hhbm5lbEFkZHJlc3MoYWRkcmVzc1N0cmluZywgcG9ydCkge1xyXG4gICAgaWYgKCgwLCBuZXRfMS5pc0lQKShhZGRyZXNzU3RyaW5nKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhvc3Q6IGFkZHJlc3NTdHJpbmcsXHJcbiAgICAgICAgICAgIHBvcnQ6IHBvcnQgIT09IG51bGwgJiYgcG9ydCAhPT0gdm9pZCAwID8gcG9ydCA6IERFRkFVTFRfUE9SVCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcGF0aDogYWRkcmVzc1N0cmluZyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc3RyaW5nVG9TdWJjaGFubmVsQWRkcmVzcyA9IHN0cmluZ1RvU3ViY2hhbm5lbEFkZHJlc3M7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YmNoYW5uZWwtYWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-call.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Http2SubchannelCall = void 0;\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst TRACER_NAME = 'subchannel_call';\r\n/**\r\n * Should do approximately the same thing as util.getSystemErrorName but the\r\n * TypeScript types don't have that function for some reason so I just made my\r\n * own.\r\n * @param errno\r\n */\r\nfunction getSystemErrorName(errno) {\r\n    for (const [name, num] of Object.entries(os.constants.errno)) {\r\n        if (num === errno) {\r\n            return name;\r\n        }\r\n    }\r\n    return 'Unknown system error ' + errno;\r\n}\r\nclass Http2SubchannelCall {\r\n    constructor(http2Stream, callEventTracker, listener, transport, callId) {\r\n        var _a;\r\n        this.http2Stream = http2Stream;\r\n        this.callEventTracker = callEventTracker;\r\n        this.listener = listener;\r\n        this.transport = transport;\r\n        this.callId = callId;\r\n        this.isReadFilterPending = false;\r\n        this.isPushPending = false;\r\n        this.canPush = false;\r\n        /**\r\n         * Indicates that an 'end' event has come from the http2 stream, so there\r\n         * will be no more data events.\r\n         */\r\n        this.readsClosed = false;\r\n        this.statusOutput = false;\r\n        this.unpushedReadMessages = [];\r\n        // Status code mapped from :status. To be used if grpc-status is not received\r\n        this.mappedStatusCode = constants_1.Status.UNKNOWN;\r\n        // This is populated (non-null) if and only if the call has ended\r\n        this.finalStatus = null;\r\n        this.internalError = null;\r\n        const maxReceiveMessageLength = (_a = transport.getOptions()['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\r\n        this.decoder = new stream_decoder_1.StreamDecoder(maxReceiveMessageLength);\r\n        http2Stream.on('response', (headers, flags) => {\r\n            let headersString = '';\r\n            for (const header of Object.keys(headers)) {\r\n                headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\r\n            }\r\n            this.trace('Received server headers:\\n' + headersString);\r\n            switch (headers[':status']) {\r\n                // TODO(murgatroid99): handle 100 and 101\r\n                case 400:\r\n                    this.mappedStatusCode = constants_1.Status.INTERNAL;\r\n                    break;\r\n                case 401:\r\n                    this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\r\n                    break;\r\n                case 403:\r\n                    this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\r\n                    break;\r\n                case 404:\r\n                    this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\r\n                    break;\r\n                case 429:\r\n                case 502:\r\n                case 503:\r\n                case 504:\r\n                    this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\r\n                    break;\r\n                default:\r\n                    this.mappedStatusCode = constants_1.Status.UNKNOWN;\r\n            }\r\n            if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\r\n                this.handleTrailers(headers);\r\n            }\r\n            else {\r\n                let metadata;\r\n                try {\r\n                    metadata = metadata_1.Metadata.fromHttp2Headers(headers);\r\n                }\r\n                catch (error) {\r\n                    this.endCall({\r\n                        code: constants_1.Status.UNKNOWN,\r\n                        details: error.message,\r\n                        metadata: new metadata_1.Metadata(),\r\n                    });\r\n                    return;\r\n                }\r\n                this.listener.onReceiveMetadata(metadata);\r\n            }\r\n        });\r\n        http2Stream.on('trailers', (headers) => {\r\n            this.handleTrailers(headers);\r\n        });\r\n        http2Stream.on('data', (data) => {\r\n            /* If the status has already been output, allow the http2 stream to\r\n             * drain without processing the data. */\r\n            if (this.statusOutput) {\r\n                return;\r\n            }\r\n            this.trace('receive HTTP/2 data frame of length ' + data.length);\r\n            let messages;\r\n            try {\r\n                messages = this.decoder.write(data);\r\n            }\r\n            catch (e) {\r\n                this.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, e.message);\r\n                return;\r\n            }\r\n            for (const message of messages) {\r\n                this.trace('parsed message of length ' + message.length);\r\n                this.callEventTracker.addMessageReceived();\r\n                this.tryPush(message);\r\n            }\r\n        });\r\n        http2Stream.on('end', () => {\r\n            this.readsClosed = true;\r\n            this.maybeOutputStatus();\r\n        });\r\n        http2Stream.on('close', () => {\r\n            /* Use process.next tick to ensure that this code happens after any\r\n             * \"error\" event that may be emitted at about the same time, so that\r\n             * we can bubble up the error message from that event. */\r\n            process.nextTick(() => {\r\n                var _a;\r\n                this.trace('HTTP/2 stream closed with code ' + http2Stream.rstCode);\r\n                /* If we have a final status with an OK status code, that means that\r\n                 * we have received all of the messages and we have processed the\r\n                 * trailers and the call completed successfully, so it doesn't matter\r\n                 * how the stream ends after that */\r\n                if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\r\n                    return;\r\n                }\r\n                let code;\r\n                let details = '';\r\n                switch (http2Stream.rstCode) {\r\n                    case http2.constants.NGHTTP2_NO_ERROR:\r\n                        /* If we get a NO_ERROR code and we already have a status, the\r\n                         * stream completed properly and we just haven't fully processed\r\n                         * it yet */\r\n                        if (this.finalStatus !== null) {\r\n                            return;\r\n                        }\r\n                        code = constants_1.Status.INTERNAL;\r\n                        details = `Received RST_STREAM with code ${http2Stream.rstCode}`;\r\n                        break;\r\n                    case http2.constants.NGHTTP2_REFUSED_STREAM:\r\n                        code = constants_1.Status.UNAVAILABLE;\r\n                        details = 'Stream refused by server';\r\n                        break;\r\n                    case http2.constants.NGHTTP2_CANCEL:\r\n                        code = constants_1.Status.CANCELLED;\r\n                        details = 'Call cancelled';\r\n                        break;\r\n                    case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\r\n                        code = constants_1.Status.RESOURCE_EXHAUSTED;\r\n                        details = 'Bandwidth exhausted or memory limit exceeded';\r\n                        break;\r\n                    case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\r\n                        code = constants_1.Status.PERMISSION_DENIED;\r\n                        details = 'Protocol not secure enough';\r\n                        break;\r\n                    case http2.constants.NGHTTP2_INTERNAL_ERROR:\r\n                        code = constants_1.Status.INTERNAL;\r\n                        if (this.internalError === null) {\r\n                            /* This error code was previously handled in the default case, and\r\n                             * there are several instances of it online, so I wanted to\r\n                             * preserve the original error message so that people find existing\r\n                             * information in searches, but also include the more recognizable\r\n                             * \"Internal server error\" message. */\r\n                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Internal server error)`;\r\n                        }\r\n                        else {\r\n                            if (this.internalError.code === 'ECONNRESET' ||\r\n                                this.internalError.code === 'ETIMEDOUT') {\r\n                                code = constants_1.Status.UNAVAILABLE;\r\n                                details = this.internalError.message;\r\n                            }\r\n                            else {\r\n                                /* The \"Received RST_STREAM with code ...\" error is preserved\r\n                                 * here for continuity with errors reported online, but the\r\n                                 * error message at the end will probably be more relevant in\r\n                                 * most cases. */\r\n                                details = `Received RST_STREAM with code ${http2Stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        code = constants_1.Status.INTERNAL;\r\n                        details = `Received RST_STREAM with code ${http2Stream.rstCode}`;\r\n                }\r\n                // This is a no-op if trailers were received at all.\r\n                // This is OK, because status codes emitted here correspond to more\r\n                // catastrophic issues that prevent us from receiving trailers in the\r\n                // first place.\r\n                this.endCall({\r\n                    code,\r\n                    details,\r\n                    metadata: new metadata_1.Metadata(),\r\n                    rstCode: http2Stream.rstCode,\r\n                });\r\n            });\r\n        });\r\n        http2Stream.on('error', (err) => {\r\n            /* We need an error handler here to stop \"Uncaught Error\" exceptions\r\n             * from bubbling up. However, errors here should all correspond to\r\n             * \"close\" events, where we will handle the error more granularly */\r\n            /* Specifically looking for stream errors that were *not* constructed\r\n             * from a RST_STREAM response here:\r\n             * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\r\n             */\r\n            if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\r\n                this.trace('Node error event: message=' +\r\n                    err.message +\r\n                    ' code=' +\r\n                    err.code +\r\n                    ' errno=' +\r\n                    getSystemErrorName(err.errno) +\r\n                    ' syscall=' +\r\n                    err.syscall);\r\n                this.internalError = err;\r\n            }\r\n            this.callEventTracker.onStreamEnd(false);\r\n        });\r\n    }\r\n    onDisconnect() {\r\n        this.endCall({\r\n            code: constants_1.Status.UNAVAILABLE,\r\n            details: 'Connection dropped',\r\n            metadata: new metadata_1.Metadata(),\r\n        });\r\n    }\r\n    outputStatus() {\r\n        /* Precondition: this.finalStatus !== null */\r\n        if (!this.statusOutput) {\r\n            this.statusOutput = true;\r\n            this.trace('ended with status: code=' +\r\n                this.finalStatus.code +\r\n                ' details=\"' +\r\n                this.finalStatus.details +\r\n                '\"');\r\n            this.callEventTracker.onCallEnd(this.finalStatus);\r\n            /* We delay the actual action of bubbling up the status to insulate the\r\n             * cleanup code in this class from any errors that may be thrown in the\r\n             * upper layers as a result of bubbling up the status. In particular,\r\n             * if the status is not OK, the \"error\" event may be emitted\r\n             * synchronously at the top level, which will result in a thrown error if\r\n             * the user does not handle that event. */\r\n            process.nextTick(() => {\r\n                this.listener.onReceiveStatus(this.finalStatus);\r\n            });\r\n            /* Leave the http2 stream in flowing state to drain incoming messages, to\r\n             * ensure that the stream closure completes. The call stream already does\r\n             * not push more messages after the status is output, so the messages go\r\n             * nowhere either way. */\r\n            this.http2Stream.resume();\r\n        }\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callId + '] ' + text);\r\n    }\r\n    /**\r\n     * On first call, emits a 'status' event with the given StatusObject.\r\n     * Subsequent calls are no-ops.\r\n     * @param status The status of the call.\r\n     */\r\n    endCall(status) {\r\n        /* If the status is OK and a new status comes in (e.g. from a\r\n         * deserialization failure), that new status takes priority */\r\n        if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\r\n            this.finalStatus = status;\r\n            this.maybeOutputStatus();\r\n        }\r\n        this.destroyHttp2Stream();\r\n    }\r\n    maybeOutputStatus() {\r\n        if (this.finalStatus !== null) {\r\n            /* The combination check of readsClosed and that the two message buffer\r\n             * arrays are empty checks that there all incoming data has been fully\r\n             * processed */\r\n            if (this.finalStatus.code !== constants_1.Status.OK ||\r\n                (this.readsClosed &&\r\n                    this.unpushedReadMessages.length === 0 &&\r\n                    !this.isReadFilterPending &&\r\n                    !this.isPushPending)) {\r\n                this.outputStatus();\r\n            }\r\n        }\r\n    }\r\n    push(message) {\r\n        this.trace('pushing to reader message of length ' +\r\n            (message instanceof Buffer ? message.length : null));\r\n        this.canPush = false;\r\n        this.isPushPending = true;\r\n        process.nextTick(() => {\r\n            this.isPushPending = false;\r\n            /* If we have already output the status any later messages should be\r\n             * ignored, and can cause out-of-order operation errors higher up in the\r\n             * stack. Checking as late as possible here to avoid any race conditions.\r\n             */\r\n            if (this.statusOutput) {\r\n                return;\r\n            }\r\n            this.listener.onReceiveMessage(message);\r\n            this.maybeOutputStatus();\r\n        });\r\n    }\r\n    tryPush(messageBytes) {\r\n        if (this.canPush) {\r\n            this.http2Stream.pause();\r\n            this.push(messageBytes);\r\n        }\r\n        else {\r\n            this.trace('unpushedReadMessages.push message of length ' + messageBytes.length);\r\n            this.unpushedReadMessages.push(messageBytes);\r\n        }\r\n    }\r\n    handleTrailers(headers) {\r\n        this.callEventTracker.onStreamEnd(true);\r\n        let headersString = '';\r\n        for (const header of Object.keys(headers)) {\r\n            headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\r\n        }\r\n        this.trace('Received server trailers:\\n' + headersString);\r\n        let metadata;\r\n        try {\r\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\r\n        }\r\n        catch (e) {\r\n            metadata = new metadata_1.Metadata();\r\n        }\r\n        const metadataMap = metadata.getMap();\r\n        let code = this.mappedStatusCode;\r\n        if (code === constants_1.Status.UNKNOWN &&\r\n            typeof metadataMap['grpc-status'] === 'string') {\r\n            const receivedStatus = Number(metadataMap['grpc-status']);\r\n            if (receivedStatus in constants_1.Status) {\r\n                code = receivedStatus;\r\n                this.trace('received status code ' + receivedStatus + ' from server');\r\n            }\r\n            metadata.remove('grpc-status');\r\n        }\r\n        let details = '';\r\n        if (typeof metadataMap['grpc-message'] === 'string') {\r\n            try {\r\n                details = decodeURI(metadataMap['grpc-message']);\r\n            }\r\n            catch (e) {\r\n                details = metadataMap['grpc-message'];\r\n            }\r\n            metadata.remove('grpc-message');\r\n            this.trace('received status details string \"' + details + '\" from server');\r\n        }\r\n        const status = { code, details, metadata };\r\n        // This is a no-op if the call was already ended when handling headers.\r\n        this.endCall(status);\r\n    }\r\n    destroyHttp2Stream() {\r\n        var _a;\r\n        // The http2 stream could already have been destroyed if cancelWithStatus\r\n        // is called in response to an internal http2 error.\r\n        if (!this.http2Stream.destroyed) {\r\n            /* If the call has ended with an OK status, communicate that when closing\r\n             * the stream, partly to avoid a situation in which we detect an error\r\n             * RST_STREAM as a result after we have the status */\r\n            let code;\r\n            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\r\n                code = http2.constants.NGHTTP2_NO_ERROR;\r\n            }\r\n            else {\r\n                code = http2.constants.NGHTTP2_CANCEL;\r\n            }\r\n            this.trace('close http2 stream with code ' + code);\r\n            this.http2Stream.close(code);\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        this.endCall({ code: status, details, metadata: new metadata_1.Metadata() });\r\n    }\r\n    getStatus() {\r\n        return this.finalStatus;\r\n    }\r\n    getPeer() {\r\n        return this.transport.getPeerName();\r\n    }\r\n    getCallNumber() {\r\n        return this.callId;\r\n    }\r\n    startRead() {\r\n        /* If the stream has ended with an error, we should not emit any more\r\n         * messages and we should communicate that the stream has ended */\r\n        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\r\n            this.readsClosed = true;\r\n            this.maybeOutputStatus();\r\n            return;\r\n        }\r\n        this.canPush = true;\r\n        if (this.unpushedReadMessages.length > 0) {\r\n            const nextMessage = this.unpushedReadMessages.shift();\r\n            this.push(nextMessage);\r\n            return;\r\n        }\r\n        /* Only resume reading from the http2Stream if we don't have any pending\r\n         * messages to emit */\r\n        this.http2Stream.resume();\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        this.trace('write() called with message of length ' + message.length);\r\n        const cb = (error) => {\r\n            /* nextTick here ensures that no stream action can be taken in the call\r\n             * stack of the write callback, in order to hopefully work around\r\n             * https://github.com/nodejs/node/issues/49147 */\r\n            process.nextTick(() => {\r\n                var _a;\r\n                let code = constants_1.Status.UNAVAILABLE;\r\n                if ((error === null || error === void 0 ? void 0 : error.code) ===\r\n                    'ERR_STREAM_WRITE_AFTER_END') {\r\n                    code = constants_1.Status.INTERNAL;\r\n                }\r\n                if (error) {\r\n                    this.cancelWithStatus(code, `Write error: ${error.message}`);\r\n                }\r\n                (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\r\n            });\r\n        };\r\n        this.trace('sending data chunk of length ' + message.length);\r\n        this.callEventTracker.addMessageSent();\r\n        try {\r\n            this.http2Stream.write(message, cb);\r\n        }\r\n        catch (error) {\r\n            this.endCall({\r\n                code: constants_1.Status.UNAVAILABLE,\r\n                details: `Write failed with error ${error.message}`,\r\n                metadata: new metadata_1.Metadata(),\r\n            });\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('end() called');\r\n        this.trace('calling end() on HTTP/2 stream');\r\n        this.http2Stream.end();\r\n    }\r\n}\r\nexports.Http2SubchannelCall = Http2SubchannelCall;\r\n//# sourceMappingURL=subchannel-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BaseSubchannelWrapper = void 0;\r\nclass BaseSubchannelWrapper {\r\n    constructor(child) {\r\n        this.child = child;\r\n    }\r\n    getConnectivityState() {\r\n        return this.child.getConnectivityState();\r\n    }\r\n    addConnectivityStateListener(listener) {\r\n        this.child.addConnectivityStateListener(listener);\r\n    }\r\n    removeConnectivityStateListener(listener) {\r\n        this.child.removeConnectivityStateListener(listener);\r\n    }\r\n    startConnecting() {\r\n        this.child.startConnecting();\r\n    }\r\n    getAddress() {\r\n        return this.child.getAddress();\r\n    }\r\n    throttleKeepalive(newKeepaliveTime) {\r\n        this.child.throttleKeepalive(newKeepaliveTime);\r\n    }\r\n    ref() {\r\n        this.child.ref();\r\n    }\r\n    unref() {\r\n        this.child.unref();\r\n    }\r\n    getChannelzRef() {\r\n        return this.child.getChannelzRef();\r\n    }\r\n    getRealSubchannel() {\r\n        return this.child.getRealSubchannel();\r\n    }\r\n    realSubchannelEquals(other) {\r\n        return this.getRealSubchannel() === other.getRealSubchannel();\r\n    }\r\n}\r\nexports.BaseSubchannelWrapper = BaseSubchannelWrapper;\r\n//# sourceMappingURL=subchannel-interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N1YmNoYW5uZWwtaW50ZXJmYWNlLmpzPzIxYjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQmFzZVN1YmNoYW5uZWxXcmFwcGVyID0gdm9pZCAwO1xyXG5jbGFzcyBCYXNlU3ViY2hhbm5lbFdyYXBwZXIge1xyXG4gICAgY29uc3RydWN0b3IoY2hpbGQpIHtcclxuICAgICAgICB0aGlzLmNoaWxkID0gY2hpbGQ7XHJcbiAgICB9XHJcbiAgICBnZXRDb25uZWN0aXZpdHlTdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDb25uZWN0aXZpdHlTdGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgYWRkQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuY2hpbGQuYWRkQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICByZW1vdmVDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZC5yZW1vdmVDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIHN0YXJ0Q29ubmVjdGluZygpIHtcclxuICAgICAgICB0aGlzLmNoaWxkLnN0YXJ0Q29ubmVjdGluZygpO1xyXG4gICAgfVxyXG4gICAgZ2V0QWRkcmVzcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRBZGRyZXNzKCk7XHJcbiAgICB9XHJcbiAgICB0aHJvdHRsZUtlZXBhbGl2ZShuZXdLZWVwYWxpdmVUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZC50aHJvdHRsZUtlZXBhbGl2ZShuZXdLZWVwYWxpdmVUaW1lKTtcclxuICAgIH1cclxuICAgIHJlZigpIHtcclxuICAgICAgICB0aGlzLmNoaWxkLnJlZigpO1xyXG4gICAgfVxyXG4gICAgdW5yZWYoKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZC51bnJlZigpO1xyXG4gICAgfVxyXG4gICAgZ2V0Q2hhbm5lbHpSZWYoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0Q2hhbm5lbHpSZWYoKTtcclxuICAgIH1cclxuICAgIGdldFJlYWxTdWJjaGFubmVsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkLmdldFJlYWxTdWJjaGFubmVsKCk7XHJcbiAgICB9XHJcbiAgICByZWFsU3ViY2hhbm5lbEVxdWFscyhvdGhlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlYWxTdWJjaGFubmVsKCkgPT09IG90aGVyLmdldFJlYWxTdWJjaGFubmVsKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CYXNlU3ViY2hhbm5lbFdyYXBwZXIgPSBCYXNlU3ViY2hhbm5lbFdyYXBwZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YmNoYW5uZWwtaW50ZXJmYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getSubchannelPool = exports.SubchannelPool = void 0;\r\nconst channel_options_1 = __webpack_require__(/*! ./channel-options */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\");\r\nconst subchannel_1 = __webpack_require__(/*! ./subchannel */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/transport.js\");\r\n// 10 seconds in milliseconds. This value is arbitrary.\r\n/**\r\n * The amount of time in between checks for dropping subchannels that have no\r\n * other references\r\n */\r\nconst REF_CHECK_INTERVAL = 10000;\r\nclass SubchannelPool {\r\n    /**\r\n     * A pool of subchannels use for making connections. Subchannels with the\r\n     * exact same parameters will be reused.\r\n     */\r\n    constructor() {\r\n        this.pool = Object.create(null);\r\n        /**\r\n         * A timer of a task performing a periodic subchannel cleanup.\r\n         */\r\n        this.cleanupTimer = null;\r\n    }\r\n    /**\r\n     * Unrefs all unused subchannels and cancels the cleanup task if all\r\n     * subchannels have been unrefed.\r\n     */\r\n    unrefUnusedSubchannels() {\r\n        let allSubchannelsUnrefed = true;\r\n        /* These objects are created with Object.create(null), so they do not\r\n         * have a prototype, which means that for (... in ...) loops over them\r\n         * do not need to be filtered */\r\n        // eslint-disable-disable-next-line:forin\r\n        for (const channelTarget in this.pool) {\r\n            const subchannelObjArray = this.pool[channelTarget];\r\n            const refedSubchannels = subchannelObjArray.filter(value => !value.subchannel.unrefIfOneRef());\r\n            if (refedSubchannels.length > 0) {\r\n                allSubchannelsUnrefed = false;\r\n            }\r\n            /* For each subchannel in the pool, try to unref it if it has\r\n             * exactly one ref (which is the ref from the pool itself). If that\r\n             * does happen, remove the subchannel from the pool */\r\n            this.pool[channelTarget] = refedSubchannels;\r\n        }\r\n        /* Currently we do not delete keys with empty values. If that results\r\n         * in significant memory usage we should change it. */\r\n        // Cancel the cleanup task if all subchannels have been unrefed.\r\n        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {\r\n            clearInterval(this.cleanupTimer);\r\n            this.cleanupTimer = null;\r\n        }\r\n    }\r\n    /**\r\n     * Ensures that the cleanup task is spawned.\r\n     */\r\n    ensureCleanupTask() {\r\n        var _a, _b;\r\n        if (this.cleanupTimer === null) {\r\n            this.cleanupTimer = setInterval(() => {\r\n                this.unrefUnusedSubchannels();\r\n            }, REF_CHECK_INTERVAL);\r\n            // Unref because this timer should not keep the event loop running.\r\n            // Call unref only if it exists to address electron/electron#21162\r\n            (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    }\r\n    /**\r\n     * Get a subchannel if one already exists with exactly matching parameters.\r\n     * Otherwise, create and save a subchannel with those parameters.\r\n     * @param channelTarget\r\n     * @param subchannelTarget\r\n     * @param channelArguments\r\n     * @param channelCredentials\r\n     */\r\n    getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {\r\n        this.ensureCleanupTask();\r\n        const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);\r\n        if (channelTarget in this.pool) {\r\n            const subchannelObjArray = this.pool[channelTarget];\r\n            for (const subchannelObj of subchannelObjArray) {\r\n                if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) &&\r\n                    (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) &&\r\n                    channelCredentials._equals(subchannelObj.channelCredentials)) {\r\n                    return subchannelObj.subchannel;\r\n                }\r\n            }\r\n        }\r\n        // If we get here, no matching subchannel was found\r\n        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));\r\n        if (!(channelTarget in this.pool)) {\r\n            this.pool[channelTarget] = [];\r\n        }\r\n        this.pool[channelTarget].push({\r\n            subchannelAddress: subchannelTarget,\r\n            channelArguments,\r\n            channelCredentials,\r\n            subchannel,\r\n        });\r\n        subchannel.ref();\r\n        return subchannel;\r\n    }\r\n}\r\nexports.SubchannelPool = SubchannelPool;\r\nconst globalSubchannelPool = new SubchannelPool();\r\n/**\r\n * Get either the global subchannel pool, or a new subchannel pool.\r\n * @param global\r\n */\r\nfunction getSubchannelPool(global) {\r\n    if (global) {\r\n        return globalSubchannelPool;\r\n    }\r\n    else {\r\n        return new SubchannelPool();\r\n    }\r\n}\r\nexports.getSubchannelPool = getSubchannelPool;\r\n//# sourceMappingURL=subchannel-pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Subchannel = void 0;\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nconst TRACER_NAME = 'subchannel';\r\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\r\n * have a constant for the max signed 32 bit integer, so this is a simple way\r\n * to calculate it */\r\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\r\nclass Subchannel {\r\n    /**\r\n     * A class representing a connection to a single backend.\r\n     * @param channelTarget The target string for the channel as a whole\r\n     * @param subchannelAddress The address for the backend that this subchannel\r\n     *     will connect to\r\n     * @param options The channel options, plus any specific subchannel options\r\n     *     for this subchannel\r\n     * @param credentials The channel credentials used to establish this\r\n     *     connection\r\n     */\r\n    constructor(channelTarget, subchannelAddress, options, credentials, connector) {\r\n        var _a;\r\n        this.channelTarget = channelTarget;\r\n        this.subchannelAddress = subchannelAddress;\r\n        this.options = options;\r\n        this.credentials = credentials;\r\n        this.connector = connector;\r\n        /**\r\n         * The subchannel's current connectivity state. Invariant: `session` === `null`\r\n         * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.\r\n         */\r\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\r\n        /**\r\n         * The underlying http2 session used to make requests.\r\n         */\r\n        this.transport = null;\r\n        /**\r\n         * Indicates that the subchannel should transition from TRANSIENT_FAILURE to\r\n         * CONNECTING instead of IDLE when the backoff timeout ends.\r\n         */\r\n        this.continueConnecting = false;\r\n        /**\r\n         * A list of listener functions that will be called whenever the connectivity\r\n         * state changes. Will be modified by `addConnectivityStateListener` and\r\n         * `removeConnectivityStateListener`\r\n         */\r\n        this.stateListeners = new Set();\r\n        /**\r\n         * Tracks channels and subchannel pools with references to this subchannel\r\n         */\r\n        this.refcount = 0;\r\n        // Channelz info\r\n        this.channelzEnabled = true;\r\n        this.callTracker = new channelz_1.ChannelzCallTracker();\r\n        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\r\n        // Channelz socket info\r\n        this.streamTracker = new channelz_1.ChannelzCallTracker();\r\n        const backoffOptions = {\r\n            initialDelay: options['grpc.initial_reconnect_backoff_ms'],\r\n            maxDelay: options['grpc.max_reconnect_backoff_ms'],\r\n        };\r\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\r\n            this.handleBackoffTimer();\r\n        }, backoffOptions);\r\n        this.backoffTimeout.unref();\r\n        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\r\n        this.keepaliveTime = (_a = options['grpc.keepalive_time_ms']) !== null && _a !== void 0 ? _a : -1;\r\n        if (options['grpc.enable_channelz'] === 0) {\r\n            this.channelzEnabled = false;\r\n        }\r\n        this.channelzTrace = new channelz_1.ChannelzTrace();\r\n        this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\r\n        if (this.channelzEnabled) {\r\n            this.channelzTrace.addTrace('CT_INFO', 'Subchannel created');\r\n        }\r\n        this.trace('Subchannel constructed with options ' +\r\n            JSON.stringify(options, undefined, 2));\r\n    }\r\n    getChannelzInfo() {\r\n        return {\r\n            state: this.connectivityState,\r\n            trace: this.channelzTrace,\r\n            callTracker: this.callTracker,\r\n            children: this.childrenTracker.getChildLists(),\r\n            target: this.subchannelAddressString,\r\n        };\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    refTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'subchannel_refcount', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    handleBackoffTimer() {\r\n        if (this.continueConnecting) {\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\r\n        }\r\n        else {\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.IDLE);\r\n        }\r\n    }\r\n    /**\r\n     * Start a backoff timer with the current nextBackoff timeout\r\n     */\r\n    startBackoff() {\r\n        this.backoffTimeout.runOnce();\r\n    }\r\n    stopBackoff() {\r\n        this.backoffTimeout.stop();\r\n        this.backoffTimeout.reset();\r\n    }\r\n    startConnectingInternal() {\r\n        let options = this.options;\r\n        if (options['grpc.keepalive_time_ms']) {\r\n            const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);\r\n            options = Object.assign(Object.assign({}, options), { 'grpc.keepalive_time_ms': adjustedKeepaliveTime });\r\n        }\r\n        this.connector\r\n            .connect(this.subchannelAddress, this.credentials, options)\r\n            .then(transport => {\r\n            if (this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.READY)) {\r\n                this.transport = transport;\r\n                if (this.channelzEnabled) {\r\n                    this.childrenTracker.refChild(transport.getChannelzRef());\r\n                }\r\n                transport.addDisconnectListener(tooManyPings => {\r\n                    this.transitionToState([connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\r\n                    if (tooManyPings && this.keepaliveTime > 0) {\r\n                        this.keepaliveTime *= 2;\r\n                        logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                /* If we can't transition from CONNECTING to READY here, we will\r\n                 * not be using this transport, so release its resources. */\r\n                transport.shutdown();\r\n            }\r\n        }, error => {\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, `${error}`);\r\n        });\r\n    }\r\n    /**\r\n     * Initiate a state transition from any element of oldStates to the new\r\n     * state. If the current connectivityState is not in oldStates, do nothing.\r\n     * @param oldStates The set of states to transition from\r\n     * @param newState The state to transition to\r\n     * @returns True if the state changed, false otherwise\r\n     */\r\n    transitionToState(oldStates, newState, errorMessage) {\r\n        var _a, _b;\r\n        if (oldStates.indexOf(this.connectivityState) === -1) {\r\n            return false;\r\n        }\r\n        this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[newState]);\r\n        if (this.channelzEnabled) {\r\n            this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\r\n        }\r\n        const previousState = this.connectivityState;\r\n        this.connectivityState = newState;\r\n        switch (newState) {\r\n            case connectivity_state_1.ConnectivityState.READY:\r\n                this.stopBackoff();\r\n                break;\r\n            case connectivity_state_1.ConnectivityState.CONNECTING:\r\n                this.startBackoff();\r\n                this.startConnectingInternal();\r\n                this.continueConnecting = false;\r\n                break;\r\n            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\r\n                if (this.channelzEnabled && this.transport) {\r\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\r\n                }\r\n                (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();\r\n                this.transport = null;\r\n                /* If the backoff timer has already ended by the time we get to the\r\n                 * TRANSIENT_FAILURE state, we want to immediately transition out of\r\n                 * TRANSIENT_FAILURE as though the backoff timer is ending right now */\r\n                if (!this.backoffTimeout.isRunning()) {\r\n                    process.nextTick(() => {\r\n                        this.handleBackoffTimer();\r\n                    });\r\n                }\r\n                break;\r\n            case connectivity_state_1.ConnectivityState.IDLE:\r\n                if (this.channelzEnabled && this.transport) {\r\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\r\n                }\r\n                (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();\r\n                this.transport = null;\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);\r\n        }\r\n        for (const listener of this.stateListeners) {\r\n            listener(this, previousState, newState, this.keepaliveTime, errorMessage);\r\n        }\r\n        return true;\r\n    }\r\n    ref() {\r\n        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount + 1));\r\n        this.refcount += 1;\r\n    }\r\n    unref() {\r\n        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount - 1));\r\n        this.refcount -= 1;\r\n        if (this.refcount === 0) {\r\n            if (this.channelzEnabled) {\r\n                this.channelzTrace.addTrace('CT_INFO', 'Shutting down');\r\n            }\r\n            if (this.channelzEnabled) {\r\n                (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n            }\r\n            process.nextTick(() => {\r\n                this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING, connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\r\n            });\r\n        }\r\n    }\r\n    unrefIfOneRef() {\r\n        if (this.refcount === 1) {\r\n            this.unref();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    createCall(metadata, host, method, listener) {\r\n        if (!this.transport) {\r\n            throw new Error('Cannot create call, subchannel not READY');\r\n        }\r\n        let statsTracker;\r\n        if (this.channelzEnabled) {\r\n            this.callTracker.addCallStarted();\r\n            this.streamTracker.addCallStarted();\r\n            statsTracker = {\r\n                onCallEnd: status => {\r\n                    if (status.code === constants_1.Status.OK) {\r\n                        this.callTracker.addCallSucceeded();\r\n                    }\r\n                    else {\r\n                        this.callTracker.addCallFailed();\r\n                    }\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            statsTracker = {};\r\n        }\r\n        return this.transport.createCall(metadata, host, method, listener, statsTracker);\r\n    }\r\n    /**\r\n     * If the subchannel is currently IDLE, start connecting and switch to the\r\n     * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,\r\n     * the next time it would transition to IDLE, start connecting again instead.\r\n     * Otherwise, do nothing.\r\n     */\r\n    startConnecting() {\r\n        process.nextTick(() => {\r\n            /* First, try to transition from IDLE to connecting. If that doesn't happen\r\n             * because the state is not currently IDLE, check if it is\r\n             * TRANSIENT_FAILURE, and if so indicate that it should go back to\r\n             * connecting after the backoff timer ends. Otherwise do nothing */\r\n            if (!this.transitionToState([connectivity_state_1.ConnectivityState.IDLE], connectivity_state_1.ConnectivityState.CONNECTING)) {\r\n                if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n                    this.continueConnecting = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Get the subchannel's current connectivity state.\r\n     */\r\n    getConnectivityState() {\r\n        return this.connectivityState;\r\n    }\r\n    /**\r\n     * Add a listener function to be called whenever the subchannel's\r\n     * connectivity state changes.\r\n     * @param listener\r\n     */\r\n    addConnectivityStateListener(listener) {\r\n        this.stateListeners.add(listener);\r\n    }\r\n    /**\r\n     * Remove a listener previously added with `addConnectivityStateListener`\r\n     * @param listener A reference to a function previously passed to\r\n     *     `addConnectivityStateListener`\r\n     */\r\n    removeConnectivityStateListener(listener) {\r\n        this.stateListeners.delete(listener);\r\n    }\r\n    /**\r\n     * Reset the backoff timeout, and immediately start connecting if in backoff.\r\n     */\r\n    resetBackoff() {\r\n        process.nextTick(() => {\r\n            this.backoffTimeout.reset();\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\r\n        });\r\n    }\r\n    getAddress() {\r\n        return this.subchannelAddressString;\r\n    }\r\n    getChannelzRef() {\r\n        return this.channelzRef;\r\n    }\r\n    getRealSubchannel() {\r\n        return this;\r\n    }\r\n    realSubchannelEquals(other) {\r\n        return other.getRealSubchannel() === this;\r\n    }\r\n    throttleKeepalive(newKeepaliveTime) {\r\n        if (newKeepaliveTime > this.keepaliveTime) {\r\n            this.keepaliveTime = newKeepaliveTime;\r\n        }\r\n    }\r\n}\r\nexports.Subchannel = Subchannel;\r\n//# sourceMappingURL=subchannel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/tls-helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getDefaultRootsData = exports.CIPHER_SUITES = void 0;\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nexports.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;\r\nconst DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;\r\nlet defaultRootsData = null;\r\nfunction getDefaultRootsData() {\r\n    if (DEFAULT_ROOTS_FILE_PATH) {\r\n        if (defaultRootsData === null) {\r\n            defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);\r\n        }\r\n        return defaultRootsData;\r\n    }\r\n    return null;\r\n}\r\nexports.getDefaultRootsData = getDefaultRootsData;\r\n//# sourceMappingURL=tls-helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdGxzLWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyxxQkFBcUI7QUFDbkQsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN0b19waC8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy90bHMtaGVscGVycy5qcz8zYTdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldERlZmF1bHRSb290c0RhdGEgPSBleHBvcnRzLkNJUEhFUl9TVUlURVMgPSB2b2lkIDA7XHJcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xyXG5leHBvcnRzLkNJUEhFUl9TVUlURVMgPSBwcm9jZXNzLmVudi5HUlBDX1NTTF9DSVBIRVJfU1VJVEVTO1xyXG5jb25zdCBERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCA9IHByb2Nlc3MuZW52LkdSUENfREVGQVVMVF9TU0xfUk9PVFNfRklMRV9QQVRIO1xyXG5sZXQgZGVmYXVsdFJvb3RzRGF0YSA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRSb290c0RhdGEoKSB7XHJcbiAgICBpZiAoREVGQVVMVF9ST09UU19GSUxFX1BBVEgpIHtcclxuICAgICAgICBpZiAoZGVmYXVsdFJvb3RzRGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkZWZhdWx0Um9vdHNEYXRhID0gZnMucmVhZEZpbGVTeW5jKERFRkFVTFRfUk9PVFNfRklMRV9QQVRIKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRSb290c0RhdGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5leHBvcnRzLmdldERlZmF1bHRSb290c0RhdGEgPSBnZXREZWZhdWx0Um9vdHNEYXRhO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10bHMtaGVscGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/transport.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/transport.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2023 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Http2SubchannelConnector = void 0;\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\r\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst net = __webpack_require__(/*! net */ \"net\");\r\nconst subchannel_call_1 = __webpack_require__(/*! ./subchannel-call */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js\");\r\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(ssr)/./node_modules/@grpc/grpc-js/build/src/call-number.js\");\r\nconst TRACER_NAME = 'transport';\r\nconst FLOW_CONTROL_TRACER_NAME = 'transport_flowctrl';\r\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/@grpc/grpc-js/package.json\").version);\r\nconst { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT, } = http2.constants;\r\nconst KEEPALIVE_TIMEOUT_MS = 20000;\r\nconst tooManyPingsData = Buffer.from('too_many_pings', 'ascii');\r\nclass Http2Transport {\r\n    constructor(session, subchannelAddress, options, \r\n    /**\r\n     * Name of the remote server, if it is not the same as the subchannel\r\n     * address, i.e. if connecting through an HTTP CONNECT proxy.\r\n     */\r\n    remoteName) {\r\n        this.session = session;\r\n        this.options = options;\r\n        this.remoteName = remoteName;\r\n        /**\r\n         * The amount of time in between sending pings\r\n         */\r\n        this.keepaliveTimeMs = -1;\r\n        /**\r\n         * The amount of time to wait for an acknowledgement after sending a ping\r\n         */\r\n        this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\r\n        /**\r\n         * Timer reference for timeout that indicates when to send the next ping\r\n         */\r\n        this.keepaliveTimerId = null;\r\n        /**\r\n         * Indicates that the keepalive timer ran out while there were no active\r\n         * calls, and a ping should be sent the next time a call starts.\r\n         */\r\n        this.pendingSendKeepalivePing = false;\r\n        /**\r\n         * Timer reference tracking when the most recent ping will be considered lost\r\n         */\r\n        this.keepaliveTimeoutId = null;\r\n        /**\r\n         * Indicates whether keepalive pings should be sent without any active calls\r\n         */\r\n        this.keepaliveWithoutCalls = false;\r\n        this.activeCalls = new Set();\r\n        this.disconnectListeners = [];\r\n        this.disconnectHandled = false;\r\n        this.channelzEnabled = true;\r\n        this.streamTracker = new channelz_1.ChannelzCallTracker();\r\n        this.keepalivesSent = 0;\r\n        this.messagesSent = 0;\r\n        this.messagesReceived = 0;\r\n        this.lastMessageSentTimestamp = null;\r\n        this.lastMessageReceivedTimestamp = null;\r\n        /* Populate subchannelAddressString and channelzRef before doing anything\r\n         * else, because they are used in the trace methods. */\r\n        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\r\n        if (options['grpc.enable_channelz'] === 0) {\r\n            this.channelzEnabled = false;\r\n        }\r\n        this.channelzRef = (0, channelz_1.registerChannelzSocket)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\r\n        // Build user-agent string.\r\n        this.userAgent = [\r\n            options['grpc.primary_user_agent'],\r\n            `grpc-node-js/${clientVersion}`,\r\n            options['grpc.secondary_user_agent'],\r\n        ]\r\n            .filter(e => e)\r\n            .join(' '); // remove falsey values first\r\n        if ('grpc.keepalive_time_ms' in options) {\r\n            this.keepaliveTimeMs = options['grpc.keepalive_time_ms'];\r\n        }\r\n        if ('grpc.keepalive_timeout_ms' in options) {\r\n            this.keepaliveTimeoutMs = options['grpc.keepalive_timeout_ms'];\r\n        }\r\n        if ('grpc.keepalive_permit_without_calls' in options) {\r\n            this.keepaliveWithoutCalls =\r\n                options['grpc.keepalive_permit_without_calls'] === 1;\r\n        }\r\n        else {\r\n            this.keepaliveWithoutCalls = false;\r\n        }\r\n        session.once('close', () => {\r\n            this.trace('session closed');\r\n            this.stopKeepalivePings();\r\n            this.handleDisconnect();\r\n        });\r\n        session.once('goaway', (errorCode, lastStreamID, opaqueData) => {\r\n            let tooManyPings = false;\r\n            /* See the last paragraph of\r\n             * https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md#basic-keepalive */\r\n            if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM &&\r\n                opaqueData &&\r\n                opaqueData.equals(tooManyPingsData)) {\r\n                tooManyPings = true;\r\n            }\r\n            this.trace('connection closed by GOAWAY with code ' + errorCode + ' and data ' + (opaqueData === null || opaqueData === void 0 ? void 0 : opaqueData.toString()));\r\n            this.reportDisconnectToOwner(tooManyPings);\r\n        });\r\n        session.once('error', error => {\r\n            /* Do nothing here. Any error should also trigger a close event, which is\r\n             * where we want to handle that.  */\r\n            this.trace('connection closed with error ' + error.message);\r\n        });\r\n        if (logging.isTracerEnabled(TRACER_NAME)) {\r\n            session.on('remoteSettings', (settings) => {\r\n                this.trace('new settings received' +\r\n                    (this.session !== session ? ' on the old connection' : '') +\r\n                    ': ' +\r\n                    JSON.stringify(settings));\r\n            });\r\n            session.on('localSettings', (settings) => {\r\n                this.trace('local settings acknowledged by remote' +\r\n                    (this.session !== session ? ' on the old connection' : '') +\r\n                    ': ' +\r\n                    JSON.stringify(settings));\r\n            });\r\n        }\r\n        /* Start the keepalive timer last, because this can trigger trace logs,\r\n         * which should only happen after everything else is set up. */\r\n        if (this.keepaliveWithoutCalls) {\r\n            this.maybeStartKeepalivePingTimer();\r\n        }\r\n    }\r\n    getChannelzInfo() {\r\n        var _a, _b, _c;\r\n        const sessionSocket = this.session.socket;\r\n        const remoteAddress = sessionSocket.remoteAddress\r\n            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort)\r\n            : null;\r\n        const localAddress = sessionSocket.localAddress\r\n            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort)\r\n            : null;\r\n        let tlsInfo;\r\n        if (this.session.encrypted) {\r\n            const tlsSocket = sessionSocket;\r\n            const cipherInfo = tlsSocket.getCipher();\r\n            const certificate = tlsSocket.getCertificate();\r\n            const peerCertificate = tlsSocket.getPeerCertificate();\r\n            tlsInfo = {\r\n                cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\r\n                cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\r\n                localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\r\n                remoteCertificate: peerCertificate && 'raw' in peerCertificate\r\n                    ? peerCertificate.raw\r\n                    : null,\r\n            };\r\n        }\r\n        else {\r\n            tlsInfo = null;\r\n        }\r\n        const socketInfo = {\r\n            remoteAddress: remoteAddress,\r\n            localAddress: localAddress,\r\n            security: tlsInfo,\r\n            remoteName: this.remoteName,\r\n            streamsStarted: this.streamTracker.callsStarted,\r\n            streamsSucceeded: this.streamTracker.callsSucceeded,\r\n            streamsFailed: this.streamTracker.callsFailed,\r\n            messagesSent: this.messagesSent,\r\n            messagesReceived: this.messagesReceived,\r\n            keepAlivesSent: this.keepalivesSent,\r\n            lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,\r\n            lastRemoteStreamCreatedTimestamp: null,\r\n            lastMessageSentTimestamp: this.lastMessageSentTimestamp,\r\n            lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,\r\n            localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\r\n            remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null,\r\n        };\r\n        return socketInfo;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    keepaliveTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    flowControlTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    internalsTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'transport_internals', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    /**\r\n     * Indicate to the owner of this object that this transport should no longer\r\n     * be used. That happens if the connection drops, or if the server sends a\r\n     * GOAWAY.\r\n     * @param tooManyPings If true, this was triggered by a GOAWAY with data\r\n     * indicating that the session was closed becaues the client sent too many\r\n     * pings.\r\n     * @returns\r\n     */\r\n    reportDisconnectToOwner(tooManyPings) {\r\n        if (this.disconnectHandled) {\r\n            return;\r\n        }\r\n        this.disconnectHandled = true;\r\n        this.disconnectListeners.forEach(listener => listener(tooManyPings));\r\n    }\r\n    /**\r\n     * Handle connection drops, but not GOAWAYs.\r\n     */\r\n    handleDisconnect() {\r\n        this.reportDisconnectToOwner(false);\r\n        /* Give calls an event loop cycle to finish naturally before reporting the\r\n         * disconnnection to them. */\r\n        setImmediate(() => {\r\n            for (const call of this.activeCalls) {\r\n                call.onDisconnect();\r\n            }\r\n        });\r\n    }\r\n    addDisconnectListener(listener) {\r\n        this.disconnectListeners.push(listener);\r\n    }\r\n    clearKeepaliveTimer() {\r\n        if (!this.keepaliveTimerId) {\r\n            return;\r\n        }\r\n        clearTimeout(this.keepaliveTimerId);\r\n        this.keepaliveTimerId = null;\r\n    }\r\n    clearKeepaliveTimeout() {\r\n        if (!this.keepaliveTimeoutId) {\r\n            return;\r\n        }\r\n        clearTimeout(this.keepaliveTimeoutId);\r\n        this.keepaliveTimeoutId = null;\r\n    }\r\n    canSendPing() {\r\n        return (this.keepaliveTimeMs > 0 &&\r\n            (this.keepaliveWithoutCalls || this.activeCalls.size > 0));\r\n    }\r\n    maybeSendPing() {\r\n        var _a, _b;\r\n        this.clearKeepaliveTimer();\r\n        if (!this.canSendPing()) {\r\n            this.pendingSendKeepalivePing = true;\r\n            return;\r\n        }\r\n        if (this.channelzEnabled) {\r\n            this.keepalivesSent += 1;\r\n        }\r\n        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\r\n        if (!this.keepaliveTimeoutId) {\r\n            this.keepaliveTimeoutId = setTimeout(() => {\r\n                this.keepaliveTrace('Ping timeout passed without response');\r\n                this.handleDisconnect();\r\n            }, this.keepaliveTimeoutMs);\r\n            (_b = (_a = this.keepaliveTimeoutId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n        try {\r\n            this.session.ping((err, duration, payload) => {\r\n                if (err) {\r\n                    this.keepaliveTrace('Ping failed with error ' + err.message);\r\n                    this.handleDisconnect();\r\n                }\r\n                this.keepaliveTrace('Received ping response');\r\n                this.clearKeepaliveTimeout();\r\n                this.maybeStartKeepalivePingTimer();\r\n            });\r\n        }\r\n        catch (e) {\r\n            /* If we fail to send a ping, the connection is no longer functional, so\r\n             * we should discard it. */\r\n            this.handleDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Starts the keepalive ping timer if appropriate. If the timer already ran\r\n     * out while there were no active requests, instead send a ping immediately.\r\n     * If the ping timer is already running or a ping is currently in flight,\r\n     * instead do nothing and wait for them to resolve.\r\n     */\r\n    maybeStartKeepalivePingTimer() {\r\n        var _a, _b;\r\n        if (!this.canSendPing()) {\r\n            return;\r\n        }\r\n        if (this.pendingSendKeepalivePing) {\r\n            this.pendingSendKeepalivePing = false;\r\n            this.maybeSendPing();\r\n        }\r\n        else if (!this.keepaliveTimerId && !this.keepaliveTimeoutId) {\r\n            this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\r\n            this.keepaliveTimerId = (_b = (_a = setTimeout(() => {\r\n                this.maybeSendPing();\r\n            }, this.keepaliveTimeMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n        /* Otherwise, there is already either a keepalive timer or a ping pending,\r\n         * wait for those to resolve. */\r\n    }\r\n    stopKeepalivePings() {\r\n        if (this.keepaliveTimerId) {\r\n            clearTimeout(this.keepaliveTimerId);\r\n            this.keepaliveTimerId = null;\r\n        }\r\n        this.clearKeepaliveTimeout();\r\n    }\r\n    removeActiveCall(call) {\r\n        this.activeCalls.delete(call);\r\n        if (this.activeCalls.size === 0) {\r\n            this.session.unref();\r\n        }\r\n    }\r\n    addActiveCall(call) {\r\n        this.activeCalls.add(call);\r\n        if (this.activeCalls.size === 1) {\r\n            this.session.ref();\r\n            if (!this.keepaliveWithoutCalls) {\r\n                this.maybeStartKeepalivePingTimer();\r\n            }\r\n        }\r\n    }\r\n    createCall(metadata, host, method, listener, subchannelCallStatsTracker) {\r\n        const headers = metadata.toHttp2Headers();\r\n        headers[HTTP2_HEADER_AUTHORITY] = host;\r\n        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\r\n        headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/grpc';\r\n        headers[HTTP2_HEADER_METHOD] = 'POST';\r\n        headers[HTTP2_HEADER_PATH] = method;\r\n        headers[HTTP2_HEADER_TE] = 'trailers';\r\n        let http2Stream;\r\n        /* In theory, if an error is thrown by session.request because session has\r\n         * become unusable (e.g. because it has received a goaway), this subchannel\r\n         * should soon see the corresponding close or goaway event anyway and leave\r\n         * READY. But we have seen reports that this does not happen\r\n         * (https://github.com/googleapis/nodejs-firestore/issues/1023#issuecomment-653204096)\r\n         * so for defense in depth, we just discard the session when we see an\r\n         * error here.\r\n         */\r\n        try {\r\n            http2Stream = this.session.request(headers);\r\n        }\r\n        catch (e) {\r\n            this.handleDisconnect();\r\n            throw e;\r\n        }\r\n        this.flowControlTrace('local window size: ' +\r\n            this.session.state.localWindowSize +\r\n            ' remote window size: ' +\r\n            this.session.state.remoteWindowSize);\r\n        this.internalsTrace('session.closed=' +\r\n            this.session.closed +\r\n            ' session.destroyed=' +\r\n            this.session.destroyed +\r\n            ' session.socket.destroyed=' +\r\n            this.session.socket.destroyed);\r\n        let eventTracker;\r\n        // eslint-disable-next-line prefer-const\r\n        let call;\r\n        if (this.channelzEnabled) {\r\n            this.streamTracker.addCallStarted();\r\n            eventTracker = {\r\n                addMessageSent: () => {\r\n                    var _a;\r\n                    this.messagesSent += 1;\r\n                    this.lastMessageSentTimestamp = new Date();\r\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                addMessageReceived: () => {\r\n                    var _a;\r\n                    this.messagesReceived += 1;\r\n                    this.lastMessageReceivedTimestamp = new Date();\r\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                onCallEnd: status => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\r\n                    this.removeActiveCall(call);\r\n                },\r\n                onStreamEnd: success => {\r\n                    var _a;\r\n                    if (success) {\r\n                        this.streamTracker.addCallSucceeded();\r\n                    }\r\n                    else {\r\n                        this.streamTracker.addCallFailed();\r\n                    }\r\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            eventTracker = {\r\n                addMessageSent: () => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                addMessageReceived: () => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                onCallEnd: status => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\r\n                    this.removeActiveCall(call);\r\n                },\r\n                onStreamEnd: success => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\r\n                },\r\n            };\r\n        }\r\n        call = new subchannel_call_1.Http2SubchannelCall(http2Stream, eventTracker, listener, this, (0, call_number_1.getNextCallNumber)());\r\n        this.addActiveCall(call);\r\n        return call;\r\n    }\r\n    getChannelzRef() {\r\n        return this.channelzRef;\r\n    }\r\n    getPeerName() {\r\n        return this.subchannelAddressString;\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n    shutdown() {\r\n        this.session.close();\r\n        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n    }\r\n}\r\nclass Http2SubchannelConnector {\r\n    constructor(channelTarget) {\r\n        this.channelTarget = channelTarget;\r\n        this.session = null;\r\n        this.isShutdown = false;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, (0, uri_parser_1.uriToString)(this.channelTarget) + ' ' + text);\r\n    }\r\n    createSession(address, credentials, options, proxyConnectionResult) {\r\n        if (this.isShutdown) {\r\n            return Promise.reject();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            var _a, _b, _c;\r\n            let remoteName;\r\n            if (proxyConnectionResult.realTarget) {\r\n                remoteName = (0, uri_parser_1.uriToString)(proxyConnectionResult.realTarget);\r\n                this.trace('creating HTTP/2 session through proxy to ' +\r\n                    (0, uri_parser_1.uriToString)(proxyConnectionResult.realTarget));\r\n            }\r\n            else {\r\n                remoteName = null;\r\n                this.trace('creating HTTP/2 session to ' + (0, subchannel_address_1.subchannelAddressToString)(address));\r\n            }\r\n            const targetAuthority = (0, resolver_1.getDefaultAuthority)((_a = proxyConnectionResult.realTarget) !== null && _a !== void 0 ? _a : this.channelTarget);\r\n            let connectionOptions = credentials._getConnectionOptions() || {};\r\n            connectionOptions.maxSendHeaderBlockLength = Number.MAX_SAFE_INTEGER;\r\n            if ('grpc-node.max_session_memory' in options) {\r\n                connectionOptions.maxSessionMemory =\r\n                    options['grpc-node.max_session_memory'];\r\n            }\r\n            else {\r\n                /* By default, set a very large max session memory limit, to effectively\r\n                 * disable enforcement of the limit. Some testing indicates that Node's\r\n                 * behavior degrades badly when this limit is reached, so we solve that\r\n                 * by disabling the check entirely. */\r\n                connectionOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\r\n            }\r\n            let addressScheme = 'http://';\r\n            if ('secureContext' in connectionOptions) {\r\n                addressScheme = 'https://';\r\n                // If provided, the value of grpc.ssl_target_name_override should be used\r\n                // to override the target hostname when checking server identity.\r\n                // This option is used for testing only.\r\n                if (options['grpc.ssl_target_name_override']) {\r\n                    const sslTargetNameOverride = options['grpc.ssl_target_name_override'];\r\n                    connectionOptions.checkServerIdentity = (host, cert) => {\r\n                        return (0, tls_1.checkServerIdentity)(sslTargetNameOverride, cert);\r\n                    };\r\n                    connectionOptions.servername = sslTargetNameOverride;\r\n                }\r\n                else {\r\n                    const authorityHostname = (_c = (_b = (0, uri_parser_1.splitHostPort)(targetAuthority)) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : 'localhost';\r\n                    // We want to always set servername to support SNI\r\n                    connectionOptions.servername = authorityHostname;\r\n                }\r\n                if (proxyConnectionResult.socket) {\r\n                    /* This is part of the workaround for\r\n                     * https://github.com/nodejs/node/issues/32922. Without that bug,\r\n                     * proxyConnectionResult.socket would always be a plaintext socket and\r\n                     * this would say\r\n                     * connectionOptions.socket = proxyConnectionResult.socket; */\r\n                    connectionOptions.createConnection = (authority, option) => {\r\n                        return proxyConnectionResult.socket;\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                /* In all but the most recent versions of Node, http2.connect does not use\r\n                 * the options when establishing plaintext connections, so we need to\r\n                 * establish that connection explicitly. */\r\n                connectionOptions.createConnection = (authority, option) => {\r\n                    if (proxyConnectionResult.socket) {\r\n                        return proxyConnectionResult.socket;\r\n                    }\r\n                    else {\r\n                        /* net.NetConnectOpts is declared in a way that is more restrictive\r\n                         * than what net.connect will actually accept, so we use the type\r\n                         * assertion to work around that. */\r\n                        return net.connect(address);\r\n                    }\r\n                };\r\n            }\r\n            connectionOptions = Object.assign(Object.assign(Object.assign({}, connectionOptions), address), { enableTrace: options['grpc-node.tls_enable_trace'] === 1 });\r\n            /* http2.connect uses the options here:\r\n             * https://github.com/nodejs/node/blob/70c32a6d190e2b5d7b9ff9d5b6a459d14e8b7d59/lib/internal/http2/core.js#L3028-L3036\r\n             * The spread operator overides earlier values with later ones, so any port\r\n             * or host values in the options will be used rather than any values extracted\r\n             * from the first argument. In addition, the path overrides the host and port,\r\n             * as documented for plaintext connections here:\r\n             * https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener\r\n             * and for TLS connections here:\r\n             * https://nodejs.org/api/tls.html#tls_tls_connect_options_callback. In\r\n             * earlier versions of Node, http2.connect passes these options to\r\n             * tls.connect but not net.connect, so in the insecure case we still need\r\n             * to set the createConnection option above to create the connection\r\n             * explicitly. We cannot do that in the TLS case because http2.connect\r\n             * passes necessary additional options to tls.connect.\r\n             * The first argument just needs to be parseable as a URL and the scheme\r\n             * determines whether the connection will be established over TLS or not.\r\n             */\r\n            const session = http2.connect(addressScheme + targetAuthority, connectionOptions);\r\n            this.session = session;\r\n            let errorMessage = 'Failed to connect';\r\n            session.unref();\r\n            session.once('connect', () => {\r\n                session.removeAllListeners();\r\n                resolve(new Http2Transport(session, address, options, remoteName));\r\n                this.session = null;\r\n            });\r\n            session.once('close', () => {\r\n                this.session = null;\r\n                // Leave time for error event to happen before rejecting\r\n                setImmediate(() => {\r\n                    reject(`${errorMessage} (${new Date().toISOString()})`);\r\n                });\r\n            });\r\n            session.once('error', error => {\r\n                errorMessage = error.message;\r\n                this.trace('connection failed with error ' + errorMessage);\r\n            });\r\n        });\r\n    }\r\n    connect(address, credentials, options) {\r\n        var _a, _b;\r\n        if (this.isShutdown) {\r\n            return Promise.reject();\r\n        }\r\n        /* Pass connection options through to the proxy so that it's able to\r\n         * upgrade it's connection to support tls if needed.\r\n         * This is a workaround for https://github.com/nodejs/node/issues/32922\r\n         * See https://github.com/grpc/grpc-node/pull/1369 for more info. */\r\n        const connectionOptions = credentials._getConnectionOptions() || {};\r\n        if ('secureContext' in connectionOptions) {\r\n            connectionOptions.ALPNProtocols = ['h2'];\r\n            // If provided, the value of grpc.ssl_target_name_override should be used\r\n            // to override the target hostname when checking server identity.\r\n            // This option is used for testing only.\r\n            if (options['grpc.ssl_target_name_override']) {\r\n                const sslTargetNameOverride = options['grpc.ssl_target_name_override'];\r\n                connectionOptions.checkServerIdentity = (host, cert) => {\r\n                    return (0, tls_1.checkServerIdentity)(sslTargetNameOverride, cert);\r\n                };\r\n                connectionOptions.servername = sslTargetNameOverride;\r\n            }\r\n            else {\r\n                if ('grpc.http_connect_target' in options) {\r\n                    /* This is more or less how servername will be set in createSession\r\n                     * if a connection is successfully established through the proxy.\r\n                     * If the proxy is not used, these connectionOptions are discarded\r\n                     * anyway */\r\n                    const targetPath = (0, resolver_1.getDefaultAuthority)((_a = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target'])) !== null && _a !== void 0 ? _a : {\r\n                        path: 'localhost',\r\n                    });\r\n                    const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\r\n                    connectionOptions.servername = (_b = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _b !== void 0 ? _b : targetPath;\r\n                }\r\n            }\r\n            if (options['grpc-node.tls_enable_trace']) {\r\n                connectionOptions.enableTrace = true;\r\n            }\r\n        }\r\n        return (0, http_proxy_1.getProxiedConnection)(address, options, connectionOptions).then(result => this.createSession(address, credentials, options, result));\r\n    }\r\n    shutdown() {\r\n        var _a;\r\n        this.isShutdown = true;\r\n        (_a = this.session) === null || _a === void 0 ? void 0 : _a.close();\r\n        this.session = null;\r\n    }\r\n}\r\nexports.Http2SubchannelConnector = Http2SubchannelConnector;\r\n//# sourceMappingURL=transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/transport.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/uri-parser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2020 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\r\n/*\r\n * The groups correspond to URI parts as follows:\r\n * 1. scheme\r\n * 2. authority\r\n * 3. path\r\n */\r\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\r\nfunction parseUri(uriString) {\r\n    const parsedUri = URI_REGEX.exec(uriString);\r\n    if (parsedUri === null) {\r\n        return null;\r\n    }\r\n    return {\r\n        scheme: parsedUri[1],\r\n        authority: parsedUri[2],\r\n        path: parsedUri[3],\r\n    };\r\n}\r\nexports.parseUri = parseUri;\r\nconst NUMBER_REGEX = /^\\d+$/;\r\nfunction splitHostPort(path) {\r\n    if (path.startsWith('[')) {\r\n        const hostEnd = path.indexOf(']');\r\n        if (hostEnd === -1) {\r\n            return null;\r\n        }\r\n        const host = path.substring(1, hostEnd);\r\n        /* Only an IPv6 address should be in bracketed notation, and an IPv6\r\n         * address should have at least one colon */\r\n        if (host.indexOf(':') === -1) {\r\n            return null;\r\n        }\r\n        if (path.length > hostEnd + 1) {\r\n            if (path[hostEnd + 1] === ':') {\r\n                const portString = path.substring(hostEnd + 2);\r\n                if (NUMBER_REGEX.test(portString)) {\r\n                    return {\r\n                        host: host,\r\n                        port: +portString,\r\n                    };\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                host,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        const splitPath = path.split(':');\r\n        /* Exactly one colon means that this is host:port. Zero colons means that\r\n         * there is no port. And multiple colons means that this is a bare IPv6\r\n         * address with no port */\r\n        if (splitPath.length === 2) {\r\n            if (NUMBER_REGEX.test(splitPath[1])) {\r\n                return {\r\n                    host: splitPath[0],\r\n                    port: +splitPath[1],\r\n                };\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                host: path,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.splitHostPort = splitHostPort;\r\nfunction uriToString(uri) {\r\n    let result = '';\r\n    if (uri.scheme !== undefined) {\r\n        result += uri.scheme + ':';\r\n    }\r\n    if (uri.authority !== undefined) {\r\n        result += '//' + uri.authority + '/';\r\n    }\r\n    result += uri.path;\r\n    return result;\r\n}\r\nexports.uriToString = uriToString;\r\n//# sourceMappingURL=uri-parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdXJpLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLHFCQUFxQixHQUFHLGdCQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdG9fcGgvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdXJpLXBhcnNlci5qcz84MjhiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnVyaVRvU3RyaW5nID0gZXhwb3J0cy5zcGxpdEhvc3RQb3J0ID0gZXhwb3J0cy5wYXJzZVVyaSA9IHZvaWQgMDtcclxuLypcclxuICogVGhlIGdyb3VwcyBjb3JyZXNwb25kIHRvIFVSSSBwYXJ0cyBhcyBmb2xsb3dzOlxyXG4gKiAxLiBzY2hlbWVcclxuICogMi4gYXV0aG9yaXR5XHJcbiAqIDMuIHBhdGhcclxuICovXHJcbmNvbnN0IFVSSV9SRUdFWCA9IC9eKD86KFtBLVphLXowLTkrLi1dKyk6KT8oPzpcXC9cXC8oW14vXSopXFwvKT8oLispJC87XHJcbmZ1bmN0aW9uIHBhcnNlVXJpKHVyaVN0cmluZykge1xyXG4gICAgY29uc3QgcGFyc2VkVXJpID0gVVJJX1JFR0VYLmV4ZWModXJpU3RyaW5nKTtcclxuICAgIGlmIChwYXJzZWRVcmkgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2NoZW1lOiBwYXJzZWRVcmlbMV0sXHJcbiAgICAgICAgYXV0aG9yaXR5OiBwYXJzZWRVcmlbMl0sXHJcbiAgICAgICAgcGF0aDogcGFyc2VkVXJpWzNdLFxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLnBhcnNlVXJpID0gcGFyc2VVcmk7XHJcbmNvbnN0IE5VTUJFUl9SRUdFWCA9IC9eXFxkKyQvO1xyXG5mdW5jdGlvbiBzcGxpdEhvc3RQb3J0KHBhdGgpIHtcclxuICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoJ1snKSkge1xyXG4gICAgICAgIGNvbnN0IGhvc3RFbmQgPSBwYXRoLmluZGV4T2YoJ10nKTtcclxuICAgICAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGhvc3QgPSBwYXRoLnN1YnN0cmluZygxLCBob3N0RW5kKTtcclxuICAgICAgICAvKiBPbmx5IGFuIElQdjYgYWRkcmVzcyBzaG91bGQgYmUgaW4gYnJhY2tldGVkIG5vdGF0aW9uLCBhbmQgYW4gSVB2NlxyXG4gICAgICAgICAqIGFkZHJlc3Mgc2hvdWxkIGhhdmUgYXQgbGVhc3Qgb25lIGNvbG9uICovXHJcbiAgICAgICAgaWYgKGhvc3QuaW5kZXhPZignOicpID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gaG9zdEVuZCArIDEpIHtcclxuICAgICAgICAgICAgaWYgKHBhdGhbaG9zdEVuZCArIDFdID09PSAnOicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnRTdHJpbmcgPSBwYXRoLnN1YnN0cmluZyhob3N0RW5kICsgMik7XHJcbiAgICAgICAgICAgICAgICBpZiAoTlVNQkVSX1JFR0VYLnRlc3QocG9ydFN0cmluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0OiBob3N0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3J0OiArcG9ydFN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGhvc3QsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgc3BsaXRQYXRoID0gcGF0aC5zcGxpdCgnOicpO1xyXG4gICAgICAgIC8qIEV4YWN0bHkgb25lIGNvbG9uIG1lYW5zIHRoYXQgdGhpcyBpcyBob3N0OnBvcnQuIFplcm8gY29sb25zIG1lYW5zIHRoYXRcclxuICAgICAgICAgKiB0aGVyZSBpcyBubyBwb3J0LiBBbmQgbXVsdGlwbGUgY29sb25zIG1lYW5zIHRoYXQgdGhpcyBpcyBhIGJhcmUgSVB2NlxyXG4gICAgICAgICAqIGFkZHJlc3Mgd2l0aCBubyBwb3J0ICovXHJcbiAgICAgICAgaWYgKHNwbGl0UGF0aC5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgaWYgKE5VTUJFUl9SRUdFWC50ZXN0KHNwbGl0UGF0aFsxXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdDogc3BsaXRQYXRoWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvcnQ6ICtzcGxpdFBhdGhbMV0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBob3N0OiBwYXRoLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNwbGl0SG9zdFBvcnQgPSBzcGxpdEhvc3RQb3J0O1xyXG5mdW5jdGlvbiB1cmlUb1N0cmluZyh1cmkpIHtcclxuICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgIGlmICh1cmkuc2NoZW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXN1bHQgKz0gdXJpLnNjaGVtZSArICc6JztcclxuICAgIH1cclxuICAgIGlmICh1cmkuYXV0aG9yaXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXN1bHQgKz0gJy8vJyArIHVyaS5hdXRob3JpdHkgKyAnLyc7XHJcbiAgICB9XHJcbiAgICByZXN1bHQgKz0gdXJpLnBhdGg7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmV4cG9ydHMudXJpVG9TdHJpbmcgPSB1cmlUb1N0cmluZztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJpLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/proto-loader/build/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/**\r\n * @license\r\n * Copyright 2018 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.IdempotencyLevel = exports.isAnyExtension = exports.Long = void 0;\r\nconst camelCase = __webpack_require__(/*! lodash.camelcase */ \"(ssr)/./node_modules/lodash.camelcase/index.js\");\r\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(ssr)/./node_modules/protobufjs/index.js\");\r\nconst descriptor = __webpack_require__(/*! protobufjs/ext/descriptor */ \"(ssr)/./node_modules/protobufjs/ext/descriptor/index.js\");\r\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@grpc/proto-loader/build/src/util.js\");\r\nconst Long = __webpack_require__(/*! long */ \"(ssr)/./node_modules/long/umd/index.js\");\r\nexports.Long = Long;\r\nfunction isAnyExtension(obj) {\r\n    return ('@type' in obj) && (typeof obj['@type'] === 'string');\r\n}\r\nexports.isAnyExtension = isAnyExtension;\r\nvar IdempotencyLevel;\r\n(function (IdempotencyLevel) {\r\n    IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = \"IDEMPOTENCY_UNKNOWN\";\r\n    IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = \"NO_SIDE_EFFECTS\";\r\n    IdempotencyLevel[\"IDEMPOTENT\"] = \"IDEMPOTENT\";\r\n})(IdempotencyLevel = exports.IdempotencyLevel || (exports.IdempotencyLevel = {}));\r\nconst descriptorOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    defaults: true,\r\n    oneofs: true,\r\n    json: true,\r\n};\r\nfunction joinName(baseName, name) {\r\n    if (baseName === '') {\r\n        return name;\r\n    }\r\n    else {\r\n        return baseName + '.' + name;\r\n    }\r\n}\r\nfunction isHandledReflectionObject(obj) {\r\n    return (obj instanceof Protobuf.Service ||\r\n        obj instanceof Protobuf.Type ||\r\n        obj instanceof Protobuf.Enum);\r\n}\r\nfunction isNamespaceBase(obj) {\r\n    return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\r\n}\r\nfunction getAllHandledReflectionObjects(obj, parentName) {\r\n    const objName = joinName(parentName, obj.name);\r\n    if (isHandledReflectionObject(obj)) {\r\n        return [[objName, obj]];\r\n    }\r\n    else {\r\n        if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {\r\n            return Object.keys(obj.nested)\r\n                .map(name => {\r\n                return getAllHandledReflectionObjects(obj.nested[name], objName);\r\n            })\r\n                .reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n        }\r\n    }\r\n    return [];\r\n}\r\nfunction createDeserializer(cls, options) {\r\n    return function deserialize(argBuf) {\r\n        return cls.toObject(cls.decode(argBuf), options);\r\n    };\r\n}\r\nfunction createSerializer(cls) {\r\n    return function serialize(arg) {\r\n        if (Array.isArray(arg)) {\r\n            throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\r\n        }\r\n        const message = cls.fromObject(arg);\r\n        return cls.encode(message).finish();\r\n    };\r\n}\r\nfunction mapMethodOptions(options) {\r\n    return (options || []).reduce((obj, item) => {\r\n        for (const [key, value] of Object.entries(item)) {\r\n            switch (key) {\r\n                case 'uninterpreted_option':\r\n                    obj.uninterpreted_option.push(item.uninterpreted_option);\r\n                    break;\r\n                default:\r\n                    obj[key] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }, {\r\n        deprecated: false,\r\n        idempotency_level: IdempotencyLevel.IDEMPOTENCY_UNKNOWN,\r\n        uninterpreted_option: [],\r\n    });\r\n}\r\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\r\n    /* This is only ever called after the corresponding root.resolveAll(), so we\r\n     * can assume that the resolved request and response types are non-null */\r\n    const requestType = method.resolvedRequestType;\r\n    const responseType = method.resolvedResponseType;\r\n    return {\r\n        path: '/' + serviceName + '/' + method.name,\r\n        requestStream: !!method.requestStream,\r\n        responseStream: !!method.responseStream,\r\n        requestSerialize: createSerializer(requestType),\r\n        requestDeserialize: createDeserializer(requestType, options),\r\n        responseSerialize: createSerializer(responseType),\r\n        responseDeserialize: createDeserializer(responseType, options),\r\n        // TODO(murgatroid99): Find a better way to handle this\r\n        originalName: camelCase(method.name),\r\n        requestType: createMessageDefinition(requestType, fileDescriptors),\r\n        responseType: createMessageDefinition(responseType, fileDescriptors),\r\n        options: mapMethodOptions(method.parsedOptions),\r\n    };\r\n}\r\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\r\n    const def = {};\r\n    for (const method of service.methodsArray) {\r\n        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\r\n    }\r\n    return def;\r\n}\r\nfunction createMessageDefinition(message, fileDescriptors) {\r\n    const messageDescriptor = message.toDescriptor('proto3');\r\n    return {\r\n        format: 'Protocol Buffer 3 DescriptorProto',\r\n        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\r\n        fileDescriptorProtos: fileDescriptors,\r\n    };\r\n}\r\nfunction createEnumDefinition(enumType, fileDescriptors) {\r\n    const enumDescriptor = enumType.toDescriptor('proto3');\r\n    return {\r\n        format: 'Protocol Buffer 3 EnumDescriptorProto',\r\n        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\r\n        fileDescriptorProtos: fileDescriptors,\r\n    };\r\n}\r\n/**\r\n * function createDefinition(obj: Protobuf.Service, name: string, options:\r\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\r\n * name: string, options: Options): MessageTypeDefinition; function\r\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\r\n * EnumTypeDefinition;\r\n */\r\nfunction createDefinition(obj, name, options, fileDescriptors) {\r\n    if (obj instanceof Protobuf.Service) {\r\n        return createServiceDefinition(obj, name, options, fileDescriptors);\r\n    }\r\n    else if (obj instanceof Protobuf.Type) {\r\n        return createMessageDefinition(obj, fileDescriptors);\r\n    }\r\n    else if (obj instanceof Protobuf.Enum) {\r\n        return createEnumDefinition(obj, fileDescriptors);\r\n    }\r\n    else {\r\n        throw new Error('Type mismatch in reflection object handling');\r\n    }\r\n}\r\nfunction createPackageDefinition(root, options) {\r\n    const def = {};\r\n    root.resolveAll();\r\n    const descriptorList = root.toDescriptor('proto3').file;\r\n    const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\r\n    for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {\r\n        def[name] = createDefinition(obj, name, options, bufferList);\r\n    }\r\n    return def;\r\n}\r\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\r\n    options = options || {};\r\n    const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\r\n    root.resolveAll();\r\n    return createPackageDefinition(root, options);\r\n}\r\n/**\r\n * Load a .proto file with the specified options.\r\n * @param filename One or multiple file paths to load. Can be an absolute path\r\n *     or relative to an include path.\r\n * @param options.keepCase Preserve field names. The default is to change them\r\n *     to camel case.\r\n * @param options.longs The type that should be used to represent `long` values.\r\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\r\n *     from a library.\r\n * @param options.enums The type that should be used to represent `enum` values.\r\n *     The only valid option is `String`. Defaults to the numeric value.\r\n * @param options.bytes The type that should be used to represent `bytes`\r\n *     values. Valid options are `Array` and `String`. The default is to use\r\n *     `Buffer`.\r\n * @param options.defaults Set default values on output objects. Defaults to\r\n *     `false`.\r\n * @param options.arrays Set empty arrays for missing array values even if\r\n *     `defaults` is `false`. Defaults to `false`.\r\n * @param options.objects Set empty objects for missing object values even if\r\n *     `defaults` is `false`. Defaults to `false`.\r\n * @param options.oneofs Set virtual oneof properties to the present field's\r\n *     name\r\n * @param options.json Represent Infinity and NaN as strings in float fields,\r\n *     and automatically decode google.protobuf.Any values.\r\n * @param options.includeDirs Paths to search for imported `.proto` files.\r\n */\r\nfunction load(filename, options) {\r\n    return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {\r\n        return createPackageDefinition(loadedRoot, options);\r\n    });\r\n}\r\nexports.load = load;\r\nfunction loadSync(filename, options) {\r\n    const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\r\n    return createPackageDefinition(loadedRoot, options);\r\n}\r\nexports.loadSync = loadSync;\r\nfunction fromJSON(json, options) {\r\n    options = options || {};\r\n    const loadedRoot = Protobuf.Root.fromJSON(json);\r\n    loadedRoot.resolveAll();\r\n    return createPackageDefinition(loadedRoot, options);\r\n}\r\nexports.fromJSON = fromJSON;\r\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\r\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\r\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\r\n}\r\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\r\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\r\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\r\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\r\n}\r\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\r\n(0, util_1.addCommonProtos)();\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/proto-loader/build/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/proto-loader/build/src/util.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/util.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/**\r\n * @license\r\n * Copyright 2018 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.addCommonProtos = exports.loadProtosWithOptionsSync = exports.loadProtosWithOptions = void 0;\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(ssr)/./node_modules/protobufjs/index.js\");\r\nfunction addIncludePathResolver(root, includePaths) {\r\n    const originalResolvePath = root.resolvePath;\r\n    root.resolvePath = (origin, target) => {\r\n        if (path.isAbsolute(target)) {\r\n            return target;\r\n        }\r\n        for (const directory of includePaths) {\r\n            const fullPath = path.join(directory, target);\r\n            try {\r\n                fs.accessSync(fullPath, fs.constants.R_OK);\r\n                return fullPath;\r\n            }\r\n            catch (err) {\r\n                continue;\r\n            }\r\n        }\r\n        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\r\n        return originalResolvePath(origin, target);\r\n    };\r\n}\r\nasync function loadProtosWithOptions(filename, options) {\r\n    const root = new Protobuf.Root();\r\n    options = options || {};\r\n    if (!!options.includeDirs) {\r\n        if (!Array.isArray(options.includeDirs)) {\r\n            return Promise.reject(new Error('The includeDirs option must be an array'));\r\n        }\r\n        addIncludePathResolver(root, options.includeDirs);\r\n    }\r\n    const loadedRoot = await root.load(filename, options);\r\n    loadedRoot.resolveAll();\r\n    return loadedRoot;\r\n}\r\nexports.loadProtosWithOptions = loadProtosWithOptions;\r\nfunction loadProtosWithOptionsSync(filename, options) {\r\n    const root = new Protobuf.Root();\r\n    options = options || {};\r\n    if (!!options.includeDirs) {\r\n        if (!Array.isArray(options.includeDirs)) {\r\n            throw new Error('The includeDirs option must be an array');\r\n        }\r\n        addIncludePathResolver(root, options.includeDirs);\r\n    }\r\n    const loadedRoot = root.loadSync(filename, options);\r\n    loadedRoot.resolveAll();\r\n    return loadedRoot;\r\n}\r\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\r\n/**\r\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\r\n */\r\nfunction addCommonProtos() {\r\n    // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\r\n    // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\r\n    // Using constant strings for compatibility with tools like Webpack\r\n    const apiDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/api.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/api.json\");\r\n    const descriptorDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/descriptor.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json\");\r\n    const sourceContextDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/source_context.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/source_context.json\");\r\n    const typeDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/type.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/type.json\");\r\n    Protobuf.common('api', apiDescriptor.nested.google.nested.protobuf.nested);\r\n    Protobuf.common('descriptor', descriptorDescriptor.nested.google.nested.protobuf.nested);\r\n    Protobuf.common('source_context', sourceContextDescriptor.nested.google.nested.protobuf.nested);\r\n    Protobuf.common('type', typeDescriptor.nested.google.nested.protobuf.nested);\r\n}\r\nexports.addCommonProtos = addCommonProtos;\r\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdycGMvcHJvdG8tbG9hZGVyL2J1aWxkL3NyYy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxpQ0FBaUMsR0FBRyw2QkFBNkI7QUFDM0YsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGlCQUFpQixtQkFBTyxDQUFDLDREQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVEsd0NBQXdDLGFBQWE7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQyxxR0FBcUM7QUFDdkUsaUNBQWlDLG1CQUFPLENBQUMsbUhBQTRDO0FBQ3JGLG9DQUFvQyxtQkFBTyxDQUFDLDJIQUFnRDtBQUM1RiwyQkFBMkIsbUJBQU8sQ0FBQyx1R0FBc0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RvX3BoLy4vbm9kZV9tb2R1bGVzL0BncnBjL3Byb3RvLWxvYWRlci9idWlsZC9zcmMvdXRpbC5qcz9kZWE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTggZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hZGRDb21tb25Qcm90b3MgPSBleHBvcnRzLmxvYWRQcm90b3NXaXRoT3B0aW9uc1N5bmMgPSBleHBvcnRzLmxvYWRQcm90b3NXaXRoT3B0aW9ucyA9IHZvaWQgMDtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgUHJvdG9idWYgPSByZXF1aXJlKFwicHJvdG9idWZqc1wiKTtcclxuZnVuY3Rpb24gYWRkSW5jbHVkZVBhdGhSZXNvbHZlcihyb290LCBpbmNsdWRlUGF0aHMpIHtcclxuICAgIGNvbnN0IG9yaWdpbmFsUmVzb2x2ZVBhdGggPSByb290LnJlc29sdmVQYXRoO1xyXG4gICAgcm9vdC5yZXNvbHZlUGF0aCA9IChvcmlnaW4sIHRhcmdldCkgPT4ge1xyXG4gICAgICAgIGlmIChwYXRoLmlzQWJzb2x1dGUodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGRpcmVjdG9yeSBvZiBpbmNsdWRlUGF0aHMpIHtcclxuICAgICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4oZGlyZWN0b3J5LCB0YXJnZXQpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgZnMuYWNjZXNzU3luYyhmdWxsUGF0aCwgZnMuY29uc3RhbnRzLlJfT0spO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGxQYXRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcoYCR7dGFyZ2V0fSBub3QgZm91bmQgaW4gYW55IG9mIHRoZSBpbmNsdWRlIHBhdGhzICR7aW5jbHVkZVBhdGhzfWApO1xyXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlc29sdmVQYXRoKG9yaWdpbiwgdGFyZ2V0KTtcclxuICAgIH07XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gbG9hZFByb3Rvc1dpdGhPcHRpb25zKGZpbGVuYW1lLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCByb290ID0gbmV3IFByb3RvYnVmLlJvb3QoKTtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgaWYgKCEhb3B0aW9ucy5pbmNsdWRlRGlycykge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShvcHRpb25zLmluY2x1ZGVEaXJzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdUaGUgaW5jbHVkZURpcnMgb3B0aW9uIG11c3QgYmUgYW4gYXJyYXknKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZEluY2x1ZGVQYXRoUmVzb2x2ZXIocm9vdCwgb3B0aW9ucy5pbmNsdWRlRGlycyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsb2FkZWRSb290ID0gYXdhaXQgcm9vdC5sb2FkKGZpbGVuYW1lLCBvcHRpb25zKTtcclxuICAgIGxvYWRlZFJvb3QucmVzb2x2ZUFsbCgpO1xyXG4gICAgcmV0dXJuIGxvYWRlZFJvb3Q7XHJcbn1cclxuZXhwb3J0cy5sb2FkUHJvdG9zV2l0aE9wdGlvbnMgPSBsb2FkUHJvdG9zV2l0aE9wdGlvbnM7XHJcbmZ1bmN0aW9uIGxvYWRQcm90b3NXaXRoT3B0aW9uc1N5bmMoZmlsZW5hbWUsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHJvb3QgPSBuZXcgUHJvdG9idWYuUm9vdCgpO1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBpZiAoISFvcHRpb25zLmluY2x1ZGVEaXJzKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG9wdGlvbnMuaW5jbHVkZURpcnMpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGluY2x1ZGVEaXJzIG9wdGlvbiBtdXN0IGJlIGFuIGFycmF5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZEluY2x1ZGVQYXRoUmVzb2x2ZXIocm9vdCwgb3B0aW9ucy5pbmNsdWRlRGlycyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsb2FkZWRSb290ID0gcm9vdC5sb2FkU3luYyhmaWxlbmFtZSwgb3B0aW9ucyk7XHJcbiAgICBsb2FkZWRSb290LnJlc29sdmVBbGwoKTtcclxuICAgIHJldHVybiBsb2FkZWRSb290O1xyXG59XHJcbmV4cG9ydHMubG9hZFByb3Rvc1dpdGhPcHRpb25zU3luYyA9IGxvYWRQcm90b3NXaXRoT3B0aW9uc1N5bmM7XHJcbi8qKlxyXG4gKiBMb2FkIEdvb2dsZSdzIHdlbGwta25vd24gcHJvdG8gZmlsZXMgdGhhdCBhcmVuJ3QgZXhwb3NlZCBieSBQcm90b2J1Zi5qcy5cclxuICovXHJcbmZ1bmN0aW9uIGFkZENvbW1vblByb3RvcygpIHtcclxuICAgIC8vIFByb3RvYnVmLmpzIGV4cG9zZXM6IGFueSwgZHVyYXRpb24sIGVtcHR5LCBmaWVsZF9tYXNrLCBzdHJ1Y3QsIHRpbWVzdGFtcCxcclxuICAgIC8vIGFuZCB3cmFwcGVycy4gY29tcGlsZXIvcGx1Z2luIGlzIGV4Y2x1ZGVkIGluIFByb3RvYnVmLmpzIGFuZCBoZXJlLlxyXG4gICAgLy8gVXNpbmcgY29uc3RhbnQgc3RyaW5ncyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRvb2xzIGxpa2UgV2VicGFja1xyXG4gICAgY29uc3QgYXBpRGVzY3JpcHRvciA9IHJlcXVpcmUoJ3Byb3RvYnVmanMvZ29vZ2xlL3Byb3RvYnVmL2FwaS5qc29uJyk7XHJcbiAgICBjb25zdCBkZXNjcmlwdG9yRGVzY3JpcHRvciA9IHJlcXVpcmUoJ3Byb3RvYnVmanMvZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IuanNvbicpO1xyXG4gICAgY29uc3Qgc291cmNlQ29udGV4dERlc2NyaXB0b3IgPSByZXF1aXJlKCdwcm90b2J1ZmpzL2dvb2dsZS9wcm90b2J1Zi9zb3VyY2VfY29udGV4dC5qc29uJyk7XHJcbiAgICBjb25zdCB0eXBlRGVzY3JpcHRvciA9IHJlcXVpcmUoJ3Byb3RvYnVmanMvZ29vZ2xlL3Byb3RvYnVmL3R5cGUuanNvbicpO1xyXG4gICAgUHJvdG9idWYuY29tbW9uKCdhcGknLCBhcGlEZXNjcmlwdG9yLm5lc3RlZC5nb29nbGUubmVzdGVkLnByb3RvYnVmLm5lc3RlZCk7XHJcbiAgICBQcm90b2J1Zi5jb21tb24oJ2Rlc2NyaXB0b3InLCBkZXNjcmlwdG9yRGVzY3JpcHRvci5uZXN0ZWQuZ29vZ2xlLm5lc3RlZC5wcm90b2J1Zi5uZXN0ZWQpO1xyXG4gICAgUHJvdG9idWYuY29tbW9uKCdzb3VyY2VfY29udGV4dCcsIHNvdXJjZUNvbnRleHREZXNjcmlwdG9yLm5lc3RlZC5nb29nbGUubmVzdGVkLnByb3RvYnVmLm5lc3RlZCk7XHJcbiAgICBQcm90b2J1Zi5jb21tb24oJ3R5cGUnLCB0eXBlRGVzY3JpcHRvci5uZXN0ZWQuZ29vZ2xlLm5lc3RlZC5wcm90b2J1Zi5uZXN0ZWQpO1xyXG59XHJcbmV4cG9ydHMuYWRkQ29tbW9uUHJvdG9zID0gYWRkQ29tbW9uUHJvdG9zO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@grpc/proto-loader/build/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@grpc/grpc-js/package.json":
/*!*************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/package.json ***!
  \*************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@grpc/grpc-js","version":"1.9.15","description":"gRPC Library for Node - pure JS implementation","homepage":"https://grpc.io/","repository":"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js","main":"build/src/index.js","engines":{"node":"^8.13.0 || >=10.10.0"},"keywords":[],"author":{"name":"Google Inc."},"types":"build/src/index.d.ts","license":"Apache-2.0","devDependencies":{"@types/gulp":"^4.0.6","@types/gulp-mocha":"0.0.32","@types/lodash":"^4.14.186","@types/mocha":"^5.2.6","@types/ncp":"^2.0.1","@types/pify":"^3.0.2","@types/semver":"^7.3.9","@typescript-eslint/eslint-plugin":"^5.59.11","@typescript-eslint/parser":"^5.59.11","@typescript-eslint/typescript-estree":"^5.59.11","clang-format":"^1.0.55","eslint":"^8.42.0","eslint-config-prettier":"^8.8.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^4.2.1","execa":"^2.0.3","gulp":"^4.0.2","gulp-mocha":"^6.0.0","lodash":"^4.17.4","madge":"^5.0.1","mocha-jenkins-reporter":"^0.4.1","ncp":"^2.0.0","pify":"^4.0.1","prettier":"^2.8.8","rimraf":"^3.0.2","semver":"^7.3.5","ts-node":"^10.9.1","typescript":"^5.1.3"},"contributors":[{"name":"Google Inc."}],"scripts":{"build":"npm run compile","clean":"rimraf ./build","compile":"tsc -p .","format":"clang-format -i -style=\\"{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}\\" src/*.ts test/*.ts","lint":"eslint src/*.ts test/*.ts","prepare":"npm run generate-types && npm run compile","test":"gulp test","check":"npm run lint","fix":"eslint --fix src/*.ts test/*.ts","pretest":"npm run generate-types && npm run generate-test-types && npm run compile","posttest":"npm run check && madge -c ./build/src","generate-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto","generate-test-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto"},"dependencies":{"@grpc/proto-loader":"^0.7.8","@types/node":">=12.12.47"},"files":["src/**/*.ts","build/src/**/*.{js,d.ts,js.map}","proto/*.proto","LICENSE","deps/envoy-api/envoy/api/v2/**/*.proto","deps/envoy-api/envoy/config/**/*.proto","deps/envoy-api/envoy/service/**/*.proto","deps/envoy-api/envoy/type/**/*.proto","deps/udpa/udpa/**/*.proto","deps/googleapis/google/api/*.proto","deps/googleapis/google/rpc/*.proto","deps/protoc-gen-validate/validate/**/*.proto"]}');

/***/ })

};
;